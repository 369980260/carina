{
    "docs": [
        {
            "location": "/", 
            "text": "Carina Automation Framework\n\n\nCarina is a Java-based test automation framework that unites all testing layers: Mobile applications (web, native, hybrid), WEB applications, REST services, Databases.\n\n\nTRY DEMO PROJECT NOW\n\n\n\n\n\n\n\n\nCarina framework is built on top of most popular open-source solutions like Selenium, Appium, TestNG allowing to reduce dependence on specific technology stack.\n\n\n\n\n\n\nCarina supports all popular browsers (IE, Safari, Chrome, Firefox) and mobile devices (iOS/Android). Special feature for mobile domain: it reuses test automation code between IOS/Android up to 70-80%.\n\n\n\n\n\n\nAs far as our framework is built in Java, it is cross-platform. Tests may be easily executed both on Unix or Windows OS. All you need is JDK 8 installed.\n\n\n\n\n\n\nFramework supports different types of databases - both relational and nonrelational (MySQL, SQL Server, Oracle, PostgreSQL), providing amazing experience of DAO layer implementation using MyBatis ORM framework.\n\n\n\n\n\n\nAPI testing is based on Freemarker template engine. It enables great flexibility in generating REST requests and responses are dynamically changed by incoming arguments.\n\n\n\n\n\n\nCarina is fully integrated into \nQPS-Infra\n that helps to setup production-ready environment for running Mobile, Web and API tests. Feel free to ask any questions if you are going use it in your company.", 
            "title": "Overview"
        }, 
        {
            "location": "/#carina-automation-framework", 
            "text": "Carina is a Java-based test automation framework that unites all testing layers: Mobile applications (web, native, hybrid), WEB applications, REST services, Databases.  TRY DEMO PROJECT NOW     Carina framework is built on top of most popular open-source solutions like Selenium, Appium, TestNG allowing to reduce dependence on specific technology stack.    Carina supports all popular browsers (IE, Safari, Chrome, Firefox) and mobile devices (iOS/Android). Special feature for mobile domain: it reuses test automation code between IOS/Android up to 70-80%.    As far as our framework is built in Java, it is cross-platform. Tests may be easily executed both on Unix or Windows OS. All you need is JDK 8 installed.    Framework supports different types of databases - both relational and nonrelational (MySQL, SQL Server, Oracle, PostgreSQL), providing amazing experience of DAO layer implementation using MyBatis ORM framework.    API testing is based on Freemarker template engine. It enables great flexibility in generating REST requests and responses are dynamically changed by incoming arguments.    Carina is fully integrated into  QPS-Infra  that helps to setup production-ready environment for running Mobile, Web and API tests. Feel free to ask any questions if you are going use it in your company.", 
            "title": "Carina Automation Framework"
        }, 
        {
            "location": "/getting_started/", 
            "text": "Install and configure JDK 1.8+\n\n\nInstall and configure \nApache Maven 3.5.2+\n\n\nDownload and start the latest \nSelenium standalone server\n\n\nDownload the latest version of \nEclipse\n and install \nTestNG plugin\n\n\n\n\nGenerating project\n\n\nThe easiest way to initialize new project is to use Carina archetype, you will get correct project structure along with test samples:\n\n\nmvn archetype:generate -DarchetypeGroupId=com.qaprosoft \\\n                       -DarchetypeArtifactId=carina-archetype \\\n                       -DarchetypeVersion=1.0 \\\n                       -DgroupId=\nyour_groupId\n \\\n                       -DartifactId=\nyour_artifactId\n \\\n                       -Dname=\nyou_proj_name\n \\\n                       -Durl=\nyour_proj_url\n \\\n                       -Dversion=\nyour_proj_version\n\n\n\n\n\nIf any attribute contains spaces, it should be set in quotes (e.g.: -Dname=\"Hello World\"). In above Maven command you have to specify 5 attributes while the first 3 should be left unchanged. Let's go through these attributes:\n\n\n\n    \n\n        \nAttribute\n\n        \nMeaning\n\n        \nExample\n\n    \n\n    \n\n        \n-DgroupId\n\n        \nCompany domain in reverce order\n\n        \ncom.qaprosoft\n\n    \n\n    \n\n        \n-DartifactId\n\n        \nJava project name\n\n        \ncarina-qa\n\n    \n\n    \n\n        \n-Dname\n\n        \nName with more details\n\n        \n\"Carina Test Automation\"\n\n    \n\n    \n\n        \n-Durl\n\n        \nCompany URL\n\n        \nhttp://qaprosoft.com\n\n    \n\n    \n\n        \n-Dversion\n\n        \nProject version\n\n        \n1.0\n\n    \n\n\n\n\n\nImport to Eclipse\n\n\nIf generation is successfully complete, you would see a new project folder with a name equal to the artifactId attribute specified during generation, so navigate to that folder (where pom.xml is located) and execute the following Maven task:\n\n\nmvn clean eclipse:eclipse\n\n\n\n\nBy executing this command, Maven should resolve all dependencies, downloading required libraries to your local repository and generating Eclipse classpath. Before importing new project to Eclipse, you should link your IDE to your Maven repository by executing the following task:\n\n\nmvn -Dworkspace=\npath_to_workspace\n eclipse:configure-workspace\n\n\n\n\nHere you have to specify the absolute path to the Eclipse workspace. After that, restart Eclipse IDE. Now you can import generated projects such as \"Existing Java Project\" into Eclipse IDE.", 
            "title": "Getting started"
        }, 
        {
            "location": "/getting_started/#generating-project", 
            "text": "The easiest way to initialize new project is to use Carina archetype, you will get correct project structure along with test samples:  mvn archetype:generate -DarchetypeGroupId=com.qaprosoft \\\n                       -DarchetypeArtifactId=carina-archetype \\\n                       -DarchetypeVersion=1.0 \\\n                       -DgroupId= your_groupId  \\\n                       -DartifactId= your_artifactId  \\\n                       -Dname= you_proj_name  \\\n                       -Durl= your_proj_url  \\\n                       -Dversion= your_proj_version   If any attribute contains spaces, it should be set in quotes (e.g.: -Dname=\"Hello World\"). In above Maven command you have to specify 5 attributes while the first 3 should be left unchanged. Let's go through these attributes:  \n     \n         Attribute \n         Meaning \n         Example \n     \n     \n         -DgroupId \n         Company domain in reverce order \n         com.qaprosoft \n     \n     \n         -DartifactId \n         Java project name \n         carina-qa \n     \n     \n         -Dname \n         Name with more details \n         \"Carina Test Automation\" \n     \n     \n         -Durl \n         Company URL \n         http://qaprosoft.com \n     \n     \n         -Dversion \n         Project version \n         1.0", 
            "title": "Generating project"
        }, 
        {
            "location": "/getting_started/#import-to-eclipse", 
            "text": "If generation is successfully complete, you would see a new project folder with a name equal to the artifactId attribute specified during generation, so navigate to that folder (where pom.xml is located) and execute the following Maven task:  mvn clean eclipse:eclipse  By executing this command, Maven should resolve all dependencies, downloading required libraries to your local repository and generating Eclipse classpath. Before importing new project to Eclipse, you should link your IDE to your Maven repository by executing the following task:  mvn -Dworkspace= path_to_workspace  eclipse:configure-workspace  Here you have to specify the absolute path to the Eclipse workspace. After that, restart Eclipse IDE. Now you can import generated projects such as \"Existing Java Project\" into Eclipse IDE.", 
            "title": "Import to Eclipse"
        }, 
        {
            "location": "/project_structure/", 
            "text": "Carina test project is structured as a standard Maven project:\n\n\ncarina-demo\n|-- pom.xml\n|-- src/test/java        \n|-- src/test/resources\n    |-- api\n    |-- testng_suites\n    |-- xls\n|-- src/main/java\n|-- src/main/resources\n    |-- l18n\n\n\n\n\n\n\nsrc/test/java\n - contains test classes organized using TestNG annotations\n\n\n\n\n\n\n\n\nsrc/test/resources\n - contains TestNG xml files, API templates and XLS data providers\n\n\n\n\n\n\n\n\nsrc/main/java\n - contains page object classes, API domains and additional utilities\n\n\n\n\n\n\n\n\nsrc/main/resources\n - contains l18n bundles, configuration properties files and MyBastis profiles if needed", 
            "title": "Project structure"
        }, 
        {
            "location": "/configuration/", 
            "text": "Configuration files\n\n\nThere are multiple properties files located in src/main/resources:\n\n\n\n\napi.properties\n - API test endpoints reference\n\n\nconfig.properties\n - global test configuration\n\n\ndatabase.properties\n - database connection properties\n\n\nemail.properties\n - emailable reports config\n\n\ntestdata.properties\n - test user credentials \n\n\n\n\nAll properties may be retrieved in test using R class:\n\n\nR.API.get(\nGetUserMethods\n)\nR.CONFIG.get(\nbrowser\n)\nR.DATABASE.get(\ndb.url\n)\nR.EMAIL.get(\ntitle\n)\nR.TESTDATA.get(\nuser.email\n)\n\n\n\n\nDefault config properties can be obtained by\n\n\nConfiguration.get(Parameter.EXTRA_CAPABILITIES)\n\n\n\n\nAll project configuration properties are located in \n_config.properties\n file. In the table below we are providing description for most of the parameters:\n\n\n    \n\n        \nAttribute\n\n        \nMeaning\n\n        \nExample\n\n    \n\n    \n\n        \nurl\n\n        \nBase application URL\n\n        \nhttp://qaprosoft.com\n\n    \n\n    \n\n        \nbrowser\n\n        \nBrowser for testing\n\n        \nchrome / firefox / safari / iexplore\n\n    \n\n    \n\n        \nselenium_host\n\n        \nSelenium server host\n\n        \nhttp://localhost:4444/wd/hub\n\n    \n\n    \n\n        \napp_version\n\n        \nApplication version/build number for reporting\n\n        \n1.2.5\n\n    \n\n    \n\n        \nlocale\n\n        \nLocale for using L10N feature. Enabled when enable_l10n=true\n\n        \nen_GB,de_DE,fr_FR\n\n    \n\n    \n\n        \nlanguage\n\n        \nLanguage for i18n defature. Enabled when enable_i18n=true\n\n        \nen_GB,de_DE,fr_FR\n\n    \n\n    \n\n        \nretry_interval\n\n        \nTimeout interval between calling HTML DOM for the element.\nNote:\n in ms. For mobile automation specify number from 500-1500 range\n\n        \nInteger\n\n    \n\n    \n\n        \nauto_screenshot\n\n        \nGlobal switch for taking screenshots. When disabled only failures will be captured\n\n        \nBoolean\n\n    \n\n    \n\n        \nkeep_all_screenshots\n\n        \nKeep screenshots artifacts even for passed tests.\n\n        \n\n    \n\n    \n\n        \nreport_url\n\n        \nDirect HTTP link to Jenkins workspace report folder. Automatically specified by CI\n\n        \nhttp://localhost:8888/job /my_project/1/eTAF_Report\n\n    \n\n    \n\n        \nmax_screen_history\n\n        \nMax number of reports in history\n\n        \nInteger\n\n    \n\n    \n\n        \njira_url\n\n        \nJIRA base URL for direct links with bugs description\n\n        \nhttps://jira.carina.com/browse/\n\n    \n\n    \n\n        \nemail_list\n\n        \nComma-separated list of emails for reports\n\n        \nu1@gmail.com,u2@gmail.com\n\n    \n\n    \n\n        \nsender_email\n\n        \nEmail account for reports sending. \nNote:\n Gmail smtp settings are used by default. Update _email.properties to use your own SMTP server\n\n        \ncarina.qareport@qaprosoft.com\n\n    \n\n    \n\n        \nsender_pswd\n\n        \nEmail password for reports sending\n\n        \npwd123\n\n    \n\n    \n\n        \nenv\n\n        \nEnvironment specific configuration. More about this \nfeature\n\n        \nSTAG, PROD, DEMO\n\n    \n\n    \n\n        \nenv_arg_resolver\n\n        \nThis parametr is optional, if it isn't set default value will be used. In most cases \ndefault value is enough\n\n        \njava class \n\n    \n\n        \n\n        \nplatform\n\n        \nPlatform version for Selenium Grid\n\n        \nANDROID,IOS,WINDOWS,MAC,LINUX\n\n    \n\n        \n\n        \nbrowser_version\n\n        \nThe browser version, or the empty string if unknown for Selenium Grid\n\n        \n\"8.0\", \"52.1\"\n\n    \n\n        \n\n        \ndriver_mode\n\n        \nRule for defining WebDriver lifecycle.\n\n        \nmethod_mode / class_mode / suite_mode\n\n    \n\n    \n\n        \ndriver_event_listeners\n\n        \nComma-separated list of listeners. Listeners provide more logs from WebDriver and have to be instances of WebDriverEventListener\n\n        \ncom.someCompane.core .EventListener\n\n    \n\n        \n\n        \nmax_driver_count\n\n        \nMax number of drivers per thread\n\n        \nInteger\n\n    \n\n        \n\n        \ncustom_capabilities\n\n        \nName of propertie file with custom capabilities(key-value)\n\n        \ncustom.properties\n\n    \n\n        \n\n        \nproxy_host\n\n        \nThe hostname of the server\n\n        \nhost.example.com\n\n    \n\n        \n\n        \nproxy_port\n\n        \nThe port number\n\n        \n80\n\n    \n\n        \n\n        \nproxy_protocols\n\n        \nComma-separated list of internet protocols used to carry connection information from the source requesting the connection to the destination for which the connection was requested.\n\n        \nhttp, https, ftp, socks\n\n    \n\n        \n\n        \nbrowsermob_proxy\n\n        \nBoolean parameter which enable or disable set up of mobile proxy\n\n        \ntrue, false\n\n    \n\n        \n\n        \nbrowsermob_port\n\n        \nThe port number for mobile browser (make sense only for local debugging)\n\n        \nInteger\n\n    \n\n        \n\n        \nproxy_set_to_system\n\n        \nBoolean parameter which enable or disable set up of proxy\n\n        \ntrue, false\n\n    \n\n        \n\n        \nfailure_email_list\n\n        \nComma-separated list of emails for failure reports\n\n        \nu1@mail.com,u2@mail.com\n\n    \n\n        \n\n        \ntrack_known_issues\n\n        \nBoolean parameter. If it is true and some Jira tickets assosiated with test in case of failure Jira info will be added to report\n\n        \ntrue,false\n\n    \n\n    \n\n        \nexplicit_timeout\n\n        \nTimeout in seconds to wait for a certain condition to occur before proceeding further in the code\n\n        \nInteger\n\n    \n\n    \n\n        \nauto_download\n\n        \nEnabled parametr prevent download dialog and download file automatically. Feature currently avaliable for Chrome and FireFox\n\n        \nfalse, true\n\n    \n\n    \n\n        \nauto_download_apps\n\n        \nMIME types / Internet Media Types. Parameter is necessary only for configure auto downloading for FireFox\n\n        \napplication/pdf, list of \nvalues\n\n    \n\n    \n\n        \nproject_report_directory\n\n        \nPath to folder where reports will be saved\n\n        \n./reports/qa\n\n    \n\n    \n\n        \nbig_screen_width\n\n        \nSreenshots will be resized according this width if there own width is bigger\n\n        \n500, 1200, Integer\n\n    \n\n    \n\n        \nbig_screen_height\n\n        \nSreenshots will be resized according this height if there own height is bigger\n\n        \n500, 1200, Integer\n\n    \n\n        \n\n        \nsmall_screen_width\n\n        \nThumbnails width\n\n        \nInteger\n\n    \n\n    \n\n        \nbig_screen_height\n\n        \nThumbnails height\n\n        \nInteger\n\n    \n\n    \n\n        \nbig_screen_height\n\n        \nThumbnails height\n\n        \nInteger\n\n    \n\n    \n\n        \ninit_retry_count\n\n        \nNumber of attempts to create driver.  Default value 0 means that it would be only 1 attempt\n\n        \nInteger\n\n    \n\n    \n\n        \ninit_retry_interval\n\n        \nInterval is seconds between attempts to create driver\n\n        \nInteger\n\n    \n\n    \n\n        \nretry_count\n\n        \nNumber of test-retrying in case of failure.  Default value 0 means that test would be performed only once\n\n        \nInteger\n\n    \n\n        \n\n        \nenable_l10n\n\n        \nEnable L10N feature\n\n        \nfalse, true\n\n    \n\n            \n\n        \nl10n_encoding\n\n        \nCharset for l10n feature\n\n        \nISO-8859-5, ISO-8859-6, UTF-8\n\n    \n\n    \n\n        \nenable_i18n\n\n        \nEnable i18n feature\n\n        \nfalse, true\n\n    \n\n        \n\n        \nthread_count\n\n        \nDefault number of threads to use when running tests in parallel.\n\n        \nfInteger\n\n    \n\n        \n\n        \ndata_provider_thread_count\n\n        \nDefault number of threads to use for data providers when running tests in parallel.\n\n        \nInteger\n\n    \n\n        \n\n        \ncore_log_level\n\n        \nLevel for Carina logging\n\n        \nALL, DEBUG, ERROR, WARN, FATAL, INFO, OFF, TRACE \n\n    \n\n        \n\n        \nlog_all_json\n\n        \nAPI response will be logged in JSON format\n\n        \ntrue, false\n\n    \n\n        \n\n        \ndate_format\n\n        \nDate format for DateUtils.class\n\n        \nHH:mm:ss dd/MM/yyyy, HH:mm MM/dd/yyyy\n\n    \n\n        \n\n        \ntime_format\n\n        \nDate format for DateUtils.class\n\n        \nHH:mm:ss.SSS, HH:mm a zzz\n\n    \n\n        \n\n        \ncrypto_key_path\n\n        \nPath to file with crypto key\n\n        \n./src/main/resources/crypto.key\n\n    \n\n        \n\n        \nsuite_name\n\n        \nSuite name for report and TestRail. If this parameter is NULL will be get from TestNG xml (parameter suite name) or _email.properties (title)\n\n        \nAdvanced Acceptance\n\n    \n\n    \n\n        \njira_updater\n\n        \nClass contains logic to update Jira. \nNote\n Custom updater have to implement DefaultJiraUpdater, by default methods do nothing\n\n        \nCustom class\n\n    \n\n    \n\n        \njira_url\n\n        \nUrl to Jira\n\n        \nhttps://yourclass.atlassian.net\n\n    \n\n        \n\n        \njira_user\n\n        \nJira user email\n\n        \nadmin@yourcompany.com\n\n    \n\n        \n\n        \njira_password\n\n        \nJira user password\n\n        \nadmin123456\n\n    \n\n        \n\n        \njira_suite_id\n\n        \nJira suit id (if you have one)\n\n        \nInteger\n\n    \n\n    \n\n        \njira_project\n\n        \nJira project id\n\n        \nInteger\n\n    \n\n        \n\n        \njira_create_new_ticket\n\n        \nIf feature is enabled after test failure new jira ticket will be created\n\n        \ntrue, false\n\n    \n\n    \n\n        \nvideo_recording\n\n        \nIf feature is test will be recorded\n\n        \ntrue, false\n\n    \n\n    \n\n        \ntestrail_url\n\n        \nUrl to TestRail\n\n        \nhttps:/yourcompany.testrail.net\n\n    \n\n    \n\n        \ntestrail_user\n\n        \nTestRail user email\n\n        \nadmin@yourcompany.com\n\n    \n\n        \n\n        \ntestrail_updater\n\n        \nClass contains logic to update TestRail. \nNote\n Custom updater have to implement EmptyTestRailUpdater, by default methods do nothing\n\n        \nCustom class\n\n    \n\n        \n\n        \ntestrail_milestone\n\n        \nMilestone to set on TestRail for run\n\n        \nsome-milestone\n\n    \n\n        \n\n        \ntestrail_assignee\n\n        \nUser asserneed for the suit\n\n        \nasignee_user@yuorcompany.com\n\n    \n\n        \n\n        \ns3_bucket_name\n\n        \nBucket name on S3 Amazon from which you suppose to download artifacts\n\n        \nsome bucket\n\n    \n\n        \n\n        \naccess_key_id\n\n        \nAcces key id for Amamzon S3. More info \nhere\n\n        \ngkhcvdgvceUYF67897hbjsbdc\n\n    \n\n        \n\n        \nsecret_key\n\n        \nSecret key for Amamzon S3. More info \nhere\n\n        \ngkhcvdgvceUYF67897hbjsbdc\n\n    \n\n        \n\n        \ns3_local_storage\n\n        \nDirectory for downloading artefacts\n\n        \n./s3\n\n    \n\n        \n\n        \ns3_screenshot_bucket_name\n\n        \nBucket name on S3 Amamzon for saving report screenshots\n\n        \nScreenshot bucket name\n\n    \n\n        \n\n        \ns3_save_screenshots\n\n        \nIf enabled screenshots would be saved on S3 Amamzon\n\n        \nfalse, true\n\n    \n\n        \n\n        \nhockeyapp_token\n\n        \nToken for authentication in Hockey App\n\n        \ngkhcvdgvceUYF67897hbjsbdc\n\n    \n\n        \n\n        \nhockeyapp_local_storage\n\n        \nDirectory for Hockey App artefacts\n\n        \n./hockeyapp\n\n    \n\n        \n\n        \nadd_new_localization\n\n        \nShould be set to 'true' if you want to create new localization files for required Locale.Otherwise there will be just localization checking\n\n        \nfalse, true\n\n    \n\n        \n\n        \nadd_new_localization_encoding\n\n        \nEncoding for new lokalization\n\n        \nutf-16, utf-32\n\n    \n\n        \n\n        \nadd_new_localization_path\n\n        \nPath where created localization properties should be saved. If null - they will be added to artifactory folder in report\n\n        \nutf-16, utf-32\n\n    \n\n        \n\n        \nadd_new_localization_property_name\n\n        \nPath where created localization properties should be saved. If null - they will be added to artifactory folder in report\n\n        \nBasic template for property name.\n\n    \n\n        \n\n        \ncucumber_tests\n\n        \nIf parametrs contains true Cucumber tests will be started\n\n        \ntrue, false\n\n    \n\n        \n\n        \ncucumber_tests_app_version\n\n        \nVersion of app using in Cucumber tests\n\n        \n2.013\n\n    \n\n        \n\n        \ncucumber_tests_name\n\n        \nCucucmber tests name\n\n        \ncucumber tests\n\n    \n\n        \n\n        \ncucumber_tests_results_image_resize\n\n        \nPercent of Scaling from default image. 100 - same size\n\n        \nInteger\n\n    \n\n        \n\n        \ncucumber_report_subfolder\n\n        \nSubfolder on Jenkins (jenkins_url/{someNumbersFr EveryRun}/ artifacts/CucumberReport/ {cucumber_report_subfolder})\n\n        \ncucumber-reports\n\n    \n\n        \n\n        \ncucumber_user_js_in_report\n\n        \nEnabled parameter help to get more beautiful reports\n\n        \ntrue, false\n\n    \n\n        \n\n        \ntls_keysecure_location\n\n        \nPath to directory with tls secure keys\n\n        \n./tls/keysecure\n\n    \n\n        \n\n        \nhealth_check_class\n\n        \nClass to execute helth checks\n\n        \nCustom class\n\n    \n\n        \n\n        \nhealth_check_methods\n\n        \nComma-separate list of methods of health_check_class to execute preliminary\n\n        \ndoThis, doThat\n\n    \n\n\n\nMost of the properties may be read in the following way:\n\n\nConfiguration.get(Parameter.URL) // returns string value\nConfiguration.getBoolean(Parameter.AUTO_SCREENSHOT) // returns boolean value\nConfiguration.getInt(Parameter.SMALL_SCREEN_WIDTH) // returns integer value\nConfiguration.getDouble(Parameter.BROWSER_VERSION) // returns double value\n\n\n\n\nEnvironment specific configuration\n\n\nIn some cases it is required to support multiple environments for testing. Let's assume we have STAG and PROD environments which have different application URLs. In this case we need to specify the following properties in _config.properties:\n\n\nenv=PROD\nSTAG.url=http://stag-app-server.com\nPROD.url=http://prod-app-server.com\n\n\n\n\nAnd get env-specific argument in test the following way:\n\n\nConfiguration.getEnvArg(\nurl\n)\n\n\n\n\nAs a result you switch between environments just changing env argument in _config.properties file.\n\n\nZafira\n configuration\n\n\nzafira.properties\n is used for Zafira QA reporting integration, here you should specify some values for proper integration:\n\n    \n\n        \nAttribute\n\n        \nMeaning\n\n        \nExample\n\n    \n\n    \n\n        \nzafira_enabled\n\n        \nRoot switch\n\n        \ntrue/false\n\n    \n\n    \n\n        \nzafira_service_url\n\n        \nWebservice URL\n\n        \nhttp://localhost:8080/zafira-ws\n\n    \n\n    \n\n        \nzafira_project\n\n        \nProject name (created in Zafira)\n\n        \nempty or any created\n\n    \n\n    \n\n        \nzafira_rerun_failures\n\n        \nRerun only failures\n\n        \ntrue/false\n\n    \n\n    \n\n        \nzafira_report_emails\n\n        \nList of emails for report\n\n        \nuser1@qps.com,user2@qps.com\n\n    \n\n    \n\n        \nzafira_configurator\n\n        \nConfigurator class (use default)\n\n        \ncom.qaprosoft.carina.core.foundation.report.ZafiraConfigurator", 
            "title": "Configuration"
        }, 
        {
            "location": "/configuration/#configuration-files", 
            "text": "There are multiple properties files located in src/main/resources:   api.properties  - API test endpoints reference  config.properties  - global test configuration  database.properties  - database connection properties  email.properties  - emailable reports config  testdata.properties  - test user credentials    All properties may be retrieved in test using R class:  R.API.get( GetUserMethods )\nR.CONFIG.get( browser )\nR.DATABASE.get( db.url )\nR.EMAIL.get( title )\nR.TESTDATA.get( user.email )  Default config properties can be obtained by  Configuration.get(Parameter.EXTRA_CAPABILITIES)  All project configuration properties are located in  _config.properties  file. In the table below we are providing description for most of the parameters: \n     \n         Attribute \n         Meaning \n         Example \n     \n     \n         url \n         Base application URL \n         http://qaprosoft.com \n     \n     \n         browser \n         Browser for testing \n         chrome / firefox / safari / iexplore \n     \n     \n         selenium_host \n         Selenium server host \n         http://localhost:4444/wd/hub \n     \n     \n         app_version \n         Application version/build number for reporting \n         1.2.5 \n     \n     \n         locale \n         Locale for using L10N feature. Enabled when enable_l10n=true \n         en_GB,de_DE,fr_FR \n     \n     \n         language \n         Language for i18n defature. Enabled when enable_i18n=true \n         en_GB,de_DE,fr_FR \n     \n     \n         retry_interval \n         Timeout interval between calling HTML DOM for the element. Note:  in ms. For mobile automation specify number from 500-1500 range \n         Integer \n     \n     \n         auto_screenshot \n         Global switch for taking screenshots. When disabled only failures will be captured \n         Boolean \n     \n     \n         keep_all_screenshots \n         Keep screenshots artifacts even for passed tests. \n         \n     \n     \n         report_url \n         Direct HTTP link to Jenkins workspace report folder. Automatically specified by CI \n         http://localhost:8888/job /my_project/1/eTAF_Report \n     \n     \n         max_screen_history \n         Max number of reports in history \n         Integer \n     \n     \n         jira_url \n         JIRA base URL for direct links with bugs description \n         https://jira.carina.com/browse/ \n     \n     \n         email_list \n         Comma-separated list of emails for reports \n         u1@gmail.com,u2@gmail.com \n     \n     \n         sender_email \n         Email account for reports sending.  Note:  Gmail smtp settings are used by default. Update _email.properties to use your own SMTP server \n         carina.qareport@qaprosoft.com \n     \n     \n         sender_pswd \n         Email password for reports sending \n         pwd123 \n     \n     \n         env \n         Environment specific configuration. More about this  feature \n         STAG, PROD, DEMO \n     \n     \n         env_arg_resolver \n         This parametr is optional, if it isn't set default value will be used. In most cases  default value is enough \n         java class  \n     \n         \n         platform \n         Platform version for Selenium Grid \n         ANDROID,IOS,WINDOWS,MAC,LINUX \n     \n         \n         browser_version \n         The browser version, or the empty string if unknown for Selenium Grid \n         \"8.0\", \"52.1\" \n     \n         \n         driver_mode \n         Rule for defining WebDriver lifecycle. \n         method_mode / class_mode / suite_mode \n     \n     \n         driver_event_listeners \n         Comma-separated list of listeners. Listeners provide more logs from WebDriver and have to be instances of WebDriverEventListener \n         com.someCompane.core .EventListener \n     \n         \n         max_driver_count \n         Max number of drivers per thread \n         Integer \n     \n         \n         custom_capabilities \n         Name of propertie file with custom capabilities(key-value) \n         custom.properties \n     \n         \n         proxy_host \n         The hostname of the server \n         host.example.com \n     \n         \n         proxy_port \n         The port number \n         80 \n     \n         \n         proxy_protocols \n         Comma-separated list of internet protocols used to carry connection information from the source requesting the connection to the destination for which the connection was requested. \n         http, https, ftp, socks \n     \n         \n         browsermob_proxy \n         Boolean parameter which enable or disable set up of mobile proxy \n         true, false \n     \n         \n         browsermob_port \n         The port number for mobile browser (make sense only for local debugging) \n         Integer \n     \n         \n         proxy_set_to_system \n         Boolean parameter which enable or disable set up of proxy \n         true, false \n     \n         \n         failure_email_list \n         Comma-separated list of emails for failure reports \n         u1@mail.com,u2@mail.com \n     \n         \n         track_known_issues \n         Boolean parameter. If it is true and some Jira tickets assosiated with test in case of failure Jira info will be added to report \n         true,false \n     \n     \n         explicit_timeout \n         Timeout in seconds to wait for a certain condition to occur before proceeding further in the code \n         Integer \n     \n     \n         auto_download \n         Enabled parametr prevent download dialog and download file automatically. Feature currently avaliable for Chrome and FireFox \n         false, true \n     \n     \n         auto_download_apps \n         MIME types / Internet Media Types. Parameter is necessary only for configure auto downloading for FireFox \n         application/pdf, list of  values \n     \n     \n         project_report_directory \n         Path to folder where reports will be saved \n         ./reports/qa \n     \n     \n         big_screen_width \n         Sreenshots will be resized according this width if there own width is bigger \n         500, 1200, Integer \n     \n     \n         big_screen_height \n         Sreenshots will be resized according this height if there own height is bigger \n         500, 1200, Integer \n     \n         \n         small_screen_width \n         Thumbnails width \n         Integer \n     \n     \n         big_screen_height \n         Thumbnails height \n         Integer \n     \n     \n         big_screen_height \n         Thumbnails height \n         Integer \n     \n     \n         init_retry_count \n         Number of attempts to create driver.  Default value 0 means that it would be only 1 attempt \n         Integer \n     \n     \n         init_retry_interval \n         Interval is seconds between attempts to create driver \n         Integer \n     \n     \n         retry_count \n         Number of test-retrying in case of failure.  Default value 0 means that test would be performed only once \n         Integer \n     \n         \n         enable_l10n \n         Enable L10N feature \n         false, true \n     \n             \n         l10n_encoding \n         Charset for l10n feature \n         ISO-8859-5, ISO-8859-6, UTF-8 \n     \n     \n         enable_i18n \n         Enable i18n feature \n         false, true \n     \n         \n         thread_count \n         Default number of threads to use when running tests in parallel. \n         fInteger \n     \n         \n         data_provider_thread_count \n         Default number of threads to use for data providers when running tests in parallel. \n         Integer \n     \n         \n         core_log_level \n         Level for Carina logging \n         ALL, DEBUG, ERROR, WARN, FATAL, INFO, OFF, TRACE  \n     \n         \n         log_all_json \n         API response will be logged in JSON format \n         true, false \n     \n         \n         date_format \n         Date format for DateUtils.class \n         HH:mm:ss dd/MM/yyyy, HH:mm MM/dd/yyyy \n     \n         \n         time_format \n         Date format for DateUtils.class \n         HH:mm:ss.SSS, HH:mm a zzz \n     \n         \n         crypto_key_path \n         Path to file with crypto key \n         ./src/main/resources/crypto.key \n     \n         \n         suite_name \n         Suite name for report and TestRail. If this parameter is NULL will be get from TestNG xml (parameter suite name) or _email.properties (title) \n         Advanced Acceptance \n     \n     \n         jira_updater \n         Class contains logic to update Jira.  Note  Custom updater have to implement DefaultJiraUpdater, by default methods do nothing \n         Custom class \n     \n     \n         jira_url \n         Url to Jira \n         https://yourclass.atlassian.net \n     \n         \n         jira_user \n         Jira user email \n         admin@yourcompany.com \n     \n         \n         jira_password \n         Jira user password \n         admin123456 \n     \n         \n         jira_suite_id \n         Jira suit id (if you have one) \n         Integer \n     \n     \n         jira_project \n         Jira project id \n         Integer \n     \n         \n         jira_create_new_ticket \n         If feature is enabled after test failure new jira ticket will be created \n         true, false \n     \n     \n         video_recording \n         If feature is test will be recorded \n         true, false \n     \n     \n         testrail_url \n         Url to TestRail \n         https:/yourcompany.testrail.net \n     \n     \n         testrail_user \n         TestRail user email \n         admin@yourcompany.com \n     \n         \n         testrail_updater \n         Class contains logic to update TestRail.  Note  Custom updater have to implement EmptyTestRailUpdater, by default methods do nothing \n         Custom class \n     \n         \n         testrail_milestone \n         Milestone to set on TestRail for run \n         some-milestone \n     \n         \n         testrail_assignee \n         User asserneed for the suit \n         asignee_user@yuorcompany.com \n     \n         \n         s3_bucket_name \n         Bucket name on S3 Amazon from which you suppose to download artifacts \n         some bucket \n     \n         \n         access_key_id \n         Acces key id for Amamzon S3. More info  here \n         gkhcvdgvceUYF67897hbjsbdc \n     \n         \n         secret_key \n         Secret key for Amamzon S3. More info  here \n         gkhcvdgvceUYF67897hbjsbdc \n     \n         \n         s3_local_storage \n         Directory for downloading artefacts \n         ./s3 \n     \n         \n         s3_screenshot_bucket_name \n         Bucket name on S3 Amamzon for saving report screenshots \n         Screenshot bucket name \n     \n         \n         s3_save_screenshots \n         If enabled screenshots would be saved on S3 Amamzon \n         false, true \n     \n         \n         hockeyapp_token \n         Token for authentication in Hockey App \n         gkhcvdgvceUYF67897hbjsbdc \n     \n         \n         hockeyapp_local_storage \n         Directory for Hockey App artefacts \n         ./hockeyapp \n     \n         \n         add_new_localization \n         Should be set to 'true' if you want to create new localization files for required Locale.Otherwise there will be just localization checking \n         false, true \n     \n         \n         add_new_localization_encoding \n         Encoding for new lokalization \n         utf-16, utf-32 \n     \n         \n         add_new_localization_path \n         Path where created localization properties should be saved. If null - they will be added to artifactory folder in report \n         utf-16, utf-32 \n     \n         \n         add_new_localization_property_name \n         Path where created localization properties should be saved. If null - they will be added to artifactory folder in report \n         Basic template for property name. \n     \n         \n         cucumber_tests \n         If parametrs contains true Cucumber tests will be started \n         true, false \n     \n         \n         cucumber_tests_app_version \n         Version of app using in Cucumber tests \n         2.013 \n     \n         \n         cucumber_tests_name \n         Cucucmber tests name \n         cucumber tests \n     \n         \n         cucumber_tests_results_image_resize \n         Percent of Scaling from default image. 100 - same size \n         Integer \n     \n         \n         cucumber_report_subfolder \n         Subfolder on Jenkins (jenkins_url/{someNumbersFr EveryRun}/ artifacts/CucumberReport/ {cucumber_report_subfolder}) \n         cucumber-reports \n     \n         \n         cucumber_user_js_in_report \n         Enabled parameter help to get more beautiful reports \n         true, false \n     \n         \n         tls_keysecure_location \n         Path to directory with tls secure keys \n         ./tls/keysecure \n     \n         \n         health_check_class \n         Class to execute helth checks \n         Custom class \n     \n         \n         health_check_methods \n         Comma-separate list of methods of health_check_class to execute preliminary \n         doThis, doThat \n      \nMost of the properties may be read in the following way:  Configuration.get(Parameter.URL) // returns string value\nConfiguration.getBoolean(Parameter.AUTO_SCREENSHOT) // returns boolean value\nConfiguration.getInt(Parameter.SMALL_SCREEN_WIDTH) // returns integer value\nConfiguration.getDouble(Parameter.BROWSER_VERSION) // returns double value", 
            "title": "Configuration files"
        }, 
        {
            "location": "/configuration/#environment-specific-configuration", 
            "text": "In some cases it is required to support multiple environments for testing. Let's assume we have STAG and PROD environments which have different application URLs. In this case we need to specify the following properties in _config.properties:  env=PROD\nSTAG.url=http://stag-app-server.com\nPROD.url=http://prod-app-server.com  And get env-specific argument in test the following way:  Configuration.getEnvArg( url )  As a result you switch between environments just changing env argument in _config.properties file.", 
            "title": "Environment specific configuration"
        }, 
        {
            "location": "/configuration/#zafira-configuration", 
            "text": "zafira.properties  is used for Zafira QA reporting integration, here you should specify some values for proper integration: \n     \n         Attribute \n         Meaning \n         Example \n     \n     \n         zafira_enabled \n         Root switch \n         true/false \n     \n     \n         zafira_service_url \n         Webservice URL \n         http://localhost:8080/zafira-ws \n     \n     \n         zafira_project \n         Project name (created in Zafira) \n         empty or any created \n     \n     \n         zafira_rerun_failures \n         Rerun only failures \n         true/false \n     \n     \n         zafira_report_emails \n         List of emails for report \n         user1@qps.com,user2@qps.com \n     \n     \n         zafira_configurator \n         Configurator class (use default) \n         com.qaprosoft.carina.core.foundation.report.ZafiraConfigurator", 
            "title": "Zafira configuration"
        }, 
        {
            "location": "/execution/", 
            "text": "Selenium server\n\n\n\n\nBefore running any web test you have to start Selenium server locally or use remote Selenium server. You may download latest version of Selenium standalone server on \nofficial website\n along with browser binary for Chrome, Firefox, IE etc. For running test with Chrome browser you will need to download chromedriver and place along with selenium-standalone-server-X.jar and execute (make sure that you replace 'X' by current Selenium version):\n\n\njava -jar -Dwebdriver.chrome.driver=./chromedriver selenium-server-standalone-X.jar\n\n\n\n\nYou have another option for running \nSelenium in Docker\n, the easiest way to create docker-compose.yml:\n\n\n# To execute this docker-compose yml file use docker-compose -f \nfile_name\n up\n# Add the \n-d\n flag at the end for deattached execution\nversion: '2'\nservices:\n  firefox:\n    image: selenium/node-firefox:3.11.0-californium\n    volumes:\n      - /dev/shm:/dev/shm\n    depends_on:\n      - hub\n    environment:\n      HUB_HOST: hub\n\n  chrome:\n    image: selenium/node-chrome:3.11.0-californium\n    volumes:\n      - /dev/shm:/dev/shm\n    depends_on:\n      - hub\n    environment:\n      HUB_HOST: hub\n\n  hub:\n    image: selenium/hub:3.11.0-californium\n    ports:\n      - \n4444:4444\n\n\n\n\n\nNow you may start Selenium running the following command in terminal:\n\n\ndocker-compose up\n\n\n\n\nRunning tests\n\n\n\n\nThere are a several options to execute the test: you may run test suite from Eclipse IDE or initiate test execution from the console using Maven Surefire plugin built into Carina framework.\n\n\nTo run the test suite from Eclipse IDE, just select the required TestNG xml file: Right click \n Run As \n TestNG suite\n\n\n\n\nTo run the same test suite from the console, navigate to the test project root (where pom.xml is located) and execute the following command:\n\n\nmvn clean -Dsuite=api test", 
            "title": "Execution"
        }, 
        {
            "location": "/execution/#selenium-server", 
            "text": "Before running any web test you have to start Selenium server locally or use remote Selenium server. You may download latest version of Selenium standalone server on  official website  along with browser binary for Chrome, Firefox, IE etc. For running test with Chrome browser you will need to download chromedriver and place along with selenium-standalone-server-X.jar and execute (make sure that you replace 'X' by current Selenium version):  java -jar -Dwebdriver.chrome.driver=./chromedriver selenium-server-standalone-X.jar  You have another option for running  Selenium in Docker , the easiest way to create docker-compose.yml:  # To execute this docker-compose yml file use docker-compose -f  file_name  up\n# Add the  -d  flag at the end for deattached execution\nversion: '2'\nservices:\n  firefox:\n    image: selenium/node-firefox:3.11.0-californium\n    volumes:\n      - /dev/shm:/dev/shm\n    depends_on:\n      - hub\n    environment:\n      HUB_HOST: hub\n\n  chrome:\n    image: selenium/node-chrome:3.11.0-californium\n    volumes:\n      - /dev/shm:/dev/shm\n    depends_on:\n      - hub\n    environment:\n      HUB_HOST: hub\n\n  hub:\n    image: selenium/hub:3.11.0-californium\n    ports:\n      -  4444:4444   Now you may start Selenium running the following command in terminal:  docker-compose up", 
            "title": "Selenium server"
        }, 
        {
            "location": "/execution/#running-tests", 
            "text": "There are a several options to execute the test: you may run test suite from Eclipse IDE or initiate test execution from the console using Maven Surefire plugin built into Carina framework.  To run the test suite from Eclipse IDE, just select the required TestNG xml file: Right click   Run As   TestNG suite   To run the same test suite from the console, navigate to the test project root (where pom.xml is located) and execute the following command:  mvn clean -Dsuite=api test", 
            "title": "Running tests"
        }, 
        {
            "location": "/automation/web/", 
            "text": "Carina framework follows Selenium best practices for web tests automation. If you are familiar with Selenium WebDriver and hve already implemented few tests with Page Object pattern the following guide will be pretty much easy for understanding. We have choosen \nGSM Arena\n public web site for demontration pursposes, all the the test source code is locted in \ncarina-demo\n Github repo.\n\n\nImplementation of Page Objects\n\n\nWhen you are writing functional tests using Selenium a major part of your code will consist of interactions with the web interface you are testing through the WebDriver API. After fetching elements you will verify some state of the element through various assertions and move on to fetching the next element. You may find WebElements directry in your tests:\n\n\nList\nWebElement\n zipCodes = driver.findElements(By.id(\nzipCodes\n));\nfor (WebElement zipCode : zipCodes) {\n    if (zipCode.getText().equals(\n12345\n)){\n        zipCode.click();\n        break;\n    }\n}\nWebElement city = driver.findElement(By.id(\ncity\n));\nassertEquals(\nMyCityName\n, city.getText());\n\n\n\n\nSo some of the typical problems for this type of Selenium test are:\n\n\n\n\nTest cases are difficult to read\n\n\nChanges in the UI breaks multiple tests often in several places\n\n\nDuplication of selectors both inside and across tests - no reuse\n\n\n\n\nSo instead of having each test fetch elements directly and being fragile towards UI changes, the Page Object Pattern introduces what is basically a decoupling layer. \n\n\nYou create an object that represents the UI you want to test, which could be a whole page or a significant part of it. The responsibility of this object is to wrap HTML elements and encapsulate interactions with the UI, meaning that this is where all calls to WebDriver will go. This is where most WebElements are. And this is the only place you need to modify when the UI changes.\n\n\n\n\nIn general Page Object contains locators of the elements located on the page and some business logic that may be reused by different tests:\n\n\npublic class ModelInfoPage extends AbstractPage {\n    @FindBy(css = \n.help-display strong\n)\n    private ExtendedWebElement displayInfoLabel;\n\n    @FindBy(css = \n.help-camera strong\n)\n    private ExtendedWebElement cameraInfoLabel;\n\n    @FindBy(css = \n.help-expansion strong\n)\n    private ExtendedWebElement displayRamLabel;\n\n    @FindBy(css = \n.help-battery strong\n)\n    private ExtendedWebElement batteryInfoLabel;\n\n    public ModelInfoPage(WebDriver driver) {\n        super(driver);\n    }\n\n    public String readDisplay() {\n        assertElementPresent(displayInfoLabel);\n        return displayInfoLabel.getText();\n    }\n\n    public String readCamera() {\n        assertElementPresent(cameraInfoLabel);\n        return cameraInfoLabel.getText();\n    }\n\n    public String readRam() {\n        assertElementPresent(displayRamLabel);\n        return displayRamLabel.getText();\n    }\n\n    public String readBattery() {\n        assertElementPresent(displayInfoLabel);\n        return batteryInfoLabel.getText();\n    }\n}\n\n\n\n\n\nImportant:\n\n\n\n\nPage should extend \ncom.qaprosoft.carina.core.gui.AbstractPage\n\n\nUse \ncom.qaprosoft.carina.core.foundation.webdriver.decorator.ExtendedWebElement\n instead of Selenium WebElement\n\n\nLocate Page Object classes in src/main/java\n\n\n\n\nImplementation of UI Components\n\n\nIn some cases it is usefull to implement UI Objects that may be reused between multiple Page Objects, for instance top menu or footer may be shared between multiple pages:\n\n\npublic class FooterMenu extends AbstractUIObject {\n    @FindBy(linkText = \nHome\n)\n    private ExtendedWebElement homeLink;\n\n    @FindBy(linkText = \nCompare\n)\n    private ExtendedWebElement compareLink;\n\n    public FooterMenu(WebDriver driver, SearchContext searchContext) {\n        super(driver, searchContext);\n    }\n\n    public HomePage openHomePage() {\n        homeLink.click();\n        return new HomePage(driver);\n    }\n\n    public CompareModelsPage openComparePage() {\n        compareLink.click();\n        return new CompareModelsPage(driver);\n    }\n}\n\n\n\n\nAnd then you can use that in Page Object:\n\n\npublic class HomePage extends AbstractPage {\n    @FindBy(id = \nfootmenu\n)\n    private FooterMenu footerMenu;\n\n    @FindBy(xpath = \n//div[contains(@class, 'brandmenu-v2')]//a\n)\n    private List\nExtendedWebElement\n brandLinks;\n\n    public HomePage(WebDriver driver) {\n        super(driver);\n    }\n\n    public FooterMenu getFooterMenu() {\n        return footerMenu;\n    }\n\n    public BrandModelsPage selectBrand(String brand) {\n        LOGGER.info(\nselecting '\n + brand + \n' brand...\n);\n        for (ExtendedWebElement brandLink : brandLinks) {\n            String currentBrand = brandLink.getText();\n            LOGGER.info(\ncurrentBrand: \n + currentBrand);\n            if (brand.equalsIgnoreCase(currentBrand)) {\n                brandLink.click();\n                return new BrandModelsPage(driver);\n            }\n        }\n        throw new RuntimeException(\nUnable to open brand: \n + brand);\n    }\n}\n\n\n\n\nImportant:\n\n\n\n\nUI Object should extend \ncom.qaprosoft.carina.core.gui.AbstractUIObject\n\n\nYou should call super constructor \nsuper(driver, searchContext)\n where searchContext is instance of \norg.openqa.selenium.SearchContext\n\n\nLocate UI Object classes in src/main/java source folder\n\n\n\n\nImplementation of tests\n\n\nCarina framework uses TestNG for test organization. In general test represents manipulation with Page Objects and additional validations of UI events. Here is sample test implementation:\n\n\npublic class WebSampleTest extends AbstractTest {\n    @Test(description = \nJIRA#AUTO-0009\n)\n    @MethodOwner(owner = \nqpsdemo\n)\n    public void testCompareModels() {\n        // Open GSM Arena home page and verify page is opened\n        HomePage homePage = new HomePage(getDriver());\n        homePage.open();\n        Assert.assertTrue(homePage.isPageOpened(), \nHome page is not opened\n);\n        // Open model compare page\n        FooterMenu footerMenu = homePage.getFooterMenu();\n        Assert.assertTrue(footerMenu.isUIObjectPresent(2), \nFooter menu wasn't found!\n);\n        CompareModelsPage comparePage = footerMenu.openComparePage();\n        // Compare 3 models\n        List\nModelSpecs\n specs = comparePage.compareModels(\nSamsung Galaxy J3\n, \nSamsung Galaxy J5\n, \nSamsung Galaxy J7 Pro\n);\n        // Verify model announced dates\n        Assert.assertEquals(specs.get(0).readSpec(SpecType.ANNOUNCED), \n2015, November\n);\n        Assert.assertEquals(specs.get(1).readSpec(SpecType.ANNOUNCED), \n2016, September\n);\n        Assert.assertEquals(specs.get(2).readSpec(SpecType.ANNOUNCED), \n2017, June\n);\n    }\n}\n\n\n\n\n\nIt is good practice to implement all elements search logic of Page Object/UI Object side and perform assertions and validations in test, do not mix that logic.\n\n\nImportant:\n\n\n\n\nTest class should extend \ncom.qaprosoft.carina.core.foundation.AbstractTest\n\n\nTest method should start with \norg.testng.annotations.Test\n annotation\n\n\nUse \ngetDriver()\n method to get driver instance in test\n\n\nLocate tests in src/test/java source folder\n\n\n\n\nTest configuration\n\n\nThere are few critical properties in config.properties file that are required for web tests exexcution:\n\n\n\n\nurl=http://www.gsmarena.com\n\n\nplatform=*\n\n\nbrowser=chrome\n\n\nbrowser_version=*\n\n\n\n\nImplemented tests cases should be placed in TestNG xml file according to test group the test belongs to. More details about TestNG configuration you may find in \nofficial documentation\n.\n\n\n!DOCTYPE suite SYSTEM \nhttp://testng.org/testng-1.0.dtd\n\n\n\nsuite verbose=\n1\n name=\nCarina Demo Tests - Web tests\n skipfailedinvocationcounts=\nfalse\n junit=\nfalse\n parallel=\ntests\n data-provider-thread-count=\n50\n annotations=\nJDK\n\n\n    \nlisteners\n\n        \nlistener class-name=\ncom.qaprosoft.carina.core.foundation.retry.AnnotationTransformer\n/\n\n        \nlistener class-name=\ncom.qaprosoft.zafira.listener.ZafiraListener\n/\n\n    \n/listeners\n\n\n    \ntest name=\nGSM arena web tests\n\n        \nclasses\n\n            \nclass name=\ncom.qaprosoft.carina.demo.WebSampleTest\n /\n\n        \n/classes\n\n    \n/test\n\n\n\n/suite", 
            "title": "Web automation"
        }, 
        {
            "location": "/automation/web/#implementation-of-page-objects", 
            "text": "When you are writing functional tests using Selenium a major part of your code will consist of interactions with the web interface you are testing through the WebDriver API. After fetching elements you will verify some state of the element through various assertions and move on to fetching the next element. You may find WebElements directry in your tests:  List WebElement  zipCodes = driver.findElements(By.id( zipCodes ));\nfor (WebElement zipCode : zipCodes) {\n    if (zipCode.getText().equals( 12345 )){\n        zipCode.click();\n        break;\n    }\n}\nWebElement city = driver.findElement(By.id( city ));\nassertEquals( MyCityName , city.getText());  So some of the typical problems for this type of Selenium test are:   Test cases are difficult to read  Changes in the UI breaks multiple tests often in several places  Duplication of selectors both inside and across tests - no reuse   So instead of having each test fetch elements directly and being fragile towards UI changes, the Page Object Pattern introduces what is basically a decoupling layer.   You create an object that represents the UI you want to test, which could be a whole page or a significant part of it. The responsibility of this object is to wrap HTML elements and encapsulate interactions with the UI, meaning that this is where all calls to WebDriver will go. This is where most WebElements are. And this is the only place you need to modify when the UI changes.   In general Page Object contains locators of the elements located on the page and some business logic that may be reused by different tests:  public class ModelInfoPage extends AbstractPage {\n    @FindBy(css =  .help-display strong )\n    private ExtendedWebElement displayInfoLabel;\n\n    @FindBy(css =  .help-camera strong )\n    private ExtendedWebElement cameraInfoLabel;\n\n    @FindBy(css =  .help-expansion strong )\n    private ExtendedWebElement displayRamLabel;\n\n    @FindBy(css =  .help-battery strong )\n    private ExtendedWebElement batteryInfoLabel;\n\n    public ModelInfoPage(WebDriver driver) {\n        super(driver);\n    }\n\n    public String readDisplay() {\n        assertElementPresent(displayInfoLabel);\n        return displayInfoLabel.getText();\n    }\n\n    public String readCamera() {\n        assertElementPresent(cameraInfoLabel);\n        return cameraInfoLabel.getText();\n    }\n\n    public String readRam() {\n        assertElementPresent(displayRamLabel);\n        return displayRamLabel.getText();\n    }\n\n    public String readBattery() {\n        assertElementPresent(displayInfoLabel);\n        return batteryInfoLabel.getText();\n    }\n}  Important:   Page should extend  com.qaprosoft.carina.core.gui.AbstractPage  Use  com.qaprosoft.carina.core.foundation.webdriver.decorator.ExtendedWebElement  instead of Selenium WebElement  Locate Page Object classes in src/main/java", 
            "title": "Implementation of Page Objects"
        }, 
        {
            "location": "/automation/web/#implementation-of-ui-components", 
            "text": "In some cases it is usefull to implement UI Objects that may be reused between multiple Page Objects, for instance top menu or footer may be shared between multiple pages:  public class FooterMenu extends AbstractUIObject {\n    @FindBy(linkText =  Home )\n    private ExtendedWebElement homeLink;\n\n    @FindBy(linkText =  Compare )\n    private ExtendedWebElement compareLink;\n\n    public FooterMenu(WebDriver driver, SearchContext searchContext) {\n        super(driver, searchContext);\n    }\n\n    public HomePage openHomePage() {\n        homeLink.click();\n        return new HomePage(driver);\n    }\n\n    public CompareModelsPage openComparePage() {\n        compareLink.click();\n        return new CompareModelsPage(driver);\n    }\n}  And then you can use that in Page Object:  public class HomePage extends AbstractPage {\n    @FindBy(id =  footmenu )\n    private FooterMenu footerMenu;\n\n    @FindBy(xpath =  //div[contains(@class, 'brandmenu-v2')]//a )\n    private List ExtendedWebElement  brandLinks;\n\n    public HomePage(WebDriver driver) {\n        super(driver);\n    }\n\n    public FooterMenu getFooterMenu() {\n        return footerMenu;\n    }\n\n    public BrandModelsPage selectBrand(String brand) {\n        LOGGER.info( selecting '  + brand +  ' brand... );\n        for (ExtendedWebElement brandLink : brandLinks) {\n            String currentBrand = brandLink.getText();\n            LOGGER.info( currentBrand:   + currentBrand);\n            if (brand.equalsIgnoreCase(currentBrand)) {\n                brandLink.click();\n                return new BrandModelsPage(driver);\n            }\n        }\n        throw new RuntimeException( Unable to open brand:   + brand);\n    }\n}  Important:   UI Object should extend  com.qaprosoft.carina.core.gui.AbstractUIObject  You should call super constructor  super(driver, searchContext)  where searchContext is instance of  org.openqa.selenium.SearchContext  Locate UI Object classes in src/main/java source folder", 
            "title": "Implementation of UI Components"
        }, 
        {
            "location": "/automation/web/#implementation-of-tests", 
            "text": "Carina framework uses TestNG for test organization. In general test represents manipulation with Page Objects and additional validations of UI events. Here is sample test implementation:  public class WebSampleTest extends AbstractTest {\n    @Test(description =  JIRA#AUTO-0009 )\n    @MethodOwner(owner =  qpsdemo )\n    public void testCompareModels() {\n        // Open GSM Arena home page and verify page is opened\n        HomePage homePage = new HomePage(getDriver());\n        homePage.open();\n        Assert.assertTrue(homePage.isPageOpened(),  Home page is not opened );\n        // Open model compare page\n        FooterMenu footerMenu = homePage.getFooterMenu();\n        Assert.assertTrue(footerMenu.isUIObjectPresent(2),  Footer menu wasn't found! );\n        CompareModelsPage comparePage = footerMenu.openComparePage();\n        // Compare 3 models\n        List ModelSpecs  specs = comparePage.compareModels( Samsung Galaxy J3 ,  Samsung Galaxy J5 ,  Samsung Galaxy J7 Pro );\n        // Verify model announced dates\n        Assert.assertEquals(specs.get(0).readSpec(SpecType.ANNOUNCED),  2015, November );\n        Assert.assertEquals(specs.get(1).readSpec(SpecType.ANNOUNCED),  2016, September );\n        Assert.assertEquals(specs.get(2).readSpec(SpecType.ANNOUNCED),  2017, June );\n    }\n}  It is good practice to implement all elements search logic of Page Object/UI Object side and perform assertions and validations in test, do not mix that logic.  Important:   Test class should extend  com.qaprosoft.carina.core.foundation.AbstractTest  Test method should start with  org.testng.annotations.Test  annotation  Use  getDriver()  method to get driver instance in test  Locate tests in src/test/java source folder", 
            "title": "Implementation of tests"
        }, 
        {
            "location": "/automation/web/#test-configuration", 
            "text": "There are few critical properties in config.properties file that are required for web tests exexcution:   url=http://www.gsmarena.com  platform=*  browser=chrome  browser_version=*   Implemented tests cases should be placed in TestNG xml file according to test group the test belongs to. More details about TestNG configuration you may find in  official documentation .  !DOCTYPE suite SYSTEM  http://testng.org/testng-1.0.dtd  suite verbose= 1  name= Carina Demo Tests - Web tests  skipfailedinvocationcounts= false  junit= false  parallel= tests  data-provider-thread-count= 50  annotations= JDK \n\n     listeners \n         listener class-name= com.qaprosoft.carina.core.foundation.retry.AnnotationTransformer / \n         listener class-name= com.qaprosoft.zafira.listener.ZafiraListener / \n     /listeners \n\n     test name= GSM arena web tests \n         classes \n             class name= com.qaprosoft.carina.demo.WebSampleTest  / \n         /classes \n     /test  /suite", 
            "title": "Test configuration"
        }, 
        {
            "location": "/automation/mobile/", 
            "text": "We could provide any Appium capabilty in \nconfig.properties\n file using capabilities.name=value format. In the table below we are providing description for the most popular mobile capabilities:\n\n\n\n    \n\n        \nAttribute\n\n        \nMeaning\n\n                \nDefault value\n\n        \nExample\n\n    \n\n        \n\n        \ncapabilities.deviceName\n\n        \nDevice name for report\n\n                \nn/a\n\n        \nSumsung_Galaxy_J5\n\n    \n\n        \n\n        \ncapabilities.deviceType\n\n        \nThe only custom carina capability to detmine type of device\n\n                \nn/a\n\n        \nphone/tablet/tv...\n\n    \n\n        \n\n        \ncapabilities.platformName\n\n        \nName of mobile platform\n\n                \nn/a\n\n        \nAndroid/iOS/AndroidTV/tvOS\n\n    \n\n        \n\n        \ncapabilities.platformVersion\n\n        \nVersion of mobile platform\n\n                \nn/a\n\n        \n6.0.1\n\n    \n\n        \n\n        \ncapabilities.automationName\n\n        \nName of programm using for automation (for Android 7+ use uiautomator2 instead of Appium)\n\n                \nn/a\n\n        \nAppium/uiautomator2/XCUITest\n\n    \n\n        \n\n        \ncapabilities.app\n\n        \nPath to application (apk/app/ipa) which is tested, Can be provided as a pattern from AWS S3 storage with automatic downloading\n\n                \nn/a\n\n        \nD:/application.apk, s3://qaprosoft.com/android/myapk.*-release.apk\n\n    \n\n        \n\n        \ncapabilities.newCommandTimeout\n\n        \nNew implicit timeout in seconds to wait for element for mobile automation\n\n                \nn/a\n\n        \n180\n\n    \n\n        \n\n        \ncapabilities.udid\n\n        \nUnique Device ID\n\n                \nn/a\n\n        \n759b543c\n\n    \n\n        \n\n        \ncapabilities.device\n\n        \nSpecifies a particular mobile device for the test environment on Browserstack\n\n                \nn/a\n\n        \nGalaxy Note 8, iPhone X\n\n    \n\n     \n\n        \ncapabilities.os_version\n\n        \nVersion of OS for Browserstack\n\n                \nn/a\n\n        \nios, android\n\n    \n\n    \n\n        \ncapabilities.remoteURL\n\n        \nRemote URL for using Selenium Grid\n\n                \nn/a\n\n        \n 'http://localhost:4444/wd/hub'\n\n    \n\n        \n\n        \ncapabilities.appActivity\n\n        \nActivity name for the Android activity you want to launch from your package.\n\n                \nn/a\n\n        \ncom.amazon.mShop.HomeActivity\n\n    \n\n        \n\n        \ncapabilities.appPackage\n\n        \nJava package of the Android app you want to run\n\n                \nn/a\n\n        \nin.amazon.mShop.android.shopping\n\n    \n\n    \n\n        \ncapabilities.noSign\n\n        \nSkip checking and signing of app with debug keys, will work only with UiAutomator and not with selendroid, default false\n\n                \nn/a\n\n        \ntrue, false\n\n    \n\n    \n\n        \ncapabilities.autoGrantPermissions\n\n        \nHave Appium automatically determine which permissions your app requires and grant them to the app on install. Defaults to false\n\n                \nn/a\n\n        \ntrue, false\n\n    \n\n    \n\n        \ncapabilities.skipUnlock\n\n        \nSkip the device unlock process. Defaults to false\n\n                \nn/a\n\n        \ntrue, false\n\n    \n\n\n\n\n\nFor Android:\n\n\n#=============== Android Mobile ======================#\ncapabilities.deviceName=Samsung_Galaxy_J5\ncapabilities.app=s3://qaprosoft.com/android/myapk.*-release.apk\ncapabilities.skipUnlock=true\ncapabilities.noSign=true\ncapabilities.automationName=uiautomator2\ncapabilities.newCommandTimeout=180\ncapabilities.platformName=ANDROID\ncapabilities.autoGrantPermissions=true\n#=====================================================#\n\n\n\n\nFor iOS:\n\n\n#=================== iOS Mobile ======================#\ncapabilities.autoAcceptAlerts=true\ncapabilities.app=/opt/apk/my-apk.app\ncapabilities.automationName=XCUITest\ncapabilities.newCommandTimeout=180\ncapabilities.platformName=IOS\n#=====================================================#", 
            "title": "Mobile automation"
        }, 
        {
            "location": "/automation/mobile/#for-android", 
            "text": "#=============== Android Mobile ======================#\ncapabilities.deviceName=Samsung_Galaxy_J5\ncapabilities.app=s3://qaprosoft.com/android/myapk.*-release.apk\ncapabilities.skipUnlock=true\ncapabilities.noSign=true\ncapabilities.automationName=uiautomator2\ncapabilities.newCommandTimeout=180\ncapabilities.platformName=ANDROID\ncapabilities.autoGrantPermissions=true\n#=====================================================#", 
            "title": "For Android:"
        }, 
        {
            "location": "/automation/mobile/#for-ios", 
            "text": "#=================== iOS Mobile ======================#\ncapabilities.autoAcceptAlerts=true\ncapabilities.app=/opt/apk/my-apk.app\ncapabilities.automationName=XCUITest\ncapabilities.newCommandTimeout=180\ncapabilities.platformName=IOS\n#=====================================================#", 
            "title": "For iOS:"
        }, 
        {
            "location": "/automation/api/", 
            "text": "Introduction\n\n\nRest API testing is a vital part of integration testing process, it may be used separately or in complex with web, mobile or DB testing. General process may be described by the following steps:\n\n\n\n\nCompile HTTP request with required meta data\n\n\nSend prepared data to required server endpoint\n\n\nValidate HTTP status and response data\n\n\nExtract some response data for the next requests\n\n\nBuild call to next (or same) endpoint using (or not using) data from previous response\n\n\n\n\nSchema below demonstrates the sequence:\n\n\n\nFrom that perspective we decided to use the following instruments:\n\n\n\n\nRest-assured - \"Testing and validation of REST services in Java is harder than in dynamic languages such as Ruby and Groovy. REST\nAssured brings the simplicity of using these languages into the Java domain.\"\n\n\nFreemarker - \"Apache FreeMarker is a template engine: a Java library to generate text output (HTML web pages, e-mails, configuration\nfiles, source code, etc.) based on templates and changing data.\"\n\n\nJsonPath - library for extracting data from JSON body\n\n\nJsonAssert - library for comparing of actual JSON body with expected one\n\n\nJson-schema-validator - library for validating of JSON body for matching to json schema\n\n\n\n\nExample of test implementation\n\n\nLet's create automated test for next call: POST https://jsonplaceholder.typicode.com/users request with requst body\n\n\n[\n    {\n        \nid\n: 1,\n        \nname\n: \nSOME_NAME\n,\n        \nusername\n: \nSOME_USERNAME\n,\n        \nemail\n: \nSincere@april.biz\n,\n        \naddress\n: {\n            \nstreet\n: \nKulas Light\n,\n            \nsuite\n: \nApt. 556\n,\n            \ncity\n: \nGwenborough\n,\n            \nzipcode\n: \n92998-3874\n,\n            \ngeo\n: {\n                \nlat\n: \n-37.3159\n,\n                \nlng\n: \n81.1496\n\n            }\n        },\n        \nphone\n: \n1-770-736-8031 x56442\n,\n        \nwebsite\n: \nhildegard.org\n,\n        \ncompany\n: {\n            \nname\n: \nSOME_COMPANY_NAME\n,\n            \ncatchPhrase\n: \nMulti-layered client-server neural-net\n,\n            \nbs\n: \nharness real-time e-markets\n\n        }\n    }\n]\n\n\n\n\nand response body same as request body\n\n\nDefinition of request and response templates\n\n\nIf we are going to send POST request we have to create request template with some placeholders that may be replaced by different arguments for different test flows. The best place to store these resources is src/test/resources/api package, try to keep REST hierarchy in package structure for better maintenance and visibility:\n\n\nRequest (rq.json) and response (rs.json) templates have some placeholders that will be populated from the tests later on:\n\n\n\n\nWhile user.properties contains some default value which may be replaced later:\n\n\n\nREST service call domain object\n\n\nNow we are ready to create REST service domain object which will be used to interact with web service and perform additional response validations. Our domain object is located in /carina-demo/src/main/java/com/qaprosoft/carina/demo/api, make sure that it extends AbstractApiMethodV2 and triggers base class constructor for initialization. In general case you will specify path to request and response templates along with default properties files (all of them were created in previous step). Also we replace URL placeholder to set appropriate environment.\n\n\npackage com.qaprosoft.carina.demo.api;\n\nimport com.qaprosoft.carina.core.foundation.api.AbstractApiMethodV2;\nimport com.qaprosoft.carina.core.foundation.utils.Configuration;\n\npublic class PostUserMethod extends AbstractApiMethodV2 {\n    public PostUserMethod() {\n        super(\napi/users/_post/rq.json\n, \napi/users/_post/rs.json\n, \napi/users/user.properties\n);\n        replaceUrlPlaceholder(\nbase_url\n, Configuration.getEnvArg(\napi_url\n));\n    }\n}\n\n\n\n\nHTTP method and path\n\n\nThe last step before test implementation itself is association of domain object class and required HTTP method and path.\nIt should be defined in /carina-demo/src/main/resources/_api.properties file, key should be equal to domain class name, value has the following pattern {http_method}:{http_path}. HTTP path may contain placeholders, HTTP method should be one of the following variants: GET, POST, PUT, UPDATE, DELETE.\n\n\n#=====================================================#\n#=================== API methods  ====================#\n#=====================================================#\nGetUserMethods=GET:${base_url}/users\nPostUserMethod=POST:${base_url}/users\nDeleteUserMethod=DELETE:${base_url}/users/1\nPutPostsMethod=PUT:${base_url}/posts/1\nPatchPostsMethod=PATCH:${base_url}/posts/1\n\n\n\n\nAPI test\n\n\nAPI test is general TestNG test, class should extend APITest, in our case test extend it over AbstractTest that encapsulates some test data and login method. Test is located in /carina-demo/src/test/java/com/qaprosoft/carina/demo.\n\n\npackage com.qaprosoft.carina.demo;\n\nimport org.skyscreamer.jsonassert.JSONCompareMode;\nimport org.testng.annotations.Test;\n\nimport com.qaprosoft.apitools.validation.JsonCompareKeywords;\nimport com.qaprosoft.carina.core.foundation.AbstractTest;\nimport com.qaprosoft.carina.core.foundation.api.http.HttpResponseStatusType;\nimport com.qaprosoft.carina.core.foundation.utils.ownership.MethodOwner;\nimport com.qaprosoft.carina.demo.api.DeleteUserMethod;\nimport com.qaprosoft.carina.demo.api.GetUserMethods;\nimport com.qaprosoft.carina.demo.api.PostUserMethod;\n\npublic class APISampleTest extends AbstractTest {\n    @Test(description = \nJIRA#DEMO-0001\n)\n    @MethodOwner(owner = \nqpsdemo\n)\n    public void testCreateUser() throws Exception {\n        PostUserMethod api = new PostUserMethod();\n        api.expectResponseStatus(HttpResponseStatusType.CREATED_201);\n        api.callAPI();\n        api.validateResponse();\n    }\n\n    @Test(description = \nJIRA#DEMO-0002\n)\n    @MethodOwner(owner = \nqpsdemo\n)\n    public void testCreateUserMissingSomeFields() throws Exception {\n        PostUserMethod api = new PostUserMethod();\n        api.getProperties().remove(\nname\n);\n        api.getProperties().remove(\nusername\n);\n        api.expectResponseStatus(HttpResponseStatusType.CREATED_201);\n        api.callAPI();\n        api.validateResponse();\n    }\n\n    @Test(description = \nJIRA#DEMO-0003\n)\n    @MethodOwner(owner = \nqpsdemo\n)\n    public void testGetUsers() {\n        GetUserMethods getUsersMethods = new GetUserMethods();\n        getUsersMethods.expectResponseStatus(HttpResponseStatusType.OK_200);\n        getUsersMethods.callAPI();\n        getUsersMethods.validateResponse(JSONCompareMode.STRICT, JsonCompareKeywords.ARRAY_CONTAINS.getKey());\n        getUsersMethods.validateResponseAgainstJSONSchema(\napi/users/_get/rs.schema\n);\n    }\n}\n\n\n\n\nTest steps once again\n\n\n\n\nCreate REST call object\n\n\nSpecify properties for request/response placeholder\n\n\nAdd headers if required\n\n\nSpecify expected HTTP status\n\n\nCall API\n\n\nValidate response by template or parse some data by JSON path\n\n\nMake further calls using data from previos call if needed\n\n\n\n\nUseful features\n\n\nFramework contains list of useful feature for requests building and for responses validation. That makes easier support of such tests and and at the same time minimizes amount of test data.\n\n\nWildcards\n\n\nIn some cases you may need to generate data in request to make request data unique. The best way of doing this is to use wildcards for data generation:\n\n\n{\n    \nusername\n: \ngenerate_word(10)\n,          // Will generate random alphanumeric string with 10 characters\n    \nzip\n: \ngenerate_number(6)\n,              // Will generate random number with 6 digits\n    \nbirthday\n: \ngenerate_date(yyyy-MM-dd;0)\n // Will generate current date (first arg is date format, second is delta in days from now)\n}\n\n\n\n\nOther option is to specify placeholder in request template and then pass some generated value directly from the test method.\n\n\nAnother useful way of wildcards usage is response validation. In some cases you may need to skip some values or validate by regex:\n\n\n{\n    \nid\n: \nskip\n,                                    // Will skip actual value validation and just verify id key presence\n    \nsignup_date\n: \nregex:\\\\d{4}-\\\\d{2}-\\\\d{2}\n,     // Will validate date value by specified regex\n}\n\n\n\n\nValidation against JSON schema\n\n\nWhen you need to validate response structure regardless of the actual values you may use validation by JSON schema. In this case you need actual response from service, let's say we have the following:\n\n\n{\n    \nemail\n: \ntest@domain.com\n,\n    \nfirstName\n: \nSOME FIRST NAME\n,\n    \nid\n: 11111\n}\n\n\n\n\nNow we need to generate schema (you may use any generator you like for example https://jsonschema.net/).\nIn tool like this you need to provide original JSON from response then choose some schema options (allow additional properties in objects, mark current object properties as required, hard-code some expected values, ect) and then generate the schema. Copy-paste generated schema into test resources and you're ready to use it in the test.\n\n\nMake sure that you change all flags required to true, after that create new file in resources and place into appropriate endpoint package:\n\n\n{\n    \ntype\n:\nobject\n,\n    \n$schema\n: \nhttp://json-schema.org/draft-03/schema\n,\n    \nid\n: \nhttp://jsonschema.net\n,\n    \nrequired\n:true,\n    \nproperties\n:{\n        \nemail\n: {\n            \ntype\n:\nstring\n,\n            \nid\n: \nhttp://jsonschema.net/email\n,\n            \nrequired\n:true\n        },\n        \nfirstName\n: {\n            \ntype\n:\nstring\n,\n            \nid\n: \nhttp://jsonschema.net/firstName\n,\n            \nrequired\n:true\n        },\n        \nid\n: {\n            \ntype\n:\nnumber\n,\n            \nid\n: \nhttp://jsonschema.net/id\n,\n            \nrequired\n:true\n        }\n    }\n}\n\n\n\n\nAnd finally we call JSON validation from Java test as following:\n\n\n@Test\npublic void testCheckJSONSchema()\n{\n    PostUserLoginMethod api = new PostUserLoginMethod();\n    api.expectResponseStatus(HttpResponseStatusType.OK_200);\n    api.callAPI();\n    api.validateResponseAgainstJSONSchema(\napi/testdata/users/login/_post/rs.schema\n);\n}\n\n\n\n\nBuilding of requests with array\n\n\nThere are couple options for building request with array of items provided by framework:\n1. First one use hardcoded placholders for changeable variables.\n\n\n{\n   \nname\n: \n${name}\n,\n   \ndescription\n: \n${description}\n,\n   \nlabel\n: \n${label}\n,\n   \ntaskTypes\n: [\n      {\n         \nname\n: \n${task_name_1}\n,\n         \ndescription\n: \n${task_description_1}\n\n      }\n      \n#if task_name_2?exists || task_description_2?exists\n,\n      {\n         \nname\n: \n${task_name_2}\n,\n         \ndescription\n: \n${task_description_2}\n\n      }\n      \n/#if\n\n      \n#if task_name_3?exists || task_description_3?exists\n,\n      {\n         \nname\n: \n${task_name_3}\n,\n         \ndescription\n: \n${task_description_3}\n\n      }\n      \n/#if\n\n   ]\n}\n\n\n\n\nAs you see this structure is pretty flexible. If you need 2 taskTypes items then you need to declare at least task_name_2 or task_description_2 property. If you need 3 items in addition to that you need to declare task_name_3 or task_description_3 property. Otherwise array will contain only 1 item.\nFor instance you need to build json which contains taskTypes array. Then template with placeholders will be following:\nIt's easy to extend such structure. You just need to add items with similar placeholders increasing their index.\n\n\n\n\nOther approach is based on using Freemarker loop. Here is the template example for same JSON:\n\n\n\n\n#if task_name_1?exists\n\n    \n#assign task_names = [task_name_1]\n\n    \n#assign task_descriptions = [task_description_1]\n\n\n/#if\n   \n\n\n#if task_name_2?exists\n\n    \n#assign task_names = [task_name_1, task_name_2]\n\n    \n#assign task_descriptions = [task_description_1, task_description_2]\n\n\n/#if\n\n\n\n#if task_name_3?exists\n\n    \n#assign task_names = [task_name_1, task_name_2, task_name_3]\n\n    \n#assign task_descriptions = [task_description_1, task_description_2, task_description_3]\n\n\n/#if\n\n\n{\n   \nname\n: \n${name}\n,\n   \ndescription\n: \n${description}\n,\n   \nlabel\n: \n${label}\n,\n   \ntaskTypes\n: [\n      \n#list 0..task_names?size-1 as i\n\n      {\n         \nname\n: \n${task_names[i]}\n,\n         \ndescription\n: \n${task_descriptions[i]}\n\n      }\n      \n#if (i + 1) \n task_names?size\n,\n/#if\n\n      \n/#list\n\n   ]\n}\n\n\n\n\nThis approach is useful when structure of array item is pretty complex. So it makes sense to specify item attributes only once doing it inside #list operation.\nThis approach also allows to choose amount of array items dynamically.\nBut note that you should specify all properties for each item so this view can be not used for negative tests when you need to miss some properties.\n\n\nValidation of responses with array\n\n\nSometimes you could face situation when you need to validate presence of only one (or couple) item in JSON array ignoring rest items.\nIn such case you can use validation option ARRAY_CONTAINS.\nHere is code sample:\n\n\nJSONAssert.assertEquals(expectedRs, actualRs, new JsonKeywordsComparator(JSONCompareMode.STRICT,\n                    JsonCompareKeywords.ARRAY_CONTAINS.getKey() + \ncontent\n));\n\n\n\n\nExpected array:\n\n\n{\n    \ntotalElements\n: \nskip\n,\n    \npageNumber\n: \nskip\n,\n    \npageSize\n: \nskip\n,\n    \ncontent\n: [\n        {\n            \nid\n: skip,\n            \nbrand\n: \nskip\n,\n            \nclientName\n: \nCLIENT 1\n\n        },\n        {\n            \nid\n: \nskip\n,\n            \nbrand\n: \nskip\n,\n            \nclientName\n: \nCLIENT 2\n\n        }\n    ]\n}\n\n\n\n\nAnd actual response:\n\n\n{\n    \ntotalElements\n: 1017,\n    \npageNumber\n: 0,\n    \npageSize\n: 100,\n    \ncontent\n: [\n        {\n            \nid\n: 11111,\n            \nbrand\n: \ntest\n,\n            \nclientName\n: \nCLIENT 1\n\n        },\n        {\n            \nid\n: 22222,\n            \nbrand\n: \ntest\n,\n            \nclientName\n: \nCLIENT 2\n\n        },\n        {\n            \nid\n: 3333,\n            \nbrand\n: \ntest\n,\n            \nclientName\n: \nCLIENT 3\n\n        },\n        {\n            \nid\n: 4444,\n            \nbrand\n: \ntest\n,\n            \nclientName\n: \nCLIENT 4\n\n        }\n    ]\n}\n\n\n\n\nDeserialization of JSON\n\n\nSometimes you may need to transform your json response to POJO. It maybe useful if you need to validate your response using data from database as expected data.\nFor that purposes it's better to use Jackson libraries that are already included in carina framework.\nFor that you have to prepare domain class based on your json structure. Some online resources provide such opportunities. For instance https://timboudreau.com/blog/json/read\nFor example we need to deserialize array of Clients from json. Example of required domain object will be:\n\n\nimport org.codehaus.jackson.annotate.JsonCreator;\nimport org.codehaus.jackson.annotate.JsonProperty;\npublic final class Clients\n{\n    public final Client clients[];\n    @JsonCreator\n    public Clients(@JsonProperty(\nclients\n) Client[] clients)\n    {\n        this.clients = clients;\n    }\n    public static final class Client\n    {\n        public final long id;\n        public final String brand;\n        public final String clientName;\n        ......\n        @JsonCreator\n        public Client(@JsonProperty(\nid\n) long id, @JsonProperty(\nbrand\n) String brand, @JsonProperty(\nclientName\n) String clientName,.....)\n        {\n            this.id = id;\n            this.brand = brand;\n            this.clientName = clientName;\n            .........\n        }\n    }\n    public Client[] getClients()\n    {\n        return clients;\n    }\n}\n\n\n\n\nPay attention that POJO fields names could differ from json properties. In this case @JsonProperty annotation can be used for mapping.\nExample of deserialization code:\n\n\nGetClientsMethod getClientsMethod = new GetClientsMethod(\n11111\n);\ngetClientsMethod.expectResponseStatus(HttpResponseStatusType.OK_200);\nString rs = getClientsMethod.callAPI().asString();\nObjectMapper mapper = new ObjectMapper();\nClients clients = mapper.readValue(rs, Clients.class);\n\n\n\n\nThen you can use POJO object for any kind of validation or for easy retrieving of required properties.", 
            "title": "API automation"
        }, 
        {
            "location": "/automation/api/#introduction", 
            "text": "Rest API testing is a vital part of integration testing process, it may be used separately or in complex with web, mobile or DB testing. General process may be described by the following steps:   Compile HTTP request with required meta data  Send prepared data to required server endpoint  Validate HTTP status and response data  Extract some response data for the next requests  Build call to next (or same) endpoint using (or not using) data from previous response   Schema below demonstrates the sequence:  From that perspective we decided to use the following instruments:   Rest-assured - \"Testing and validation of REST services in Java is harder than in dynamic languages such as Ruby and Groovy. REST\nAssured brings the simplicity of using these languages into the Java domain.\"  Freemarker - \"Apache FreeMarker is a template engine: a Java library to generate text output (HTML web pages, e-mails, configuration\nfiles, source code, etc.) based on templates and changing data.\"  JsonPath - library for extracting data from JSON body  JsonAssert - library for comparing of actual JSON body with expected one  Json-schema-validator - library for validating of JSON body for matching to json schema", 
            "title": "Introduction"
        }, 
        {
            "location": "/automation/api/#example-of-test-implementation", 
            "text": "Let's create automated test for next call: POST https://jsonplaceholder.typicode.com/users request with requst body  [\n    {\n         id : 1,\n         name :  SOME_NAME ,\n         username :  SOME_USERNAME ,\n         email :  Sincere@april.biz ,\n         address : {\n             street :  Kulas Light ,\n             suite :  Apt. 556 ,\n             city :  Gwenborough ,\n             zipcode :  92998-3874 ,\n             geo : {\n                 lat :  -37.3159 ,\n                 lng :  81.1496 \n            }\n        },\n         phone :  1-770-736-8031 x56442 ,\n         website :  hildegard.org ,\n         company : {\n             name :  SOME_COMPANY_NAME ,\n             catchPhrase :  Multi-layered client-server neural-net ,\n             bs :  harness real-time e-markets \n        }\n    }\n]  and response body same as request body", 
            "title": "Example of test implementation"
        }, 
        {
            "location": "/automation/api/#definition-of-request-and-response-templates", 
            "text": "If we are going to send POST request we have to create request template with some placeholders that may be replaced by different arguments for different test flows. The best place to store these resources is src/test/resources/api package, try to keep REST hierarchy in package structure for better maintenance and visibility: \nRequest (rq.json) and response (rs.json) templates have some placeholders that will be populated from the tests later on:  \nWhile user.properties contains some default value which may be replaced later:", 
            "title": "Definition of request and response templates"
        }, 
        {
            "location": "/automation/api/#rest-service-call-domain-object", 
            "text": "Now we are ready to create REST service domain object which will be used to interact with web service and perform additional response validations. Our domain object is located in /carina-demo/src/main/java/com/qaprosoft/carina/demo/api, make sure that it extends AbstractApiMethodV2 and triggers base class constructor for initialization. In general case you will specify path to request and response templates along with default properties files (all of them were created in previous step). Also we replace URL placeholder to set appropriate environment.  package com.qaprosoft.carina.demo.api;\n\nimport com.qaprosoft.carina.core.foundation.api.AbstractApiMethodV2;\nimport com.qaprosoft.carina.core.foundation.utils.Configuration;\n\npublic class PostUserMethod extends AbstractApiMethodV2 {\n    public PostUserMethod() {\n        super( api/users/_post/rq.json ,  api/users/_post/rs.json ,  api/users/user.properties );\n        replaceUrlPlaceholder( base_url , Configuration.getEnvArg( api_url ));\n    }\n}", 
            "title": "REST service call domain object"
        }, 
        {
            "location": "/automation/api/#http-method-and-path", 
            "text": "The last step before test implementation itself is association of domain object class and required HTTP method and path.\nIt should be defined in /carina-demo/src/main/resources/_api.properties file, key should be equal to domain class name, value has the following pattern {http_method}:{http_path}. HTTP path may contain placeholders, HTTP method should be one of the following variants: GET, POST, PUT, UPDATE, DELETE.  #=====================================================#\n#=================== API methods  ====================#\n#=====================================================#\nGetUserMethods=GET:${base_url}/users\nPostUserMethod=POST:${base_url}/users\nDeleteUserMethod=DELETE:${base_url}/users/1\nPutPostsMethod=PUT:${base_url}/posts/1\nPatchPostsMethod=PATCH:${base_url}/posts/1", 
            "title": "HTTP method and path"
        }, 
        {
            "location": "/automation/api/#api-test", 
            "text": "API test is general TestNG test, class should extend APITest, in our case test extend it over AbstractTest that encapsulates some test data and login method. Test is located in /carina-demo/src/test/java/com/qaprosoft/carina/demo.  package com.qaprosoft.carina.demo;\n\nimport org.skyscreamer.jsonassert.JSONCompareMode;\nimport org.testng.annotations.Test;\n\nimport com.qaprosoft.apitools.validation.JsonCompareKeywords;\nimport com.qaprosoft.carina.core.foundation.AbstractTest;\nimport com.qaprosoft.carina.core.foundation.api.http.HttpResponseStatusType;\nimport com.qaprosoft.carina.core.foundation.utils.ownership.MethodOwner;\nimport com.qaprosoft.carina.demo.api.DeleteUserMethod;\nimport com.qaprosoft.carina.demo.api.GetUserMethods;\nimport com.qaprosoft.carina.demo.api.PostUserMethod;\n\npublic class APISampleTest extends AbstractTest {\n    @Test(description =  JIRA#DEMO-0001 )\n    @MethodOwner(owner =  qpsdemo )\n    public void testCreateUser() throws Exception {\n        PostUserMethod api = new PostUserMethod();\n        api.expectResponseStatus(HttpResponseStatusType.CREATED_201);\n        api.callAPI();\n        api.validateResponse();\n    }\n\n    @Test(description =  JIRA#DEMO-0002 )\n    @MethodOwner(owner =  qpsdemo )\n    public void testCreateUserMissingSomeFields() throws Exception {\n        PostUserMethod api = new PostUserMethod();\n        api.getProperties().remove( name );\n        api.getProperties().remove( username );\n        api.expectResponseStatus(HttpResponseStatusType.CREATED_201);\n        api.callAPI();\n        api.validateResponse();\n    }\n\n    @Test(description =  JIRA#DEMO-0003 )\n    @MethodOwner(owner =  qpsdemo )\n    public void testGetUsers() {\n        GetUserMethods getUsersMethods = new GetUserMethods();\n        getUsersMethods.expectResponseStatus(HttpResponseStatusType.OK_200);\n        getUsersMethods.callAPI();\n        getUsersMethods.validateResponse(JSONCompareMode.STRICT, JsonCompareKeywords.ARRAY_CONTAINS.getKey());\n        getUsersMethods.validateResponseAgainstJSONSchema( api/users/_get/rs.schema );\n    }\n}", 
            "title": "API test"
        }, 
        {
            "location": "/automation/api/#test-steps-once-again", 
            "text": "Create REST call object  Specify properties for request/response placeholder  Add headers if required  Specify expected HTTP status  Call API  Validate response by template or parse some data by JSON path  Make further calls using data from previos call if needed", 
            "title": "Test steps once again"
        }, 
        {
            "location": "/automation/api/#useful-features", 
            "text": "Framework contains list of useful feature for requests building and for responses validation. That makes easier support of such tests and and at the same time minimizes amount of test data.", 
            "title": "Useful features"
        }, 
        {
            "location": "/automation/api/#wildcards", 
            "text": "In some cases you may need to generate data in request to make request data unique. The best way of doing this is to use wildcards for data generation:  {\n     username :  generate_word(10) ,          // Will generate random alphanumeric string with 10 characters\n     zip :  generate_number(6) ,              // Will generate random number with 6 digits\n     birthday :  generate_date(yyyy-MM-dd;0)  // Will generate current date (first arg is date format, second is delta in days from now)\n}  Other option is to specify placeholder in request template and then pass some generated value directly from the test method.  Another useful way of wildcards usage is response validation. In some cases you may need to skip some values or validate by regex:  {\n     id :  skip ,                                    // Will skip actual value validation and just verify id key presence\n     signup_date :  regex:\\\\d{4}-\\\\d{2}-\\\\d{2} ,     // Will validate date value by specified regex\n}", 
            "title": "Wildcards"
        }, 
        {
            "location": "/automation/api/#validation-against-json-schema", 
            "text": "When you need to validate response structure regardless of the actual values you may use validation by JSON schema. In this case you need actual response from service, let's say we have the following:  {\n     email :  test@domain.com ,\n     firstName :  SOME FIRST NAME ,\n     id : 11111\n}  Now we need to generate schema (you may use any generator you like for example https://jsonschema.net/).\nIn tool like this you need to provide original JSON from response then choose some schema options (allow additional properties in objects, mark current object properties as required, hard-code some expected values, ect) and then generate the schema. Copy-paste generated schema into test resources and you're ready to use it in the test. \nMake sure that you change all flags required to true, after that create new file in resources and place into appropriate endpoint package:  {\n     type : object ,\n     $schema :  http://json-schema.org/draft-03/schema ,\n     id :  http://jsonschema.net ,\n     required :true,\n     properties :{\n         email : {\n             type : string ,\n             id :  http://jsonschema.net/email ,\n             required :true\n        },\n         firstName : {\n             type : string ,\n             id :  http://jsonschema.net/firstName ,\n             required :true\n        },\n         id : {\n             type : number ,\n             id :  http://jsonschema.net/id ,\n             required :true\n        }\n    }\n}  And finally we call JSON validation from Java test as following:  @Test\npublic void testCheckJSONSchema()\n{\n    PostUserLoginMethod api = new PostUserLoginMethod();\n    api.expectResponseStatus(HttpResponseStatusType.OK_200);\n    api.callAPI();\n    api.validateResponseAgainstJSONSchema( api/testdata/users/login/_post/rs.schema );\n}", 
            "title": "Validation against JSON schema"
        }, 
        {
            "location": "/automation/api/#building-of-requests-with-array", 
            "text": "There are couple options for building request with array of items provided by framework:\n1. First one use hardcoded placholders for changeable variables.  {\n    name :  ${name} ,\n    description :  ${description} ,\n    label :  ${label} ,\n    taskTypes : [\n      {\n          name :  ${task_name_1} ,\n          description :  ${task_description_1} \n      }\n       #if task_name_2?exists || task_description_2?exists ,\n      {\n          name :  ${task_name_2} ,\n          description :  ${task_description_2} \n      }\n       /#if \n       #if task_name_3?exists || task_description_3?exists ,\n      {\n          name :  ${task_name_3} ,\n          description :  ${task_description_3} \n      }\n       /#if \n   ]\n}  As you see this structure is pretty flexible. If you need 2 taskTypes items then you need to declare at least task_name_2 or task_description_2 property. If you need 3 items in addition to that you need to declare task_name_3 or task_description_3 property. Otherwise array will contain only 1 item.\nFor instance you need to build json which contains taskTypes array. Then template with placeholders will be following:\nIt's easy to extend such structure. You just need to add items with similar placeholders increasing their index.   Other approach is based on using Freemarker loop. Here is the template example for same JSON:   #if task_name_1?exists \n     #assign task_names = [task_name_1] \n     #assign task_descriptions = [task_description_1]  /#if     #if task_name_2?exists \n     #assign task_names = [task_name_1, task_name_2] \n     #assign task_descriptions = [task_description_1, task_description_2]  /#if  #if task_name_3?exists \n     #assign task_names = [task_name_1, task_name_2, task_name_3] \n     #assign task_descriptions = [task_description_1, task_description_2, task_description_3]  /#if \n\n{\n    name :  ${name} ,\n    description :  ${description} ,\n    label :  ${label} ,\n    taskTypes : [\n       #list 0..task_names?size-1 as i \n      {\n          name :  ${task_names[i]} ,\n          description :  ${task_descriptions[i]} \n      }\n       #if (i + 1)   task_names?size , /#if \n       /#list \n   ]\n}  This approach is useful when structure of array item is pretty complex. So it makes sense to specify item attributes only once doing it inside #list operation.\nThis approach also allows to choose amount of array items dynamically.\nBut note that you should specify all properties for each item so this view can be not used for negative tests when you need to miss some properties.", 
            "title": "Building of requests with array"
        }, 
        {
            "location": "/automation/api/#validation-of-responses-with-array", 
            "text": "Sometimes you could face situation when you need to validate presence of only one (or couple) item in JSON array ignoring rest items.\nIn such case you can use validation option ARRAY_CONTAINS.\nHere is code sample:  JSONAssert.assertEquals(expectedRs, actualRs, new JsonKeywordsComparator(JSONCompareMode.STRICT,\n                    JsonCompareKeywords.ARRAY_CONTAINS.getKey() +  content ));  Expected array:  {\n     totalElements :  skip ,\n     pageNumber :  skip ,\n     pageSize :  skip ,\n     content : [\n        {\n             id : skip,\n             brand :  skip ,\n             clientName :  CLIENT 1 \n        },\n        {\n             id :  skip ,\n             brand :  skip ,\n             clientName :  CLIENT 2 \n        }\n    ]\n}  And actual response:  {\n     totalElements : 1017,\n     pageNumber : 0,\n     pageSize : 100,\n     content : [\n        {\n             id : 11111,\n             brand :  test ,\n             clientName :  CLIENT 1 \n        },\n        {\n             id : 22222,\n             brand :  test ,\n             clientName :  CLIENT 2 \n        },\n        {\n             id : 3333,\n             brand :  test ,\n             clientName :  CLIENT 3 \n        },\n        {\n             id : 4444,\n             brand :  test ,\n             clientName :  CLIENT 4 \n        }\n    ]\n}", 
            "title": "Validation of responses with array"
        }, 
        {
            "location": "/automation/api/#deserialization-of-json", 
            "text": "Sometimes you may need to transform your json response to POJO. It maybe useful if you need to validate your response using data from database as expected data.\nFor that purposes it's better to use Jackson libraries that are already included in carina framework.\nFor that you have to prepare domain class based on your json structure. Some online resources provide such opportunities. For instance https://timboudreau.com/blog/json/read\nFor example we need to deserialize array of Clients from json. Example of required domain object will be:  import org.codehaus.jackson.annotate.JsonCreator;\nimport org.codehaus.jackson.annotate.JsonProperty;\npublic final class Clients\n{\n    public final Client clients[];\n    @JsonCreator\n    public Clients(@JsonProperty( clients ) Client[] clients)\n    {\n        this.clients = clients;\n    }\n    public static final class Client\n    {\n        public final long id;\n        public final String brand;\n        public final String clientName;\n        ......\n        @JsonCreator\n        public Client(@JsonProperty( id ) long id, @JsonProperty( brand ) String brand, @JsonProperty( clientName ) String clientName,.....)\n        {\n            this.id = id;\n            this.brand = brand;\n            this.clientName = clientName;\n            .........\n        }\n    }\n    public Client[] getClients()\n    {\n        return clients;\n    }\n}  Pay attention that POJO fields names could differ from json properties. In this case @JsonProperty annotation can be used for mapping.\nExample of deserialization code:  GetClientsMethod getClientsMethod = new GetClientsMethod( 11111 );\ngetClientsMethod.expectResponseStatus(HttpResponseStatusType.OK_200);\nString rs = getClientsMethod.callAPI().asString();\nObjectMapper mapper = new ObjectMapper();\nClients clients = mapper.readValue(rs, Clients.class);  Then you can use POJO object for any kind of validation or for easy retrieving of required properties.", 
            "title": "Deserialization of JSON"
        }, 
        {
            "location": "/dataproviders/", 
            "text": "Dataproviders\n\n\nModern test automation frameworks should support data-driven testing, when you are capable to verify variety of edge cases providing test data sets into the tests using external data sources. Carina is not an exclusion, framework supports multiple ways of tests parametrization (see \nsamples\n):\n\n\n\n\nJava data-providers\n\n\nXML parametrization\n\n\nXLS data-providers\n\n\nCSV data-providers\n\n\n\n\nJava data-provider\n\n\nAs far as Carina is based on TestNG framework you are able to use well known Java data-providers that returns matrix of Objects and passed to appropriate test arguments. You have to use dataProvider attribute along with @Test annotation and implement method annotated with @DataProvider that will return Object[][] as test data set:\n\n\n@Test(dataProvider = \nDP1\n)\npublic void testMuliplyOperation(int a, int b, int c)\n{\n    int actual = a * b;\n    int expected = c;\n    Assert.assertEquals(actual, expected, \nInvalid sum result!\n);\n}\n\n@DataProvider(parallel = false, name = \nDP1\n)\npublic static Object[][] dataprovider()\n{\n    return new Object[][] {\n        { 2, 3, 6 },\n        { 6, 6, 36 },\n        { 5, 8, 40 } \n    };\n}\n\n\n\n\nXML parametrization\n\n\nTestNG supports parametrization from XML files, when you organize tests suites using XML files. Parametarized test method should be annotated with @Parameters({ \"a\", \"b\", \"c\" }) and appopriate method arguments should be listed. Also you have to pass all required parameters from XML suite file:\n\n\n@Test\n@Parameters({ \na\n, \nb\n, \nc\n })\npublic void testSubstractOperation(int a, int b, int c) {\n    int actual = Integer.valueOf(a) - Integer.valueOf(b);\n    int expected = Integer.valueOf(c);\n    Assert.assertEquals(actual, expected, \nInvalid substract result!\n);\n}\n\n...\n\ntest name=\nSubstract operation test\n\n    \nparameter name=\na\n value=\n12\n/\n\n    \nparameter name=\nb\n value=\n3\n/\n\n    \nparameter name=\nc\n value=\n9\n/\n\n    \nclasses\n\n        \nclass name=\ncom.qaprosoft.carina.demo.DataprovidersSampleTest\n\n            \nmethods\n\n                \ninclude name=\ntestSubstractOperation\n/\n\n            \n/methods\n\n        \n/class\n\n    \n/classes\n\n\n/test\n\n...\n\n\n\n\nXLS/CSV data-providers\n\n\nCarina test framework provides possibility to write all tests with data providers in one place include parametrization using external XLS/CSV spreadsheets. First of all you need to declare test class that extends \nAbstractTest.java\n:\nAfter that you can specify data providers tests as follows.\n\n\npublic class DataprovidersSampleTest extends AbstractTest {\n    @Test(dataProvider = \nDataProvider\n)\n    @XlsDataSourceParameters(path = \nxls/demo.xlsx\n, sheet = \nCalculator\n, dsUid = \nTUID\n, dsArgs = \na,b,c\n)\n    public void testSumOperation(String a, String b, String c) {\n        int actual = Integer.valueOf(a) + Integer.valueOf(b);\n        int expected = Integer.valueOf(c);\n        Assert.assertEquals(actual, expected, \nInvalid sum result!\n);\n    }\n}\n\n\n\n\nThis test uses XLS/CSV files as data sourse. Every row in a spreadsheet is a set of arguments for a test. You should specify the \ndataProvider\n parameter for TestNG annotation \n@Test\n . Carina test framework initially defines several data providers methods in \nAbstractTest.java\n, which you've extended earlier:\n\n\n\n\n\n\ncreateData method (data provider name = \"DataProvider\") for common usecases\n\n\n\n\n\n\ncreateDataSingeThread method (data provider name = \"SingleDataProvider\") for single-thread execution.\n\n\n\n\n\n\nTo specify XLS/CSV spreadsheets for test you should declare \n@XlsDataSourceParameters\n annotaion and define its parameters:\n\n\n\n\npath - file path located in src/test/resources\n\n\nsheet - sheet name\n\n\ndsUid - data-source unique identifier\n\n\ndsArgs - column names from sheet\n\n\n\n\nHere you can look at the spreadsheet as a data provider example for your further tests:\n\n\n\n\nIn TUID column you shoud specify some unique test identifier that will be set in the beginning of test name in test results report. In next columns you can specify arguments for a test and their values in lower rows. They will be used as parameters in \n@XlsDataSourceParameters\n. In this example values of a,b,c arguments were defined in 3 sets of values with different TUID.", 
            "title": "Dataproviders"
        }, 
        {
            "location": "/dataproviders/#dataproviders", 
            "text": "Modern test automation frameworks should support data-driven testing, when you are capable to verify variety of edge cases providing test data sets into the tests using external data sources. Carina is not an exclusion, framework supports multiple ways of tests parametrization (see  samples ):   Java data-providers  XML parametrization  XLS data-providers  CSV data-providers", 
            "title": "Dataproviders"
        }, 
        {
            "location": "/dataproviders/#java-data-provider", 
            "text": "As far as Carina is based on TestNG framework you are able to use well known Java data-providers that returns matrix of Objects and passed to appropriate test arguments. You have to use dataProvider attribute along with @Test annotation and implement method annotated with @DataProvider that will return Object[][] as test data set:  @Test(dataProvider =  DP1 )\npublic void testMuliplyOperation(int a, int b, int c)\n{\n    int actual = a * b;\n    int expected = c;\n    Assert.assertEquals(actual, expected,  Invalid sum result! );\n}\n\n@DataProvider(parallel = false, name =  DP1 )\npublic static Object[][] dataprovider()\n{\n    return new Object[][] {\n        { 2, 3, 6 },\n        { 6, 6, 36 },\n        { 5, 8, 40 } \n    };\n}", 
            "title": "Java data-provider"
        }, 
        {
            "location": "/dataproviders/#xml-parametrization", 
            "text": "TestNG supports parametrization from XML files, when you organize tests suites using XML files. Parametarized test method should be annotated with @Parameters({ \"a\", \"b\", \"c\" }) and appopriate method arguments should be listed. Also you have to pass all required parameters from XML suite file:  @Test\n@Parameters({  a ,  b ,  c  })\npublic void testSubstractOperation(int a, int b, int c) {\n    int actual = Integer.valueOf(a) - Integer.valueOf(b);\n    int expected = Integer.valueOf(c);\n    Assert.assertEquals(actual, expected,  Invalid substract result! );\n}\n\n... test name= Substract operation test \n     parameter name= a  value= 12 / \n     parameter name= b  value= 3 / \n     parameter name= c  value= 9 / \n     classes \n         class name= com.qaprosoft.carina.demo.DataprovidersSampleTest \n             methods \n                 include name= testSubstractOperation / \n             /methods \n         /class \n     /classes  /test \n...", 
            "title": "XML parametrization"
        }, 
        {
            "location": "/dataproviders/#xlscsv-data-providers", 
            "text": "Carina test framework provides possibility to write all tests with data providers in one place include parametrization using external XLS/CSV spreadsheets. First of all you need to declare test class that extends  AbstractTest.java :\nAfter that you can specify data providers tests as follows.  public class DataprovidersSampleTest extends AbstractTest {\n    @Test(dataProvider =  DataProvider )\n    @XlsDataSourceParameters(path =  xls/demo.xlsx , sheet =  Calculator , dsUid =  TUID , dsArgs =  a,b,c )\n    public void testSumOperation(String a, String b, String c) {\n        int actual = Integer.valueOf(a) + Integer.valueOf(b);\n        int expected = Integer.valueOf(c);\n        Assert.assertEquals(actual, expected,  Invalid sum result! );\n    }\n}  This test uses XLS/CSV files as data sourse. Every row in a spreadsheet is a set of arguments for a test. You should specify the  dataProvider  parameter for TestNG annotation  @Test  . Carina test framework initially defines several data providers methods in  AbstractTest.java , which you've extended earlier:    createData method (data provider name = \"DataProvider\") for common usecases    createDataSingeThread method (data provider name = \"SingleDataProvider\") for single-thread execution.    To specify XLS/CSV spreadsheets for test you should declare  @XlsDataSourceParameters  annotaion and define its parameters:   path - file path located in src/test/resources  sheet - sheet name  dsUid - data-source unique identifier  dsArgs - column names from sheet   Here you can look at the spreadsheet as a data provider example for your further tests:   In TUID column you shoud specify some unique test identifier that will be set in the beginning of test name in test results report. In next columns you can specify arguments for a test and their values in lower rows. They will be used as parameters in  @XlsDataSourceParameters . In this example values of a,b,c arguments were defined in 3 sets of values with different TUID.", 
            "title": "XLS/CSV data-providers"
        }, 
        {
            "location": "/security/", 
            "text": "Security functionality in the Carina framework is required for sensitive data that should be hidden in test configurations and logging. It uses a symmetric key encryption algorithm for security implementation, which means that anyone may encrypt/decrypt the data in the same way, using the same key. In the Carina framework, AES encryption is used by default with a 128-bit security key.\n\n\n\n\nAnyone may generate their own security key and encrypt the data using that key, so that decrypted valid data may be used in the test only if the valid key is specified in test configuration. Also, one may use the default common key located in the test resources, giving access to all other users for secured data decryption.\n\n\nSecured data preparation\n\n\nFor secured data preparation, we implemented a special tool that helps to generate crypto keys and encrypt/decrypt test data files. Here is a usage tip:\n\n\ncom.qaprosoft.carina.core.foundation.crypto.CryptoConsole -generate -key_file \nfile_path_to_save_key\n\ncom.qaprosoft.carina.core.foundation.crypto.CryptoConsole -encrypt -string \nstring_to_encrypt\n -key_file \nkey_file_path\n\ncom.qaprosoft.carina.core.foundation.crypto.CryptoConsole -decrypt -string \nstring_to_decrypt\n -key_file \nkey_file_path\n\ncom.qaprosoft.carina.core.foundation.crypto.CryptoConsole -encrypt -file \ncsv_file_to_encrypt\n -key_file \nkey_file_path\n\ncom.qaprosoft.carina.core.foundation.crypto.CryptoConsole -decrypt -file \ncsv_file_to_decrypt\n -key_file \nkey_file_path\n\n\n\n\n\nTo generate an individual crypto key:\n\n\n\n\nGo to \"Run configuration\" in Eclipse\n\n\nCreate new Java application configuration selecting project and main class \ncom.qaprosoft.cariana.core.foundation.crypto.CryptoConsole\n:\n\n\n\nSet arguments\n\n\n\nPress Apply and then Run\n\n\nCrypto key will be generated:\n\n\n\n\n\nTo prepare test data file with secured data:\n\n\n\n\nPrepare input file  using  pattern {crypt:str_to_encrypt} for secured values\n\n\n\nPrepare input file  using  pattern {crypt:str_to_encrypt} for secured values\nGo to \u201cRun configuration\u201d, navigate to arguments tab and execute encryption command specifying key path and input file:\n\n\n\nFile with encrypted data will be generated:\n\n\n\nTo encrypt single string use the following config:\n\n\n\nEncrypted string will be shown in console:\n\n\n\nTo decrypt encrypted file execute:\n\n\n\nDecrypted file will be generated:\n\n\n\n\n\nSecured data usage\n\n\nYou may use encrypted values, both in test configuration and test data files; pay attention to the fact that there is no explicit before test listener for data decryption, so there is no way to find out later in the test if the data is sensitive or not. All the decryption logic is located in WebDriverHelper that wraps Selenium WebDriver methods for interaction with UI and encapsulates action logging logic. Every method that receives text tests if text contains {crypt:...} pattern and if it does, decrypts it and passes it to UI- logging and screenshots are populated with hidden characters:", 
            "title": "Security"
        }, 
        {
            "location": "/security/#secured-data-preparation", 
            "text": "For secured data preparation, we implemented a special tool that helps to generate crypto keys and encrypt/decrypt test data files. Here is a usage tip:  com.qaprosoft.carina.core.foundation.crypto.CryptoConsole -generate -key_file  file_path_to_save_key \ncom.qaprosoft.carina.core.foundation.crypto.CryptoConsole -encrypt -string  string_to_encrypt  -key_file  key_file_path \ncom.qaprosoft.carina.core.foundation.crypto.CryptoConsole -decrypt -string  string_to_decrypt  -key_file  key_file_path \ncom.qaprosoft.carina.core.foundation.crypto.CryptoConsole -encrypt -file  csv_file_to_encrypt  -key_file  key_file_path \ncom.qaprosoft.carina.core.foundation.crypto.CryptoConsole -decrypt -file  csv_file_to_decrypt  -key_file  key_file_path   To generate an individual crypto key:   Go to \"Run configuration\" in Eclipse  Create new Java application configuration selecting project and main class  com.qaprosoft.cariana.core.foundation.crypto.CryptoConsole :  Set arguments  Press Apply and then Run  Crypto key will be generated:   To prepare test data file with secured data:   Prepare input file  using  pattern {crypt:str_to_encrypt} for secured values  Prepare input file  using  pattern {crypt:str_to_encrypt} for secured values\nGo to \u201cRun configuration\u201d, navigate to arguments tab and execute encryption command specifying key path and input file:  File with encrypted data will be generated:  To encrypt single string use the following config:  Encrypted string will be shown in console:  To decrypt encrypted file execute:  Decrypted file will be generated:", 
            "title": "Secured data preparation"
        }, 
        {
            "location": "/security/#secured-data-usage", 
            "text": "You may use encrypted values, both in test configuration and test data files; pay attention to the fact that there is no explicit before test listener for data decryption, so there is no way to find out later in the test if the data is sensitive or not. All the decryption logic is located in WebDriverHelper that wraps Selenium WebDriver methods for interaction with UI and encapsulates action logging logic. Every method that receives text tests if text contains {crypt:...} pattern and if it does, decrypts it and passes it to UI- logging and screenshots are populated with hidden characters:", 
            "title": "Secured data usage"
        }, 
        {
            "location": "/contribution/", 
            "text": "1) \nFork repository\n \nhttps://github.com/qaprosoft/carina\n to your own user.\n\n\n2) \nClone your fork to your local machine\n:\n\n\ngit clone git@github.com:your_fork_url/carina.git\n\n\n3) \ngit remote add origin \nyour_fork_url\n (can be already added)\n\n\n4) \ngit fetch origin\n\n\n5) \ngit remote add upstream git@github.com:qaprosoft/carina.git\n\n\n6) \ngit fetch upstream\n\n\n7) \ngit checkout -b work_local_branch upstream/master\n\n\nAnd then after adding files (\ngit add\n ...) use \ngit commit\n (add description) and then\npush\n:\n\n\ngit push origin work_local_branch:work_remote_branch\n\n\n\nAnd on \nhttps://github.com/qaprosoft/carina\n you will see possibility to \"Compare \n Pull Request\"", 
            "title": "Contribution"
        }, 
        {
            "location": "/releases/", 
            "text": "Release notes", 
            "title": "Release notes"
        }, 
        {
            "location": "/releases/#release-notes", 
            "text": "", 
            "title": "Release notes"
        }
    ]
}