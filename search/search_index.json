{
    "docs": [
        {
            "location": "/", 
            "text": "Carina Automation Framework\n\n\nCarina is a Java-based test automation framework that unites all testing layers: Mobile applications (web, native, hybrid), WEB applications, REST services, Databases.\n\n\nTRY DEMO PROJECT NOW\n\n\n\n\n\n\n\n\nCarina framework is built on top of most popular open-source solutions like Selenium, Appium, TestNG allowing to reduce dependence on specific technology stack.\n\n\n\n\n\n\nCarina supports all popular browsers (IE, Safari, Chrome, Firefox) and mobile devices (iOS/Android). Special feature for mobile domain: it reuses test automation code between IOS/Android up to 70-80%.\n\n\n\n\n\n\nAs far as our framework is built in Java, it is cross-platform. Tests may be easily executed both on Unix or Windows OS. All you need is JDK 8 installed.\n\n\n\n\n\n\nFramework supports different types of databases - both relational and nonrelational (MySQL, SQL Server, Oracle, PostgreSQL), providing amazing experience of DAO layer implementation using MyBatis ORM framework.\n\n\n\n\n\n\nAPI testing is based on Freemarker template engine. It enables great flexibility in generating REST requests and responses are dynamically changed by incoming arguments.\n\n\n\n\n\n\nCarina is fully integrated into \nQPS-Infra\n that helps to setup production-ready environment for running Mobile, Web and API tests. Feel free to ask any questions if you are going use it in your company.", 
            "title": "Overview"
        }, 
        {
            "location": "/#carina-automation-framework", 
            "text": "Carina is a Java-based test automation framework that unites all testing layers: Mobile applications (web, native, hybrid), WEB applications, REST services, Databases.  TRY DEMO PROJECT NOW     Carina framework is built on top of most popular open-source solutions like Selenium, Appium, TestNG allowing to reduce dependence on specific technology stack.    Carina supports all popular browsers (IE, Safari, Chrome, Firefox) and mobile devices (iOS/Android). Special feature for mobile domain: it reuses test automation code between IOS/Android up to 70-80%.    As far as our framework is built in Java, it is cross-platform. Tests may be easily executed both on Unix or Windows OS. All you need is JDK 8 installed.    Framework supports different types of databases - both relational and nonrelational (MySQL, SQL Server, Oracle, PostgreSQL), providing amazing experience of DAO layer implementation using MyBatis ORM framework.    API testing is based on Freemarker template engine. It enables great flexibility in generating REST requests and responses are dynamically changed by incoming arguments.    Carina is fully integrated into  QPS-Infra  that helps to setup production-ready environment for running Mobile, Web and API tests. Feel free to ask any questions if you are going use it in your company.", 
            "title": "Carina Automation Framework"
        }, 
        {
            "location": "/getting_started/", 
            "text": "Install and configure JDK 1.8+\n\n\nInstall and configure \nApache Maven 3.5.2+\n\n\nDownload and start the latest \nSelenium standalone server\n\n\nDownload the latest version of \nEclipse\n and install \nTestNG plugin\n\n\n\n\nGenerating project\n\n\nThe easiest way to initialize new project is to use Carina archetype, you will get correct project structure along with test samples:\n\n\nmvn archetype:generate -DarchetypeGroupId=com.qaprosoft \\\n                       -DarchetypeArtifactId=carina-archetype \\\n                       -DarchetypeVersion=1.0 \\\n                       -DgroupId=\nyour_groupId\n \\\n                       -DartifactId=\nyour_artifactId\n \\\n                       -Dname=\nyou_proj_name\n \\\n                       -Durl=\nyour_proj_url\n \\\n                       -Dversion=\nyour_proj_version\n\n\n\n\n\nIf any attribute contains spaces, it should be set in quotes (e.g.: -Dname=\"Hello World\"). In above Maven command you have to specify 5 attributes while the first 3 should be left unchanged. Let's go through these attributes:\n\n\n\n    \n\n        \nAttribute\n\n        \nMeaning\n\n        \nExample\n\n    \n\n    \n\n        \n-DgroupId\n\n        \nCompany domain in reverce order\n\n        \ncom.qaprosoft\n\n    \n\n    \n\n        \n-DartifactId\n\n        \nJava project name\n\n        \ncarina-qa\n\n    \n\n    \n\n        \n-Dname\n\n        \nName with more details\n\n        \n\"Carina Test Automation\"\n\n    \n\n    \n\n        \n-Durl\n\n        \nCompany URL\n\n        \nhttp://qaprosoft.com\n\n    \n\n    \n\n        \n-Dversion\n\n        \nProject version\n\n        \n1.0\n\n    \n\n\n\n\n\nImport to Eclipse\n\n\nIf generation is successfully complete, you would see a new project folder with a name equal to the artifactId attribute specified during generation, so navigate to that folder (where pom.xml is located) and execute the following Maven task:\n\n\nmvn clean eclipse:eclipse\n\n\n\n\nBy executing this command, Maven should resolve all dependencies, downloading required libraries to your local repository and generating Eclipse classpath. Before importing new project to Eclipse, you should link your IDE to your Maven repository by executing the following task:\n\n\nmvn -Dworkspace=\npath_to_workspace\n eclipse:configure-workspace\n\n\n\n\nHere you have to specify the absolute path to the Eclipse workspace. After that, restart Eclipse IDE. Now you can import generated projects such as \"Existing Java Project\" into Eclipse IDE.", 
            "title": "Getting started"
        }, 
        {
            "location": "/getting_started/#generating-project", 
            "text": "The easiest way to initialize new project is to use Carina archetype, you will get correct project structure along with test samples:  mvn archetype:generate -DarchetypeGroupId=com.qaprosoft \\\n                       -DarchetypeArtifactId=carina-archetype \\\n                       -DarchetypeVersion=1.0 \\\n                       -DgroupId= your_groupId  \\\n                       -DartifactId= your_artifactId  \\\n                       -Dname= you_proj_name  \\\n                       -Durl= your_proj_url  \\\n                       -Dversion= your_proj_version   If any attribute contains spaces, it should be set in quotes (e.g.: -Dname=\"Hello World\"). In above Maven command you have to specify 5 attributes while the first 3 should be left unchanged. Let's go through these attributes:  \n     \n         Attribute \n         Meaning \n         Example \n     \n     \n         -DgroupId \n         Company domain in reverce order \n         com.qaprosoft \n     \n     \n         -DartifactId \n         Java project name \n         carina-qa \n     \n     \n         -Dname \n         Name with more details \n         \"Carina Test Automation\" \n     \n     \n         -Durl \n         Company URL \n         http://qaprosoft.com \n     \n     \n         -Dversion \n         Project version \n         1.0", 
            "title": "Generating project"
        }, 
        {
            "location": "/getting_started/#import-to-eclipse", 
            "text": "If generation is successfully complete, you would see a new project folder with a name equal to the artifactId attribute specified during generation, so navigate to that folder (where pom.xml is located) and execute the following Maven task:  mvn clean eclipse:eclipse  By executing this command, Maven should resolve all dependencies, downloading required libraries to your local repository and generating Eclipse classpath. Before importing new project to Eclipse, you should link your IDE to your Maven repository by executing the following task:  mvn -Dworkspace= path_to_workspace  eclipse:configure-workspace  Here you have to specify the absolute path to the Eclipse workspace. After that, restart Eclipse IDE. Now you can import generated projects such as \"Existing Java Project\" into Eclipse IDE.", 
            "title": "Import to Eclipse"
        }, 
        {
            "location": "/project_structure/", 
            "text": "Carina test project is structured as a standard Maven project:\n\n\ncarina-demo\n|-- pom.xml\n|-- src/test/java        \n|-- src/test/resources\n    |-- api\n    |-- testng_suites\n    |-- xls\n|-- src/main/java\n|-- src/main/resources\n    |-- l18n\n\n\n\n\n\n\nsrc/test/java\n - contains test classes organized using TestNG annotations\n\n\n\n\n\n\n\n\nsrc/test/resources\n - contains TestNG xml files, API templates and XLS data providers\n\n\n\n\n\n\n\n\nsrc/main/java\n - contains page object classes, API domains and additional utilities\n\n\n\n\n\n\n\n\nsrc/main/resources\n - contains l18n bundles, configuration properties files and MyBastis profiles if needed", 
            "title": "Project structure"
        }, 
        {
            "location": "/configuration/", 
            "text": "Configuration files\n\n\nThere are multiple properties files located in src/main/resources:\n\n\n\n\napi.properties\n - API test endpoints reference\n\n\nconfig.properties\n - global test configuration\n\n\ndatabase.properties\n - database connection properties\n\n\nemail.properties\n - emailable reports config\n\n\ntestdata.properties\n - test user credentials \n\n\n\n\nAll properties may be retrieved in test using R class:\n\n\nR.API.get(\nGetUserMethods\n)\nR.CONFIG.get(\nbrowser\n)\nR.DATABASE.get(\ndb.url\n)\nR.EMAIL.get(\ntitle\n)\nR.TESTDATA.get(\nuser.email\n)\n\n\n\n\nDefault config properties can be obtained by\n\n\nConfiguration.get(Parameter.EXTRA_CAPABILITIES)\n\n\n\n\nAll project configuration properties are located in \n_config.properties\n file. In the table below we are providing description for most of the parameters:\n\n\n    \n\n        \nAttribute\n\n        \nMeaning\n\n        \nExample\n\n    \n\n    \n\n        \nurl\n\n        \nBase application URL\n\n        \nhttp://qaprosoft.com\n\n    \n\n    \n\n        \nbrowser\n\n        \nBrowser for testing\n\n        \nchrome / firefox / safari / iexplore\n\n    \n\n    \n\n        \nselenium_host\n\n        \nSelenium server host\n\n        \nhttp://localhost:4444/wd/hub\n\n    \n\n    \n\n        \napp_version\n\n        \nApplication version/build number for reporting\n\n        \n1.2.5\n\n    \n\n    \n\n        \nlocale\n\n        \nLocale for using L10N feature. Enabled when enable_l10n=true\n\n        \nen_GB,de_DE,fr_FR\n\n    \n\n    \n\n        \nlanguage\n\n        \nLanguage for i18n defature. Enabled when enable_i18n=true\n\n        \nen_GB,de_DE,fr_FR\n\n    \n\n    \n\n        \nimplicit_timeout\n\n        \nImplicit timeout in seconds to wait for element\n\n        \nInteger\n\n    \n\n    \n\n        \nretry_interval\n\n        \nTimeout interval between calling HTML DOM for the element.\nNote:\n in ms. For mobile automation specify number from 500-1500 range\n\n        \nInteger\n\n    \n\n    \n\n        \nauto_screenshot\n\n        \nGlobal switch for taking screenshots. When disabled only failures will be captured\n\n        \nBoolean\n\n    \n\n    \n\n        \nkeep_all_screenshots\n\n        \nKeep screenshots artifacts even for passed tests.\n\n        \n\n    \n\n    \n\n        \nreport_url\n\n        \nDirect HTTP link to Jenkins workspace report folder. Automatically specified by CI\n\n        \nhttp://localhost:8888/job /my_project/1/eTAF_Report\n\n    \n\n    \n\n        \nmax_screen_history\n\n        \nMax number of reports in history\n\n        \nInteger\n\n    \n\n    \n\n        \njira_url\n\n        \nJIRA base URL for direct links with bugs description\n\n        \nhttps://jira.carina.com/browse/\n\n    \n\n    \n\n        \nemail_list\n\n        \nComma-separated list of emails for reports\n\n        \nu1@gmail.com,u2@gmail.com\n\n    \n\n    \n\n        \nsender_email\n\n        \nEmail account for reports sending. \nNote:\n Gmail smtp settings are used by default. Update _email.properties to use your own SMTP server\n\n        \ncarina.qareport@qaprosoft.com\n\n    \n\n    \n\n        \nsender_pswd\n\n        \nEmail password for reports sending\n\n        \npwd123\n\n    \n\n    \n\n        \nenv\n\n        \nEnvironment specific configuration. More about this \nfeature\n\n        \nSTAG, PROD, DEMO\n\n    \n\n    \n\n        \nenv_arg_resolver\n\n        \nThis parametr is optional, if it isn't set default value will be used. In most cases \ndefault value is enough\n\n        \njava class \n\n    \n\n        \n\n        \nplatform\n\n        \nPlatform version for Selenium Grid\n\n        \nANDROID,IOS,WINDOWS,MAC,LINUX\n\n    \n\n        \n\n        \nbrowser_version\n\n        \nThe browser version, or the empty string if unknown for Selenium Grid\n\n        \n\"8.0\", \"52.1\"\n\n    \n\n        \n\n        \ndriver_mode\n\n        \nRule for defining WebDriver lifecycle.\n\n        \nmethod_mode / class_mode / suite_mode\n\n    \n\n    \n\n        \ndriver_event_listeners\n\n        \nComma-separated list of listeners. Listeners provide more logs from WebDriver and have to be instances of WebDriverEventListener\n\n        \ncom.someCompane.core .EventListener\n\n    \n\n        \n\n        \nmax_driver_count\n\n        \nMax number of drivers per thread\n\n        \nInteger\n\n    \n\n        \n\n        \ncustom_capabilities\n\n        \nName of propertie file with custom capabilities(key-value)\n\n        \ncustom.properties\n\n    \n\n        \n\n        \nproxy_host\n\n        \nThe hostname of the server\n\n        \nhost.example.com\n\n    \n\n        \n\n        \nproxy_port\n\n        \nThe port number\n\n        \n80\n\n    \n\n        \n\n        \nproxy_protocols\n\n        \nComma-separated list of internet protocols used to carry connection information from the source requesting the connection to the destination for which the connection was requested.\n\n        \nhttp, https, ftp, socks\n\n    \n\n        \n\n        \nbrowsermob_proxy\n\n        \nBoolean parameter which enable or disable set up of mobile proxy\n\n        \ntrue, false\n\n    \n\n        \n\n        \nbrowsermob_port\n\n        \nThe port number for mobile browser (make sense only for local debugging)\n\n        \nInteger\n\n    \n\n        \n\n        \nproxy_set_to_system\n\n        \nBoolean parameter which enable or disable set up of proxy\n\n        \ntrue, false\n\n    \n\n        \n\n        \nfailure_email_list\n\n        \nComma-separated list of emails for failure reports\n\n        \nu1@mail.com,u2@mail.com\n\n    \n\n        \n\n        \ntrack_known_issues\n\n        \nBoolean parameter. If it is true and some Jira tickets assosiated with test in case of failure Jira info will be added to report\n\n        \ntrue,false\n\n    \n\n    \n\n        \nexplicit_timeout\n\n        \nTimeout in seconds to wait for a certain condition to occur before proceeding further in the code\n\n        \nInteger\n\n    \n\n    \n\n        \nauto_download\n\n        \nEnabled parametr prevent download dialog and download file automatically. Feature currently avaliable for Chrome and FireFox\n\n        \nfalse, true\n\n    \n\n    \n\n        \nauto_download_apps\n\n        \nMIME types / Internet Media Types. Parameter is necessary only for configure auto downloading for FireFox\n\n        \napplication/pdf, list of \nvalues\n\n    \n\n    \n\n        \nproject_report_directory\n\n        \nPath to folder where reports will be saved\n\n        \n./reports/qa\n\n    \n\n    \n\n        \nbig_screen_width\n\n        \nSreenshots will be resized according this width if there own width is bigger\n\n        \n500, 1200, Integer\n\n    \n\n    \n\n        \nbig_screen_height\n\n        \nSreenshots will be resized according this height if there own height is bigger\n\n        \n500, 1200, Integer\n\n    \n\n        \n\n        \nsmall_screen_width\n\n        \nThumbnails width\n\n        \nInteger\n\n    \n\n    \n\n        \nbig_screen_height\n\n        \nThumbnails height\n\n        \nInteger\n\n    \n\n    \n\n        \nbig_screen_height\n\n        \nThumbnails height\n\n        \nInteger\n\n    \n\n    \n\n        \ninit_retry_count\n\n        \nNumber of attempts to create driver.  Default value 0 means that it would be only 1 attempt\n\n        \nInteger\n\n    \n\n    \n\n        \ninit_retry_interval\n\n        \nInterval is seconds between attempts to create driver\n\n        \nInteger\n\n    \n\n    \n\n        \nretry_count\n\n        \nNumber of test-retrying in case of failure.  Default value 0 means that test would be performed only once\n\n        \nInteger\n\n    \n\n        \n\n        \nenable_l10n\n\n        \nEnable L10N feature\n\n        \nfalse, true\n\n    \n\n            \n\n        \nl10n_encoding\n\n        \nCharset for l10n feature\n\n        \nISO-8859-5, ISO-8859-6, UTF-8\n\n    \n\n    \n\n        \nenable_i18n\n\n        \nEnable i18n feature\n\n        \nfalse, true\n\n    \n\n        \n\n        \nthread_count\n\n        \nDefault number of threads to use when running tests in parallel.\n\n        \nfInteger\n\n    \n\n        \n\n        \ndata_provider_thread_count\n\n        \nDefault number of threads to use for data providers when running tests in parallel.\n\n        \nInteger\n\n    \n\n        \n\n        \ncore_log_level\n\n        \nLevel for Carina logging\n\n        \nALL, DEBUG, ERROR, WARN, FATAL, INFO, OFF, TRACE \n\n    \n\n        \n\n        \nlog_all_json\n\n        \nAPI response will be logged in JSON format\n\n        \ntrue, false\n\n    \n\n        \n\n        \ndate_format\n\n        \nDate format for DateUtils.class\n\n        \nHH:mm:ss dd/MM/yyyy, HH:mm MM/dd/yyyy\n\n    \n\n        \n\n        \ntime_format\n\n        \nDate format for DateUtils.class\n\n        \nHH:mm:ss.SSS, HH:mm a zzz\n\n    \n\n        \n\n        \ncrypto_key_path\n\n        \nPath to file with crypto key\n\n        \n./src/main/resources/crypto.key\n\n    \n\n        \n\n        \nsuite_name\n\n        \nSuite name for report and TestRail. If this parameter is NULL will be get from TestNG xml (parameter suite name) or _email.properties (title)\n\n        \nAdvanced Acceptance\n\n    \n\n    \n\n        \njira_updater\n\n        \nClass contains logic to update Jira. \nNote\n Custom updater have to implement DefaultJiraUpdater, by default methods do nothing\n\n        \nCustom class\n\n    \n\n    \n\n        \njira_url\n\n        \nUrl to Jira\n\n        \nhttps://yourclass.atlassian.net\n\n    \n\n        \n\n        \njira_user\n\n        \nJira user email\n\n        \nadmin@yourcompany.com\n\n    \n\n        \n\n        \njira_password\n\n        \nJira user password\n\n        \nadmin123456\n\n    \n\n        \n\n        \njira_suite_id\n\n        \nJira suit id (if you have one)\n\n        \nInteger\n\n    \n\n    \n\n        \njira_project\n\n        \nJira project id\n\n        \nInteger\n\n    \n\n        \n\n        \njira_create_new_ticket\n\n        \nIf feature is enabled after test failure new jira ticket will be created\n\n        \ntrue, false\n\n    \n\n    \n\n        \nvideo_recording\n\n        \nIf feature is test will be recorded\n\n        \ntrue, false\n\n    \n\n    \n\n        \ntestrail_url\n\n        \nUrl to TestRail\n\n        \nhttps:/yourcompany.testrail.net\n\n    \n\n    \n\n        \ntestrail_user\n\n        \nTestRail user email\n\n        \nadmin@yourcompany.com\n\n    \n\n        \n\n        \ntestrail_updater\n\n        \nClass contains logic to update TestRail. \nNote\n Custom updater have to implement EmptyTestRailUpdater, by default methods do nothing\n\n        \nCustom class\n\n    \n\n        \n\n        \ntestrail_milestone\n\n        \nMilestone to set on TestRail for run\n\n        \nsome-milestone\n\n    \n\n        \n\n        \ntestrail_assignee\n\n        \nUser asserneed for the suit\n\n        \nasignee_user@yuorcompany.com\n\n    \n\n        \n\n        \ns3_bucket_name\n\n        \nBucket name on S3 Amazon from which you suppose to download artifacts\n\n        \nsome bucket\n\n    \n\n        \n\n        \naccess_key_id\n\n        \nAcces key id for Amamzon S3. More info \nhere\n\n        \ngkhcvdgvceUYF67897hbjsbdc\n\n    \n\n        \n\n        \nsecret_key\n\n        \nSecret key for Amamzon S3. More info \nhere\n\n        \ngkhcvdgvceUYF67897hbjsbdc\n\n    \n\n        \n\n        \ns3_local_storage\n\n        \nDirectory for downloading artefacts\n\n        \n./s3\n\n    \n\n        \n\n        \ns3_screenshot_bucket_name\n\n        \nBucket name on S3 Amamzon for saving report screenshots\n\n        \nScreenshot bucket name\n\n    \n\n        \n\n        \ns3_save_screenshots\n\n        \nIf enabled screenshots would be saved on S3 Amamzon\n\n        \nfalse, true\n\n    \n\n        \n\n        \nhockeyapp_token\n\n        \nToken for authentication in Hockey App\n\n        \ngkhcvdgvceUYF67897hbjsbdc\n\n    \n\n        \n\n        \nhockeyapp_local_storage\n\n        \nDirectory for Hockey App artefacts\n\n        \n./hockeyapp\n\n    \n\n        \n\n        \nadd_new_localization\n\n        \nShould be set to 'true' if you want to create new localization files for required Locale.Otherwise there will be just localization checking\n\n        \nfalse, true\n\n    \n\n        \n\n        \nadd_new_localization_encoding\n\n        \nEncoding for new lokalization\n\n        \nutf-16, utf-32\n\n    \n\n        \n\n        \nadd_new_localization_path\n\n        \nPath where created localization properties should be saved. If null - they will be added to artifactory folder in report\n\n        \nutf-16, utf-32\n\n    \n\n        \n\n        \nadd_new_localization_property_name\n\n        \nPath where created localization properties should be saved. If null - they will be added to artifactory folder in report\n\n        \nBasic template for property name.\n\n    \n\n        \n\n        \ncucumber_tests\n\n        \nIf parametrs contains true Cucumber tests will be started\n\n        \ntrue, false\n\n    \n\n        \n\n        \ncucumber_tests_app_version\n\n        \nVersion of app using in Cucumber tests\n\n        \n2.013\n\n    \n\n        \n\n        \ncucumber_tests_name\n\n        \nCucucmber tests name\n\n        \ncucumber tests\n\n    \n\n        \n\n        \ncucumber_tests_results_image_resize\n\n        \nPercent of Scaling from default image. 100 - same size\n\n        \nInteger\n\n    \n\n        \n\n        \ncucumber_report_subfolder\n\n        \nSubfolder on Jenkins (jenkins_url/{someNumbersFr EveryRun}/ artifacts/CucumberReport/ {cucumber_report_subfolder})\n\n        \ncucumber-reports\n\n    \n\n        \n\n        \ncucumber_user_js_in_report\n\n        \nEnabled parameter help to get more beautiful reports\n\n        \ntrue, false\n\n    \n\n        \n\n        \ntls_keysecure_location\n\n        \nPath to directory with tls secure keys\n\n        \n./tls/keysecure\n\n    \n\n        \n\n        \nhealth_check_class\n\n        \nClass to execute helth checks\n\n        \nCustom class\n\n    \n\n        \n\n        \nhealth_check_methods\n\n        \nComma-separate list of methods of health_check_class to execute preliminary\n\n        \ndoThis, doThat\n\n    \n\n\n\nMost of the properties may be read in the following way:\n\n\nConfiguration.get(Parameter.URL) // returns string value\nConfiguration.getBoolean(Parameter.AUTO_SCREENSHOT) // returns boolean value\nConfiguration.getInt(Parameter.SMALL_SCREEN_WIDTH) // returns integer value\nConfiguration.getDouble(Parameter.BROWSER_VERSION) // returns double value\n\n\n\n\nEnvironment specific configuration\n\n\nIn some cases it is required to support multiple environments for testing. Let's assume we have STAG and PROD environments which have different application URLs. In this case we need to specify the following properties in _config.properties:\n\n\nenv=PROD\nSTAG.url=http://stag-app-server.com\nPROD.url=http://prod-app-server.com\n\n\n\n\nAnd get env-specific argument in test the following way:\n\n\nConfiguration.getEnvArg(\nurl\n)\n\n\n\n\nAs a result you switch between environments just changing env argument in _config.properties file.\n\n\nZafira\n configuration\n\n\nzafira.properties\n is used for Zafira QA reporting integration, here you should specify some values for proper integration:\n\n    \n\n        \nAttribute\n\n        \nMeaning\n\n        \nExample\n\n    \n\n    \n\n        \nzafira_enabled\n\n        \nRoot switch\n\n        \ntrue/false\n\n    \n\n    \n\n        \nzafira_service_url\n\n        \nWebservice URL\n\n        \nhttp://localhost:8080/zafira-ws\n\n    \n\n    \n\n        \nzafira_project\n\n        \nProject name (created in Zafira)\n\n        \nempty or any created\n\n    \n\n    \n\n        \nzafira_rerun_failures\n\n        \nRerun only failures\n\n        \ntrue/false\n\n    \n\n    \n\n        \nzafira_report_emails\n\n        \nList of emails for report\n\n        \nuser1@qps.com,user2@qps.com\n\n    \n\n    \n\n        \nzafira_configurator\n\n        \nConfigurator class (use default)\n\n        \ncom.qaprosoft.carina.core.foundation.report.ZafiraConfigurator", 
            "title": "Configuration"
        }, 
        {
            "location": "/configuration/#configuration-files", 
            "text": "There are multiple properties files located in src/main/resources:   api.properties  - API test endpoints reference  config.properties  - global test configuration  database.properties  - database connection properties  email.properties  - emailable reports config  testdata.properties  - test user credentials    All properties may be retrieved in test using R class:  R.API.get( GetUserMethods )\nR.CONFIG.get( browser )\nR.DATABASE.get( db.url )\nR.EMAIL.get( title )\nR.TESTDATA.get( user.email )  Default config properties can be obtained by  Configuration.get(Parameter.EXTRA_CAPABILITIES)  All project configuration properties are located in  _config.properties  file. In the table below we are providing description for most of the parameters: \n     \n         Attribute \n         Meaning \n         Example \n     \n     \n         url \n         Base application URL \n         http://qaprosoft.com \n     \n     \n         browser \n         Browser for testing \n         chrome / firefox / safari / iexplore \n     \n     \n         selenium_host \n         Selenium server host \n         http://localhost:4444/wd/hub \n     \n     \n         app_version \n         Application version/build number for reporting \n         1.2.5 \n     \n     \n         locale \n         Locale for using L10N feature. Enabled when enable_l10n=true \n         en_GB,de_DE,fr_FR \n     \n     \n         language \n         Language for i18n defature. Enabled when enable_i18n=true \n         en_GB,de_DE,fr_FR \n     \n     \n         implicit_timeout \n         Implicit timeout in seconds to wait for element \n         Integer \n     \n     \n         retry_interval \n         Timeout interval between calling HTML DOM for the element. Note:  in ms. For mobile automation specify number from 500-1500 range \n         Integer \n     \n     \n         auto_screenshot \n         Global switch for taking screenshots. When disabled only failures will be captured \n         Boolean \n     \n     \n         keep_all_screenshots \n         Keep screenshots artifacts even for passed tests. \n         \n     \n     \n         report_url \n         Direct HTTP link to Jenkins workspace report folder. Automatically specified by CI \n         http://localhost:8888/job /my_project/1/eTAF_Report \n     \n     \n         max_screen_history \n         Max number of reports in history \n         Integer \n     \n     \n         jira_url \n         JIRA base URL for direct links with bugs description \n         https://jira.carina.com/browse/ \n     \n     \n         email_list \n         Comma-separated list of emails for reports \n         u1@gmail.com,u2@gmail.com \n     \n     \n         sender_email \n         Email account for reports sending.  Note:  Gmail smtp settings are used by default. Update _email.properties to use your own SMTP server \n         carina.qareport@qaprosoft.com \n     \n     \n         sender_pswd \n         Email password for reports sending \n         pwd123 \n     \n     \n         env \n         Environment specific configuration. More about this  feature \n         STAG, PROD, DEMO \n     \n     \n         env_arg_resolver \n         This parametr is optional, if it isn't set default value will be used. In most cases  default value is enough \n         java class  \n     \n         \n         platform \n         Platform version for Selenium Grid \n         ANDROID,IOS,WINDOWS,MAC,LINUX \n     \n         \n         browser_version \n         The browser version, or the empty string if unknown for Selenium Grid \n         \"8.0\", \"52.1\" \n     \n         \n         driver_mode \n         Rule for defining WebDriver lifecycle. \n         method_mode / class_mode / suite_mode \n     \n     \n         driver_event_listeners \n         Comma-separated list of listeners. Listeners provide more logs from WebDriver and have to be instances of WebDriverEventListener \n         com.someCompane.core .EventListener \n     \n         \n         max_driver_count \n         Max number of drivers per thread \n         Integer \n     \n         \n         custom_capabilities \n         Name of propertie file with custom capabilities(key-value) \n         custom.properties \n     \n         \n         proxy_host \n         The hostname of the server \n         host.example.com \n     \n         \n         proxy_port \n         The port number \n         80 \n     \n         \n         proxy_protocols \n         Comma-separated list of internet protocols used to carry connection information from the source requesting the connection to the destination for which the connection was requested. \n         http, https, ftp, socks \n     \n         \n         browsermob_proxy \n         Boolean parameter which enable or disable set up of mobile proxy \n         true, false \n     \n         \n         browsermob_port \n         The port number for mobile browser (make sense only for local debugging) \n         Integer \n     \n         \n         proxy_set_to_system \n         Boolean parameter which enable or disable set up of proxy \n         true, false \n     \n         \n         failure_email_list \n         Comma-separated list of emails for failure reports \n         u1@mail.com,u2@mail.com \n     \n         \n         track_known_issues \n         Boolean parameter. If it is true and some Jira tickets assosiated with test in case of failure Jira info will be added to report \n         true,false \n     \n     \n         explicit_timeout \n         Timeout in seconds to wait for a certain condition to occur before proceeding further in the code \n         Integer \n     \n     \n         auto_download \n         Enabled parametr prevent download dialog and download file automatically. Feature currently avaliable for Chrome and FireFox \n         false, true \n     \n     \n         auto_download_apps \n         MIME types / Internet Media Types. Parameter is necessary only for configure auto downloading for FireFox \n         application/pdf, list of  values \n     \n     \n         project_report_directory \n         Path to folder where reports will be saved \n         ./reports/qa \n     \n     \n         big_screen_width \n         Sreenshots will be resized according this width if there own width is bigger \n         500, 1200, Integer \n     \n     \n         big_screen_height \n         Sreenshots will be resized according this height if there own height is bigger \n         500, 1200, Integer \n     \n         \n         small_screen_width \n         Thumbnails width \n         Integer \n     \n     \n         big_screen_height \n         Thumbnails height \n         Integer \n     \n     \n         big_screen_height \n         Thumbnails height \n         Integer \n     \n     \n         init_retry_count \n         Number of attempts to create driver.  Default value 0 means that it would be only 1 attempt \n         Integer \n     \n     \n         init_retry_interval \n         Interval is seconds between attempts to create driver \n         Integer \n     \n     \n         retry_count \n         Number of test-retrying in case of failure.  Default value 0 means that test would be performed only once \n         Integer \n     \n         \n         enable_l10n \n         Enable L10N feature \n         false, true \n     \n             \n         l10n_encoding \n         Charset for l10n feature \n         ISO-8859-5, ISO-8859-6, UTF-8 \n     \n     \n         enable_i18n \n         Enable i18n feature \n         false, true \n     \n         \n         thread_count \n         Default number of threads to use when running tests in parallel. \n         fInteger \n     \n         \n         data_provider_thread_count \n         Default number of threads to use for data providers when running tests in parallel. \n         Integer \n     \n         \n         core_log_level \n         Level for Carina logging \n         ALL, DEBUG, ERROR, WARN, FATAL, INFO, OFF, TRACE  \n     \n         \n         log_all_json \n         API response will be logged in JSON format \n         true, false \n     \n         \n         date_format \n         Date format for DateUtils.class \n         HH:mm:ss dd/MM/yyyy, HH:mm MM/dd/yyyy \n     \n         \n         time_format \n         Date format for DateUtils.class \n         HH:mm:ss.SSS, HH:mm a zzz \n     \n         \n         crypto_key_path \n         Path to file with crypto key \n         ./src/main/resources/crypto.key \n     \n         \n         suite_name \n         Suite name for report and TestRail. If this parameter is NULL will be get from TestNG xml (parameter suite name) or _email.properties (title) \n         Advanced Acceptance \n     \n     \n         jira_updater \n         Class contains logic to update Jira.  Note  Custom updater have to implement DefaultJiraUpdater, by default methods do nothing \n         Custom class \n     \n     \n         jira_url \n         Url to Jira \n         https://yourclass.atlassian.net \n     \n         \n         jira_user \n         Jira user email \n         admin@yourcompany.com \n     \n         \n         jira_password \n         Jira user password \n         admin123456 \n     \n         \n         jira_suite_id \n         Jira suit id (if you have one) \n         Integer \n     \n     \n         jira_project \n         Jira project id \n         Integer \n     \n         \n         jira_create_new_ticket \n         If feature is enabled after test failure new jira ticket will be created \n         true, false \n     \n     \n         video_recording \n         If feature is test will be recorded \n         true, false \n     \n     \n         testrail_url \n         Url to TestRail \n         https:/yourcompany.testrail.net \n     \n     \n         testrail_user \n         TestRail user email \n         admin@yourcompany.com \n     \n         \n         testrail_updater \n         Class contains logic to update TestRail.  Note  Custom updater have to implement EmptyTestRailUpdater, by default methods do nothing \n         Custom class \n     \n         \n         testrail_milestone \n         Milestone to set on TestRail for run \n         some-milestone \n     \n         \n         testrail_assignee \n         User asserneed for the suit \n         asignee_user@yuorcompany.com \n     \n         \n         s3_bucket_name \n         Bucket name on S3 Amazon from which you suppose to download artifacts \n         some bucket \n     \n         \n         access_key_id \n         Acces key id for Amamzon S3. More info  here \n         gkhcvdgvceUYF67897hbjsbdc \n     \n         \n         secret_key \n         Secret key for Amamzon S3. More info  here \n         gkhcvdgvceUYF67897hbjsbdc \n     \n         \n         s3_local_storage \n         Directory for downloading artefacts \n         ./s3 \n     \n         \n         s3_screenshot_bucket_name \n         Bucket name on S3 Amamzon for saving report screenshots \n         Screenshot bucket name \n     \n         \n         s3_save_screenshots \n         If enabled screenshots would be saved on S3 Amamzon \n         false, true \n     \n         \n         hockeyapp_token \n         Token for authentication in Hockey App \n         gkhcvdgvceUYF67897hbjsbdc \n     \n         \n         hockeyapp_local_storage \n         Directory for Hockey App artefacts \n         ./hockeyapp \n     \n         \n         add_new_localization \n         Should be set to 'true' if you want to create new localization files for required Locale.Otherwise there will be just localization checking \n         false, true \n     \n         \n         add_new_localization_encoding \n         Encoding for new lokalization \n         utf-16, utf-32 \n     \n         \n         add_new_localization_path \n         Path where created localization properties should be saved. If null - they will be added to artifactory folder in report \n         utf-16, utf-32 \n     \n         \n         add_new_localization_property_name \n         Path where created localization properties should be saved. If null - they will be added to artifactory folder in report \n         Basic template for property name. \n     \n         \n         cucumber_tests \n         If parametrs contains true Cucumber tests will be started \n         true, false \n     \n         \n         cucumber_tests_app_version \n         Version of app using in Cucumber tests \n         2.013 \n     \n         \n         cucumber_tests_name \n         Cucucmber tests name \n         cucumber tests \n     \n         \n         cucumber_tests_results_image_resize \n         Percent of Scaling from default image. 100 - same size \n         Integer \n     \n         \n         cucumber_report_subfolder \n         Subfolder on Jenkins (jenkins_url/{someNumbersFr EveryRun}/ artifacts/CucumberReport/ {cucumber_report_subfolder}) \n         cucumber-reports \n     \n         \n         cucumber_user_js_in_report \n         Enabled parameter help to get more beautiful reports \n         true, false \n     \n         \n         tls_keysecure_location \n         Path to directory with tls secure keys \n         ./tls/keysecure \n     \n         \n         health_check_class \n         Class to execute helth checks \n         Custom class \n     \n         \n         health_check_methods \n         Comma-separate list of methods of health_check_class to execute preliminary \n         doThis, doThat \n      \nMost of the properties may be read in the following way:  Configuration.get(Parameter.URL) // returns string value\nConfiguration.getBoolean(Parameter.AUTO_SCREENSHOT) // returns boolean value\nConfiguration.getInt(Parameter.SMALL_SCREEN_WIDTH) // returns integer value\nConfiguration.getDouble(Parameter.BROWSER_VERSION) // returns double value", 
            "title": "Configuration files"
        }, 
        {
            "location": "/configuration/#environment-specific-configuration", 
            "text": "In some cases it is required to support multiple environments for testing. Let's assume we have STAG and PROD environments which have different application URLs. In this case we need to specify the following properties in _config.properties:  env=PROD\nSTAG.url=http://stag-app-server.com\nPROD.url=http://prod-app-server.com  And get env-specific argument in test the following way:  Configuration.getEnvArg( url )  As a result you switch between environments just changing env argument in _config.properties file.", 
            "title": "Environment specific configuration"
        }, 
        {
            "location": "/configuration/#zafira-configuration", 
            "text": "zafira.properties  is used for Zafira QA reporting integration, here you should specify some values for proper integration: \n     \n         Attribute \n         Meaning \n         Example \n     \n     \n         zafira_enabled \n         Root switch \n         true/false \n     \n     \n         zafira_service_url \n         Webservice URL \n         http://localhost:8080/zafira-ws \n     \n     \n         zafira_project \n         Project name (created in Zafira) \n         empty or any created \n     \n     \n         zafira_rerun_failures \n         Rerun only failures \n         true/false \n     \n     \n         zafira_report_emails \n         List of emails for report \n         user1@qps.com,user2@qps.com \n     \n     \n         zafira_configurator \n         Configurator class (use default) \n         com.qaprosoft.carina.core.foundation.report.ZafiraConfigurator", 
            "title": "Zafira configuration"
        }, 
        {
            "location": "/execution/", 
            "text": "Selenium server\n\n\n\n\nBefore running any web test you have to start Selenium server locally or use remote Selenium server. You may download latest version of Selenium standalone server on \nofficial website\n along with browser binary for Chrome, Firefox, IE etc. For running test with Chrome browser you will need to download chromedriver and place along with selenium-standalone-server-X.jar and execute (make sure that you replace 'X' by current Selenium version):\n\n\njava -jar -Dwebdriver.chrome.driver=./chromedriver selenium-server-standalone-X.jar\n\n\n\n\nYou have another option for running \nSelenium in Docker\n, the easiest way to create docker-compose.yml:\n\n\n# To execute this docker-compose yml file use docker-compose -f \nfile_name\n up\n# Add the \n-d\n flag at the end for deattached execution\nversion: '2'\nservices:\n  firefox:\n    image: selenium/node-firefox:3.11.0-californium\n    volumes:\n      - /dev/shm:/dev/shm\n    depends_on:\n      - hub\n    environment:\n      HUB_HOST: hub\n\n  chrome:\n    image: selenium/node-chrome:3.11.0-californium\n    volumes:\n      - /dev/shm:/dev/shm\n    depends_on:\n      - hub\n    environment:\n      HUB_HOST: hub\n\n  hub:\n    image: selenium/hub:3.11.0-californium\n    ports:\n      - \n4444:4444\n\n\n\n\n\nNow you may start Selenium running the following command in terminal:\n\n\ndocker-compose up\n\n\n\n\nRunning tests\n\n\n\n\nThere are a several options to execute the test: you may run test suite from Eclipse IDE or initiate test execution from the console using Maven Surefire plugin built into Carina framework.\n\n\nTo run the test suite from Eclipse IDE, just select the required TestNG xml file: Right click \n Run As \n TestNG suite\n\n\n\n\nTo run the same test suite from the console, navigate to the test project root (where pom.xml is located) and execute the following command:\n\n\nmvn clean -Dsuite=api test", 
            "title": "Execution"
        }, 
        {
            "location": "/execution/#selenium-server", 
            "text": "Before running any web test you have to start Selenium server locally or use remote Selenium server. You may download latest version of Selenium standalone server on  official website  along with browser binary for Chrome, Firefox, IE etc. For running test with Chrome browser you will need to download chromedriver and place along with selenium-standalone-server-X.jar and execute (make sure that you replace 'X' by current Selenium version):  java -jar -Dwebdriver.chrome.driver=./chromedriver selenium-server-standalone-X.jar  You have another option for running  Selenium in Docker , the easiest way to create docker-compose.yml:  # To execute this docker-compose yml file use docker-compose -f  file_name  up\n# Add the  -d  flag at the end for deattached execution\nversion: '2'\nservices:\n  firefox:\n    image: selenium/node-firefox:3.11.0-californium\n    volumes:\n      - /dev/shm:/dev/shm\n    depends_on:\n      - hub\n    environment:\n      HUB_HOST: hub\n\n  chrome:\n    image: selenium/node-chrome:3.11.0-californium\n    volumes:\n      - /dev/shm:/dev/shm\n    depends_on:\n      - hub\n    environment:\n      HUB_HOST: hub\n\n  hub:\n    image: selenium/hub:3.11.0-californium\n    ports:\n      -  4444:4444   Now you may start Selenium running the following command in terminal:  docker-compose up", 
            "title": "Selenium server"
        }, 
        {
            "location": "/execution/#running-tests", 
            "text": "There are a several options to execute the test: you may run test suite from Eclipse IDE or initiate test execution from the console using Maven Surefire plugin built into Carina framework.  To run the test suite from Eclipse IDE, just select the required TestNG xml file: Right click   Run As   TestNG suite   To run the same test suite from the console, navigate to the test project root (where pom.xml is located) and execute the following command:  mvn clean -Dsuite=api test", 
            "title": "Running tests"
        }, 
        {
            "location": "/automation/web/", 
            "text": "Developing tests with Carina is very straightforward. If you are going to create Web UI tests, you need to go through the following steps:\n\n\n\n\n\n\nImplement page models with element locators\n\nIn page models, you list all the elements along with Selenium @FindBy annotation, specifying the locator of the HTML element. In constructor, you have to identify the absolute or relative page URL. Also, the page model may contain business logic methods that encapsulate complex user behavior.\n\n\n\n\n\n\n\nImplement test case that operates with page objects and performs validations\n\nTest cases themselves represent composition of page models, so all UI actions are essentially performed via page objects. Test scripts should contain some assertions and UI validation logic.\n\n\n\n\n\n\n\nCreate TestNG suite configuration that includes tests with appropriate test parameters\n\nTestNG xml suite descriptors contain test configurations, but also contain test grouping tools that allow creation of different suites: sanity, regression, etc.\n\n\n\n\n\n\n\nIn the table below we are providing description for most important WEB parameters:\n\n\n    \n\n        \nAttribute\n\n        \nMeaning\n\n                \nDefault value\n\n        \nExample\n\n    \n\n    \n\n        \nbrowser\n\n        \nBrowser for testing\n\n        \nchrome\n\n        \nchrome / firefox / safari / iexplore\n\n    \n\n    \n\n        \nselenium_host\n\n        \nSelenium server host\n\n        \n{must_override}\n\n        \nhttp://localhost:4444/wd/hub\n\n    \n\n    \n\n        \ndriver_mode\n\n        \nRule for defining WebDriver lifecycle. \n\n        \nmethod_mode\n\n        \nmethod_mode / class_mode / suite_mode", 
            "title": "Web automation"
        }, 
        {
            "location": "/automation/mobile/", 
            "text": "We could provide any Appium capabilty in \nconfig.properties\n file using capabilities.name=value format. In the table below we are providing description for the most popular mobile capabilities:\n\n\n\n    \n\n        \nAttribute\n\n        \nMeaning\n\n                \nDefault value\n\n        \nExample\n\n    \n\n        \n\n        \ncapabilities.deviceName\n\n        \nDevice name for report\n\n                \nn/a\n\n        \nSumsung_Galaxy_J5\n\n    \n\n        \n\n        \ncapabilities.deviceType\n\n        \nThe only custom carina capability to detmine type of device\n\n                \nn/a\n\n        \nphone/tablet/tv...\n\n    \n\n        \n\n        \ncapabilities.platformName\n\n        \nName of mobile platform\n\n                \nn/a\n\n        \nAndroid/iOS/AndroidTV/tvOS\n\n    \n\n        \n\n        \ncapabilities.platformVersion\n\n        \nVersion of mobile platform\n\n                \nn/a\n\n        \n6.0.1\n\n    \n\n        \n\n        \ncapabilities.automationName\n\n        \nName of programm using for automation (for Android 7+ use uiautomator2 instead of Appium)\n\n                \nn/a\n\n        \nAppium/uiautomator2/XCUITest\n\n    \n\n        \n\n        \ncapabilities.app\n\n        \nPath to application (apk/app/ipa) which is tested, Can be provided as a pattern from AWS S3 storage with automatic downloading\n\n                \nn/a\n\n        \nD:/application.apk, s3://qaprosoft.com/android/myapk.*-release.apk\n\n    \n\n        \n\n        \ncapabilities.newCommandTimeout\n\n        \nNew implicit timeout in seconds to wait for element for mobile automation\n\n                \nn/a\n\n        \n180\n\n    \n\n        \n\n        \ncapabilities.udid\n\n        \nUnique Device ID\n\n                \nn/a\n\n        \n759b543c\n\n    \n\n        \n\n        \ncapabilities.device\n\n        \nSpecifies a particular mobile device for the test environment on Browserstack\n\n                \nn/a\n\n        \nGalaxy Note 8, iPhone X\n\n    \n\n     \n\n        \ncapabilities.os_versione\n\n        \nVersion of OS for Browserstack\n\n                \nn/a\n\n        \nios, android\n\n    \n\n    \n\n        \ncapabilities.remoteURL\n\n        \nRemote URL for using Selenium Grid\n\n                \nn/a\n\n        \n 'http://localhost:4444/wd/hub'\n\n    \n\n        \n\n        \ncapabilities.appActivity\n\n        \nActivity name for the Android activity you want to launch from your package.\n\n                \nn/a\n\n        \ncom.amazon.mShop.HomeActivity\n\n    \n\n        \n\n        \ncapabilities.appPackage\n\n        \nJava package of the Android app you want to run\n\n                \nn/a\n\n        \nin.amazon.mShop.android.shopping\n\n    \n\n    \n\n        \ncapabilities.noSign\n\n        \nSkip checking and signing of app with debug keys, will work only with UiAutomator and not with selendroid, default false\n\n                \nn/a\n\n        \ntrue, false\n\n    \n\n    \n\n        \ncapabilities.autoGrantPermissions\n\n        \nHave Appium automatically determine which permissions your app requires and grant them to the app on install. Defaults to false\n\n                \nn/a\n\n        \ntrue, false\n\n    \n\n        \n\n        \nSkip the device unlock process. Defaults to false\n\n                \nn/a\n\n        \ntrue, false\n\n    \n\n\n\n\n\nFor Android:\n\n\n#=============== Android Mobile ======================#\ncapabilities.deviceName=Samsung_Galaxy_J5\ncapabilities.app=s3://qaprosoft.com/android/myapk.*-release.apk\ncapabilities.skipUnlock=true\ncapabilities.noSign=true\ncapabilities.automationName=uiautomator2\ncapabilities.newCommandTimeout=180\ncapabilities.platformName=ANDROID\ncapabilities.autoGrantPermissions=true\n#=====================================================#\n\n\n\n\nFor iOS:\n\n\n#=================== iOS Mobile ======================#\ncapabilities.autoAcceptAlerts=true\ncapabilities.app=/opt/apk/my-apk.app\ncapabilities.automationName=XCUITest\ncapabilities.newCommandTimeout=180\ncapabilities.platformName=IOS\n#=====================================================#", 
            "title": "Mobile automation"
        }, 
        {
            "location": "/automation/mobile/#for-android", 
            "text": "#=============== Android Mobile ======================#\ncapabilities.deviceName=Samsung_Galaxy_J5\ncapabilities.app=s3://qaprosoft.com/android/myapk.*-release.apk\ncapabilities.skipUnlock=true\ncapabilities.noSign=true\ncapabilities.automationName=uiautomator2\ncapabilities.newCommandTimeout=180\ncapabilities.platformName=ANDROID\ncapabilities.autoGrantPermissions=true\n#=====================================================#", 
            "title": "For Android:"
        }, 
        {
            "location": "/automation/mobile/#for-ios", 
            "text": "#=================== iOS Mobile ======================#\ncapabilities.autoAcceptAlerts=true\ncapabilities.app=/opt/apk/my-apk.app\ncapabilities.automationName=XCUITest\ncapabilities.newCommandTimeout=180\ncapabilities.platformName=IOS\n#=====================================================#", 
            "title": "For iOS:"
        }, 
        {
            "location": "/automation/api/", 
            "text": "Rest API testing is a vital part of integration testing process, it may be used separately or in complex with web, mobile or DB testing. General process may be described by the following steps:\n\n\n\n\nCompile HTTP request with required meta data\n\n\nSend prepared data to required server endpoint\n\n\nValidate HTTP status and response data\n\n\nExtract some response data for the next requests\n\n\n\n\nSchema below demonstrates the sequence:\n\n\n\nFrom that perspective we decided to use the following instruments:\n\n\n\n\nRest-assured - \"Testing and validation of REST services in Java is harder than in dynamic languages such as Ruby and Groovy. REST\nAssured brings the simplicity of using these languages into the Java domain.\"\n\n\nFreemarker - \"Apache FreeMarker is a template engine: a Java library to generate text output (HTML web pages, e-mails, configuration\nfiles, source code, etc.) based on templates and changing data.\"", 
            "title": "API automation"
        }, 
        {
            "location": "/dataproviders/", 
            "text": "Dataproviders\n\n\nCarina test framework provides possibility to write all tests with data providers in one place include parametrization using external XLS/ XLSX/ CSV spreadsheets, TestNG \n@DataProvider\n and \n@Parameters\n annotations.\n\n\nFirst of all you need to declare test class that extends \nAbstractTest.java\n and define test suite in xml document for it.\nAfter that you can specify data providers tests as follows.\n\n\nXLS / XLSX / CSV data provider parametrization\n\n\nFor XLS/ XLSX/ CSV spreadsheets look at the following code snippet:\n\n\n@Test(dataProvider = \nDataProvider\n, description = \nyour_description\n)\n    @MethodOwner(owner=\nyour_name\n)\n    @XlsDataSourceParameters(path = \nxls/demo.xlsx\n, sheet = \nCalculator\n, dsUid = \nTUID\n, dsArgs = \na,b,c\n)\n    public void testSumOperation(String a, String b, String c)\n    {\n        int actual = Integer.valueOf(a) + Integer.valueOf(b);\n        int expected = Integer.valueOf(c);\n        Assert.assertEquals(actual, expected, \nInvalid sum result!\n);\n    }\n\n\n\n\n\nThis test uses XLS/ XLSX/ CSV files as data sourse. Every row in a spreadsheet is a set of arguments for a test. You should specify the \ndataProvider\n parameter for TestNG annotation \n@Test\n . Carina test framework initially defines several data providers methods in \nAbstractTest.java\n, which you've extended earlier:\n\n\n\n\n\n\ncreateData method (data provider name = \"DataProvider\") for common usecases\n\n\n\n\n\n\ncreateDataSingeThread method (data provider name = \"SingleDataProvider\") for single-thread execution.\n\n\n\n\n\n\nTo specify XLS/ XLSX/ CSV spreadsheets for test you should declare \n@XlsDataSourceParameters\n annotaion and define its parameters:\n\n\n\n\npath - file path located in src/test/resources\n\n\nsheet - sheet name\n\n\ndsUid - data-source unique identifier\n\n\ndsArgs - column names from sheet\n\n\n\n\nHere you can look at the spreadsheet as a data provider example for your further tests:\n\n\n\n\nIn TUID column you shoud specify your UID. In further columns you can specify arguments for a test and their values in lower rows. They will be used as parameters in \n@XlsDataSourceParameters\n. In this example values of a,b,c arguments were defined in 3 sets of values with different TUID.\n\n\nTestNG data provider parametrization\n\n\nNext lets take a look at widely used TestNG Data Provider parametrization. In this case there are common rules for writing this kind of tests:\n\n\n\n\ncreate data-provider method that returns \nObject[][]\n and set DataProvider annotation.\n\n\nspecify data-provider name in \n@Test\n annotation\n\n\n\n\nExample:\n\n\n@Test(dataProvider = \nDP1\n, description = \nyour_description\n)\n    @MethodOwner(owner=\nyour_name\n)\n    public void testMuliplyOperation(int a, int b, int c)\n    {\n        int actual = a * b;\n        int expected = c;\n        Assert.assertEquals(actual, expected, \nInvalid sum result!\n);\n    }\n\n    @DataProvider(parallel = false, name = \nDP1\n)\n    public static Object[][] dataprovider()\n    {\n        return new Object[][]\n        {\n                { 2, 3, 6 },\n                { 6, 6, 36 },\n                { 5, 8, 40 } };\n    }\n\n\n\n\n\nBesides you can use TestNG annotation \n@Parameters\n for listig all parameter names as in the following code snippet:\n\n\n@Test(description = \nyour_description\n)\n    @MethodOwner(owner=\nyour_name\n)\n    @Parameters(\n    { \na\n, \nb\n, \nc\n })\n    public void testSubstractOperation(int a, int b, int c)\n    {\n        int actual = Integer.valueOf(a) - Integer.valueOf(b);\n        int expected = Integer.valueOf(c);\n        Assert.assertEquals(actual, expected, \nInvalid substract result!\n);\n    }\n\n\n\n\nAll of these tests can be consolidated under single java class as it's shown in our \ndemo\n of Carina test framework, where you can find \nDataprovidersSampleTest.java", 
            "title": "Dataproviders"
        }, 
        {
            "location": "/dataproviders/#dataproviders", 
            "text": "Carina test framework provides possibility to write all tests with data providers in one place include parametrization using external XLS/ XLSX/ CSV spreadsheets, TestNG  @DataProvider  and  @Parameters  annotations.  First of all you need to declare test class that extends  AbstractTest.java  and define test suite in xml document for it.\nAfter that you can specify data providers tests as follows.", 
            "title": "Dataproviders"
        }, 
        {
            "location": "/dataproviders/#xls-xlsx-csv-data-provider-parametrization", 
            "text": "For XLS/ XLSX/ CSV spreadsheets look at the following code snippet:  @Test(dataProvider =  DataProvider , description =  your_description )\n    @MethodOwner(owner= your_name )\n    @XlsDataSourceParameters(path =  xls/demo.xlsx , sheet =  Calculator , dsUid =  TUID , dsArgs =  a,b,c )\n    public void testSumOperation(String a, String b, String c)\n    {\n        int actual = Integer.valueOf(a) + Integer.valueOf(b);\n        int expected = Integer.valueOf(c);\n        Assert.assertEquals(actual, expected,  Invalid sum result! );\n    }  This test uses XLS/ XLSX/ CSV files as data sourse. Every row in a spreadsheet is a set of arguments for a test. You should specify the  dataProvider  parameter for TestNG annotation  @Test  . Carina test framework initially defines several data providers methods in  AbstractTest.java , which you've extended earlier:    createData method (data provider name = \"DataProvider\") for common usecases    createDataSingeThread method (data provider name = \"SingleDataProvider\") for single-thread execution.    To specify XLS/ XLSX/ CSV spreadsheets for test you should declare  @XlsDataSourceParameters  annotaion and define its parameters:   path - file path located in src/test/resources  sheet - sheet name  dsUid - data-source unique identifier  dsArgs - column names from sheet   Here you can look at the spreadsheet as a data provider example for your further tests:   In TUID column you shoud specify your UID. In further columns you can specify arguments for a test and their values in lower rows. They will be used as parameters in  @XlsDataSourceParameters . In this example values of a,b,c arguments were defined in 3 sets of values with different TUID.", 
            "title": "XLS / XLSX / CSV data provider parametrization"
        }, 
        {
            "location": "/dataproviders/#testng-data-provider-parametrization", 
            "text": "Next lets take a look at widely used TestNG Data Provider parametrization. In this case there are common rules for writing this kind of tests:   create data-provider method that returns  Object[][]  and set DataProvider annotation.  specify data-provider name in  @Test  annotation   Example:  @Test(dataProvider =  DP1 , description =  your_description )\n    @MethodOwner(owner= your_name )\n    public void testMuliplyOperation(int a, int b, int c)\n    {\n        int actual = a * b;\n        int expected = c;\n        Assert.assertEquals(actual, expected,  Invalid sum result! );\n    }\n\n    @DataProvider(parallel = false, name =  DP1 )\n    public static Object[][] dataprovider()\n    {\n        return new Object[][]\n        {\n                { 2, 3, 6 },\n                { 6, 6, 36 },\n                { 5, 8, 40 } };\n    }  Besides you can use TestNG annotation  @Parameters  for listig all parameter names as in the following code snippet:  @Test(description =  your_description )\n    @MethodOwner(owner= your_name )\n    @Parameters(\n    {  a ,  b ,  c  })\n    public void testSubstractOperation(int a, int b, int c)\n    {\n        int actual = Integer.valueOf(a) - Integer.valueOf(b);\n        int expected = Integer.valueOf(c);\n        Assert.assertEquals(actual, expected,  Invalid substract result! );\n    }  All of these tests can be consolidated under single java class as it's shown in our  demo  of Carina test framework, where you can find  DataprovidersSampleTest.java", 
            "title": "TestNG data provider parametrization"
        }, 
        {
            "location": "/security/", 
            "text": "Security functionality in the Carina framework is required for sensitive data that should be hidden in test configurations and logging. It uses a symmetric key encryption algorithm for security implementation, which means that anyone may encrypt/decrypt the data in the same way, using the same key. In the Carina framework, AES encryption is used by default with a 128-bit security key.\n\n\n\n\nAnyone may generate their own security key and encrypt the data using that key, so that decrypted valid data may be used in the test only if the valid key is specified in test configuration. Also, one may use the default common key located in the test resources, giving access to all other users for secured data decryption.\n\n\nSecured data preparation\n\n\nFor secured data preparation, we implemented a special tool that helps to generate crypto keys and encrypt/decrypt test data files. Here is a usage tip:\n\n\ncom.qaprosoft.carina.core.foundation.crypto.CryptoConsole -generate -key_file \nfile_path_to_save_key\n\ncom.qaprosoft.carina.core.foundation.crypto.CryptoConsole -encrypt -string \nstring_to_encrypt\n -key_file \nkey_file_path\n\ncom.qaprosoft.carina.core.foundation.crypto.CryptoConsole -decrypt -string \nstring_to_decrypt\n -key_file \nkey_file_path\n\ncom.qaprosoft.carina.core.foundation.crypto.CryptoConsole -encrypt -file \ncsv_file_to_encrypt\n -key_file \nkey_file_path\n\ncom.qaprosoft.carina.core.foundation.crypto.CryptoConsole -decrypt -file \ncsv_file_to_decrypt\n -key_file \nkey_file_path\n\n\n\n\n\nTo generate an individual crypto key:\n\n\n\n\nGo to \"Run configuration\" in Eclipse\n\n\nCreate new Java application configuration selecting project and main class \ncom.qaprosoft.cariana.core.foundation.crypto.CryptoConsole\n:\n\n\n\nSet arguments\n\n\n\nPress Apply and then Run\n\n\nCrypto key will be generated:\n\n\n\n\n\nTo prepare test data file with secured data:\n\n\n\n\nPrepare input file  using  pattern {crypt:str_to_encrypt} for secured values\n\n\n\nPrepare input file  using  pattern {crypt:str_to_encrypt} for secured values\nGo to \u201cRun configuration\u201d, navigate to arguments tab and execute encryption command specifying key path and input file:\n\n\n\nFile with encrypted data will be generated:\n\n\n\nTo encrypt single string use the following config:\n\n\n\nEncrypted string will be shown in console:\n\n\n\nTo decrypt encrypted file execute:\n\n\n\nDecrypted file will be generated:\n\n\n\n\n\nSecured data usage\n\n\nYou may use encrypted values, both in test configuration and test data files; pay attention to the fact that there is no explicit before test listener for data decryption, so there is no way to find out later in the test if the data is sensitive or not. All the decryption logic is located in WebDriverHelper that wraps Selenium WebDriver methods for interaction with UI and encapsulates action logging logic. Every method that receives text tests if text contains {crypt:...} pattern and if it does, decrypts it and passes it to UI- logging and screenshots are populated with hidden characters:", 
            "title": "Security"
        }, 
        {
            "location": "/security/#secured-data-preparation", 
            "text": "For secured data preparation, we implemented a special tool that helps to generate crypto keys and encrypt/decrypt test data files. Here is a usage tip:  com.qaprosoft.carina.core.foundation.crypto.CryptoConsole -generate -key_file  file_path_to_save_key \ncom.qaprosoft.carina.core.foundation.crypto.CryptoConsole -encrypt -string  string_to_encrypt  -key_file  key_file_path \ncom.qaprosoft.carina.core.foundation.crypto.CryptoConsole -decrypt -string  string_to_decrypt  -key_file  key_file_path \ncom.qaprosoft.carina.core.foundation.crypto.CryptoConsole -encrypt -file  csv_file_to_encrypt  -key_file  key_file_path \ncom.qaprosoft.carina.core.foundation.crypto.CryptoConsole -decrypt -file  csv_file_to_decrypt  -key_file  key_file_path   To generate an individual crypto key:   Go to \"Run configuration\" in Eclipse  Create new Java application configuration selecting project and main class  com.qaprosoft.cariana.core.foundation.crypto.CryptoConsole :  Set arguments  Press Apply and then Run  Crypto key will be generated:   To prepare test data file with secured data:   Prepare input file  using  pattern {crypt:str_to_encrypt} for secured values  Prepare input file  using  pattern {crypt:str_to_encrypt} for secured values\nGo to \u201cRun configuration\u201d, navigate to arguments tab and execute encryption command specifying key path and input file:  File with encrypted data will be generated:  To encrypt single string use the following config:  Encrypted string will be shown in console:  To decrypt encrypted file execute:  Decrypted file will be generated:", 
            "title": "Secured data preparation"
        }, 
        {
            "location": "/security/#secured-data-usage", 
            "text": "You may use encrypted values, both in test configuration and test data files; pay attention to the fact that there is no explicit before test listener for data decryption, so there is no way to find out later in the test if the data is sensitive or not. All the decryption logic is located in WebDriverHelper that wraps Selenium WebDriver methods for interaction with UI and encapsulates action logging logic. Every method that receives text tests if text contains {crypt:...} pattern and if it does, decrypts it and passes it to UI- logging and screenshots are populated with hidden characters:", 
            "title": "Secured data usage"
        }, 
        {
            "location": "/contribution/", 
            "text": "1) \nFork repository\n \nhttps://github.com/qaprosoft/carina\n to your own user.\n\n\n2) \nClone your fork to your local machine\n:\n\n\ngit clone git@github.com:your_fork_url/carina.git\n\n\n3) \ngit remote add origin \nyour_fork_url\n (can be already added)\n\n\n4) \ngit fetch origin\n\n\n5) \ngit remote add upstream git@github.com:qaprosoft/carina.git\n\n\n6) \ngit fetch upstream\n\n\n7) \ngit checkout -b work_local_branch upstream/master\n\n\nAnd then after adding files (\ngit add\n ...) use \ngit commit\n (add description) and then\npush\n:\n\n\ngit push origin work_local_branch:work_remote_branch\n\n\n\nAnd on \nhttps://github.com/qaprosoft/carina\n you will see possibility to \"Compare \n Pull Request\"", 
            "title": "Contribution"
        }, 
        {
            "location": "/releases/", 
            "text": "Release notes", 
            "title": "Release notes"
        }, 
        {
            "location": "/releases/#release-notes", 
            "text": "", 
            "title": "Release notes"
        }
    ]
}