{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Carina is a Java-based test automation framework that unites all testing layers: Mobile applications (web, native, hybrid), WEB applications, REST services, Databases. TRY DEMO PROJECT NOW Carina framework is built on top of most popular open-source solutions like Selenium, Appium, TestNG allowing to reduce dependence on specific technology stack. Carina supports all popular browsers (IE, Safari, Chrome, Firefox) and mobile devices (iOS/Android). Special feature for mobile domain: it reuses test automation code between IOS/Android up to 70-80%. As far as our framework is built in Java, it is cross-platform. Tests may be easily executed both on Unix or Windows OS. All you need is JDK 8 installed. Framework supports different types of databases - both relational and nonrelational (MySQL, SQL Server, Oracle, PostgreSQL), providing amazing experience of DAO layer implementation using MyBatis ORM framework. API testing is based on Freemarker template engine. It enables great flexibility in generating REST requests and responses are dynamically changed by incoming arguments. Carina is fully integrated into QPS-Infra that helps to setup production-ready environment for running Mobile, Web and API tests. Feel free to ask any questions if you are going use it in your company.","title":"Overview"},{"location":"configuration/","text":"Configuration files There are multiple properties files located in src/main/resources: api.properties - API test endpoints reference config.properties - global test configuration database.properties - database connection properties email.properties - emailable reports config testdata.properties - test user credentials All properties may be retrieved in test using R class: R.API.get( GetUserMethods ) R.CONFIG.get( browser ) R.DATABASE.get( db.url ) R.EMAIL.get( title ) R.TESTDATA.get( user.email ) Default config properties can be obtained by Configuration.get(Parameter.BROWSER) All project configuration properties are located in _config.properties file. In the table below we are providing description for most of the parameters: Attribute Meaning Example url Base application URL http://qaprosoft.com browser Browser for testing chrome / firefox / safari / iexplore selenium_host Selenium server host http://localhost:4444/wd/hub app_version Application version/build number for reporting 1.2.5 locale Locale for using L10N feature. Enabled when enable_l10n=true en_GB,de_DE,fr_FR language Language for i18n defature. Enabled when enable_i18n=true en_GB,de_DE,fr_FR retry_interval Timeout interval between calling HTML DOM for the element. Note: in ms. For mobile automation specify number from 500-1500 range Integer auto_screenshot Global switch for taking screenshots. When disabled only failures will be captured Boolean report_url Direct HTTP link to Jenkins workspace report folder. Automatically specified by CI http://localhost:8888/job /my_project/1/eTAF_Report max_screen_history Max number of reports in history Integer jira_url JIRA base URL for direct links with bugs description https://jira.carina.com/browse/ email_list Comma-separated list of emails for reports u1@gmail.com,u2@gmail.com sender_email Email account for reports sending. Note: Gmail smtp settings are used by default. Update _email.properties to use your own SMTP server carina.qareport@qaprosoft.com sender_pswd Email password for reports sending pwd123 env Environment specific configuration. More about this feature STAG, PROD, DEMO env_arg_resolver This parametr is optional, if it isn't set default value will be used. In most cases default value is enough java class platform Platform version for Selenium Grid ANDROID,IOS,WINDOWS,MAC,LINUX browser_version The browser version, or the empty string if unknown for Selenium Grid \"8.0\", \"52.1\" browser_language Browser language or nothing to use default English version. Note: Only applicable for Chrome and Firefox! \"es\", \"fr\" driver_mode Rule for defining WebDriver lifecycle. method_mode / class_mode / suite_mode driver_event_listeners Comma-separated list of listeners. Listeners provide more logs from WebDriver and have to be instances of WebDriverEventListener com.someCompane.core.EventListener max_driver_count Max number of drivers per thread Integer custom_capabilities Name of propertie file with custom capabilities(key-value) custom.properties proxy_host The hostname of the server host.example.com proxy_port The port number 80 proxy_protocols Comma-separated list of internet protocols used to carry connection information from the source requesting the connection to the destination for which the connection was requested. http, https, ftp, socks browsermob_proxy Boolean parameter which enable or disable automatic BrowserMob proxy launch true, false browsermob_port The port number for BrowserMob proxy (if nothing or 0 specified then any free port will be reused) Integer proxy_set_to_system Boolean parameter which enable or disable set up of proxy true, false failure_email_list Comma-separated list of emails for failure reports u1@mail.com,u2@mail.com track_known_issues Boolean parameter. If it is true and some Jira tickets assosiated with test in case of failure Jira info will be added to report true,false explicit_timeout Timeout in seconds to wait for a certain condition to occur before proceeding further in the code Integer auto_download Enabled parametr prevent download dialog and download file automatically. Feature currently avaliable for Chrome and FireFox false, true auto_download_apps MIME types / Internet Media Types. Parameter is necessary only for configure auto downloading for FireFox application/pdf, list of values project_report_directory Path to folder where reports will be saved ./reports/qa big_screen_width Sreenshots will be resized according this width if there own width is bigger 500, 1200, Integer big_screen_height Sreenshots will be resized according this height if there own height is bigger 500, 1200, Integer small_screen_width Thumbnails width Integer big_screen_height Thumbnails height Integer big_screen_height Thumbnails height Integer init_retry_count Number of attempts to create driver. Default value 0 means that it would be only 1 attempt Integer init_retry_interval Interval is seconds between attempts to create driver Integer retry_count Number of test-retrying in case of failure. Default value 0 means that test would be performed only once Integer enable_l10n Enable L10N feature false, true l10n_encoding Charset for l10n feature ISO-8859-5, ISO-8859-6, UTF-8 enable_i18n Enable i18n feature false, true thread_count Default number of threads to use when running tests in parallel. fInteger data_provider_thread_count Default number of threads to use for data providers when running tests in parallel. Integer core_log_level Level for Carina logging ALL, DEBUG, ERROR, WARN, FATAL, INFO, OFF, TRACE core_log_packages Comma separated list of core packages where you want to redefine log level com.qaprosoft.carina.core, ZafiraConfigurator etc log_all_json API response will be logged in JSON format true, false date_format Date format for DateUtils.class HH:mm:ss dd/MM/yyyy, HH:mm MM/dd/yyyy time_format Date format for DateUtils.class HH:mm:ss.SSS, HH:mm a zzz crypto_key_path Path to file with crypto key ./src/main/resources/crypto.key suite_name Suite name for report and TestRail. If this parameter is NULL will be get from TestNG xml (parameter suite name) or _email.properties (title) Advanced Acceptance jira_updater Class contains logic to update Jira. Note Custom updater have to implement DefaultJiraUpdater, by default methods do nothing Custom class jira_url Url to Jira https://yourclass.atlassian.net jira_user Jira user email admin@yourcompany.com jira_password Jira user password admin123456 jira_suite_id Jira suit id (if you have one) Integer jira_project Jira project id Integer jira_create_new_ticket If feature is enabled after test failure new jira ticket will be created true, false optimize_video_recording Enable video recording only for the final retry attempt true, false testrail_milestone Milestone to set on TestRail for run some-milestone testrail_assignee User asserneed for the suit asignee_user@yuorcompany.com access_key_id Acces key id for Amamzon S3. More info here gkhcvdgvceUYF67897hbjsbdc secret_key Secret key for Amamzon S3. More info here gkhcvdgvceUYF67897hbjsbdc s3_local_storage Directory for downloading artefacts ./s3 hockeyapp_token Token for authentication in Hockey App gkhcvdgvceUYF67897hbjsbdc hockeyapp_local_storage Directory for Hockey App artefacts ./hockeyapp add_new_localization Should be set to 'true' if you want to create new localization files for required Locale.Otherwise there will be just localization checking false, true add_new_localization_encoding Encoding for new lokalization utf-16, utf-32 add_new_localization_path Path where created localization properties should be saved. If null - they will be added to artifactory folder in report utf-16, utf-32 add_new_localization_property_name Path where created localization properties should be saved. If null - they will be added to artifactory folder in report Basic template for property name. tls_keysecure_location Path to directory with tls secure keys ./tls/keysecure health_check_class Class to execute helth checks Custom class health_check_methods Comma-separate list of methods of health_check_class to execute preliminary doThis, doThat Most of the properties may be read in the following way: Configuration.get(Parameter.URL) // returns string value Configuration.getBoolean(Parameter.AUTO_SCREENSHOT) // returns boolean value Configuration.getInt(Parameter.SMALL_SCREEN_WIDTH) // returns integer value Configuration.getDouble(Parameter.BROWSER_VERSION) // returns double value Environment specific configuration In some cases it is required to support multiple environments for testing. Let's assume we have STAG and PROD environments which have different application URLs. In this case we need to specify the following properties in _config.properties: env=PROD STAG.url=http://stag-app-server.com PROD.url=http://prod-app-server.com And get env-specific argument in test the following way: Configuration.getEnvArg( url ) As a result you switch between environments just changing env argument in _config.properties file. Zafira configuration zafira.properties is used for Zafira QA reporting integration, here you should specify some values for proper integration: Attribute Meaning Example zafira_enabled Root switch true/false zafira_service_url Webservice URL http://localhost:8080/zafira-ws zafira_project Project name (created in Zafira) empty or any created zafira_rerun_failures Rerun only failures true/false zafira_report_emails List of emails for report user1@qps.com,user2@qps.com zafira_configurator Configurator class (use default) com.qaprosoft.carina.core.foundation.report.ZafiraConfigurator","title":"Configuration"},{"location":"configuration/#configuration-files","text":"There are multiple properties files located in src/main/resources: api.properties - API test endpoints reference config.properties - global test configuration database.properties - database connection properties email.properties - emailable reports config testdata.properties - test user credentials All properties may be retrieved in test using R class: R.API.get( GetUserMethods ) R.CONFIG.get( browser ) R.DATABASE.get( db.url ) R.EMAIL.get( title ) R.TESTDATA.get( user.email ) Default config properties can be obtained by Configuration.get(Parameter.BROWSER) All project configuration properties are located in _config.properties file. In the table below we are providing description for most of the parameters: Attribute Meaning Example url Base application URL http://qaprosoft.com browser Browser for testing chrome / firefox / safari / iexplore selenium_host Selenium server host http://localhost:4444/wd/hub app_version Application version/build number for reporting 1.2.5 locale Locale for using L10N feature. Enabled when enable_l10n=true en_GB,de_DE,fr_FR language Language for i18n defature. Enabled when enable_i18n=true en_GB,de_DE,fr_FR retry_interval Timeout interval between calling HTML DOM for the element. Note: in ms. For mobile automation specify number from 500-1500 range Integer auto_screenshot Global switch for taking screenshots. When disabled only failures will be captured Boolean report_url Direct HTTP link to Jenkins workspace report folder. Automatically specified by CI http://localhost:8888/job /my_project/1/eTAF_Report max_screen_history Max number of reports in history Integer jira_url JIRA base URL for direct links with bugs description https://jira.carina.com/browse/ email_list Comma-separated list of emails for reports u1@gmail.com,u2@gmail.com sender_email Email account for reports sending. Note: Gmail smtp settings are used by default. Update _email.properties to use your own SMTP server carina.qareport@qaprosoft.com sender_pswd Email password for reports sending pwd123 env Environment specific configuration. More about this feature STAG, PROD, DEMO env_arg_resolver This parametr is optional, if it isn't set default value will be used. In most cases default value is enough java class platform Platform version for Selenium Grid ANDROID,IOS,WINDOWS,MAC,LINUX browser_version The browser version, or the empty string if unknown for Selenium Grid \"8.0\", \"52.1\" browser_language Browser language or nothing to use default English version. Note: Only applicable for Chrome and Firefox! \"es\", \"fr\" driver_mode Rule for defining WebDriver lifecycle. method_mode / class_mode / suite_mode driver_event_listeners Comma-separated list of listeners. Listeners provide more logs from WebDriver and have to be instances of WebDriverEventListener com.someCompane.core.EventListener max_driver_count Max number of drivers per thread Integer custom_capabilities Name of propertie file with custom capabilities(key-value) custom.properties proxy_host The hostname of the server host.example.com proxy_port The port number 80 proxy_protocols Comma-separated list of internet protocols used to carry connection information from the source requesting the connection to the destination for which the connection was requested. http, https, ftp, socks browsermob_proxy Boolean parameter which enable or disable automatic BrowserMob proxy launch true, false browsermob_port The port number for BrowserMob proxy (if nothing or 0 specified then any free port will be reused) Integer proxy_set_to_system Boolean parameter which enable or disable set up of proxy true, false failure_email_list Comma-separated list of emails for failure reports u1@mail.com,u2@mail.com track_known_issues Boolean parameter. If it is true and some Jira tickets assosiated with test in case of failure Jira info will be added to report true,false explicit_timeout Timeout in seconds to wait for a certain condition to occur before proceeding further in the code Integer auto_download Enabled parametr prevent download dialog and download file automatically. Feature currently avaliable for Chrome and FireFox false, true auto_download_apps MIME types / Internet Media Types. Parameter is necessary only for configure auto downloading for FireFox application/pdf, list of values project_report_directory Path to folder where reports will be saved ./reports/qa big_screen_width Sreenshots will be resized according this width if there own width is bigger 500, 1200, Integer big_screen_height Sreenshots will be resized according this height if there own height is bigger 500, 1200, Integer small_screen_width Thumbnails width Integer big_screen_height Thumbnails height Integer big_screen_height Thumbnails height Integer init_retry_count Number of attempts to create driver. Default value 0 means that it would be only 1 attempt Integer init_retry_interval Interval is seconds between attempts to create driver Integer retry_count Number of test-retrying in case of failure. Default value 0 means that test would be performed only once Integer enable_l10n Enable L10N feature false, true l10n_encoding Charset for l10n feature ISO-8859-5, ISO-8859-6, UTF-8 enable_i18n Enable i18n feature false, true thread_count Default number of threads to use when running tests in parallel. fInteger data_provider_thread_count Default number of threads to use for data providers when running tests in parallel. Integer core_log_level Level for Carina logging ALL, DEBUG, ERROR, WARN, FATAL, INFO, OFF, TRACE core_log_packages Comma separated list of core packages where you want to redefine log level com.qaprosoft.carina.core, ZafiraConfigurator etc log_all_json API response will be logged in JSON format true, false date_format Date format for DateUtils.class HH:mm:ss dd/MM/yyyy, HH:mm MM/dd/yyyy time_format Date format for DateUtils.class HH:mm:ss.SSS, HH:mm a zzz crypto_key_path Path to file with crypto key ./src/main/resources/crypto.key suite_name Suite name for report and TestRail. If this parameter is NULL will be get from TestNG xml (parameter suite name) or _email.properties (title) Advanced Acceptance jira_updater Class contains logic to update Jira. Note Custom updater have to implement DefaultJiraUpdater, by default methods do nothing Custom class jira_url Url to Jira https://yourclass.atlassian.net jira_user Jira user email admin@yourcompany.com jira_password Jira user password admin123456 jira_suite_id Jira suit id (if you have one) Integer jira_project Jira project id Integer jira_create_new_ticket If feature is enabled after test failure new jira ticket will be created true, false optimize_video_recording Enable video recording only for the final retry attempt true, false testrail_milestone Milestone to set on TestRail for run some-milestone testrail_assignee User asserneed for the suit asignee_user@yuorcompany.com access_key_id Acces key id for Amamzon S3. More info here gkhcvdgvceUYF67897hbjsbdc secret_key Secret key for Amamzon S3. More info here gkhcvdgvceUYF67897hbjsbdc s3_local_storage Directory for downloading artefacts ./s3 hockeyapp_token Token for authentication in Hockey App gkhcvdgvceUYF67897hbjsbdc hockeyapp_local_storage Directory for Hockey App artefacts ./hockeyapp add_new_localization Should be set to 'true' if you want to create new localization files for required Locale.Otherwise there will be just localization checking false, true add_new_localization_encoding Encoding for new lokalization utf-16, utf-32 add_new_localization_path Path where created localization properties should be saved. If null - they will be added to artifactory folder in report utf-16, utf-32 add_new_localization_property_name Path where created localization properties should be saved. If null - they will be added to artifactory folder in report Basic template for property name. tls_keysecure_location Path to directory with tls secure keys ./tls/keysecure health_check_class Class to execute helth checks Custom class health_check_methods Comma-separate list of methods of health_check_class to execute preliminary doThis, doThat Most of the properties may be read in the following way: Configuration.get(Parameter.URL) // returns string value Configuration.getBoolean(Parameter.AUTO_SCREENSHOT) // returns boolean value Configuration.getInt(Parameter.SMALL_SCREEN_WIDTH) // returns integer value Configuration.getDouble(Parameter.BROWSER_VERSION) // returns double value","title":"Configuration files"},{"location":"configuration/#environment-specific-configuration","text":"In some cases it is required to support multiple environments for testing. Let's assume we have STAG and PROD environments which have different application URLs. In this case we need to specify the following properties in _config.properties: env=PROD STAG.url=http://stag-app-server.com PROD.url=http://prod-app-server.com And get env-specific argument in test the following way: Configuration.getEnvArg( url ) As a result you switch between environments just changing env argument in _config.properties file.","title":"Environment specific configuration"},{"location":"configuration/#zafira-configuration","text":"zafira.properties is used for Zafira QA reporting integration, here you should specify some values for proper integration: Attribute Meaning Example zafira_enabled Root switch true/false zafira_service_url Webservice URL http://localhost:8080/zafira-ws zafira_project Project name (created in Zafira) empty or any created zafira_rerun_failures Rerun only failures true/false zafira_report_emails List of emails for report user1@qps.com,user2@qps.com zafira_configurator Configurator class (use default) com.qaprosoft.carina.core.foundation.report.ZafiraConfigurator","title":"Zafira configuration"},{"location":"contribution/","text":"Configure ssh connection based on git documentation https://help.github.com/articles/connecting-to-github-with-ssh . 1) Fork repository https://github.com/qaprosoft/carina to your own user. 2) Clone your fork to your local machine : git clone git@github.com:your_fork_url/carina.git 3) git remote add origin your_fork_url (can be already added) 4) git fetch origin 5) git remote add upstream git@github.com:qaprosoft/carina.git 6) git fetch upstream 7) git checkout -b work_local_branch upstream/master And then after adding files ( git add ...) use git commit (add description) and then push : git push origin work_local_branch:work_remote_branch And on https://github.com/qaprosoft/carina you will see possibility to \"Compare Pull Request\"","title":"Contribution"},{"location":"dataproviders/","text":"Dataproviders Modern test automation frameworks should support data-driven testing, when you are capable to verify a variety of edge cases providing test data sets into the tests using external data sources. Carina is not an exclusion, framework supports multiple ways of tests parametrization (see samples ): Java data-providers XML parametrization XLS data-providers CSV data-providers Java data-provider As far as Carina is based on TestNG framework you are able to use well known Java data-providers that returns matrix of Objects and passed to appropriate test arguments. You have to use dataProvider attribute along with @Test annotation and implement method annotated with @DataProvider that will return Object[][] as test data set: @Test(dataProvider = DP1 ) public void testMuliplyOperation(int a, int b, int c) { int actual = a * b; int expected = c; Assert.assertEquals(actual, expected, Invalid sum result! ); } @DataProvider(parallel = false, name = DP1 ) public static Object[][] dataprovider() { return new Object[][] { { 2, 3, 6 }, { 6, 6, 36 }, { 5, 8, 40 } }; } XML parametrization TestNG supports parametrization from XML files, when you organize tests suites using XML files. Parameterized test method should be annotated with @Parameters({ \"a\", \"b\", \"c\" }) and appropriate method arguments should be listed. Also, you have to pass all required parameters from XML suite file: @Test @Parameters({ a , b , c }) public void testSubstractOperation(int a, int b, int c) { int actual = Integer.valueOf(a) - Integer.valueOf(b); int expected = Integer.valueOf(c); Assert.assertEquals(actual, expected, Invalid substract result! ); } ... test name= Substract operation test parameter name= a value= 12 / parameter name= b value= 3 / parameter name= c value= 9 / classes class name= com.qaprosoft.carina.demo.DataprovidersSampleTest methods include name= testSubstractOperation / /methods /class /classes /test ... XLS/CSV data-providers Carina test framework provides the possibility to write all tests with data providers in one place include parametrization using external XLS/CSV spreadsheets. First of all you need to declare test class that extends AbstractTest.java : After that, you can specify data providers tests as follows. public class DataprovidersSampleTest extends AbstractTest { @Test(dataProvider = DataProvider ) @XlsDataSourceParameters(path = xls/demo.xlsx , sheet = Calculator , dsUid = TUID , dsArgs = a,b,c ) public void testSumOperation(String a, String b, String c) { int actual = Integer.valueOf(a) + Integer.valueOf(b); int expected = Integer.valueOf(c); Assert.assertEquals(actual, expected, Invalid sum result! ); } } This test uses XLS/CSV files as the data source. Every row in a spreadsheet is a set of arguments for a test. You should specify the dataProvider parameter for TestNG annotation @Test . Carina test framework initially defines several data providers methods in AbstractTest.java , which you've extended earlier: createData method (data provider name = \"DataProvider\") for common usecases createDataSingeThread method (data provider name = \"SingleDataProvider\") for single-thread execution. To specify XLS/CSV spreadsheets for test you should declare @XlsDataSourceParameters annotation and define its parameters: path - file path located in src/test/resources sheet - sheet name dsUid - data-source unique identifier dsArgs - column names from sheet Here you can look at the spreadsheet as a data provider example for your further tests: In TUID column you should specify some unique test identifier that will be set at the beginning of test name in test results report. In next columns you can specify arguments for a test and their values in lower rows. They will be used as parameters in @XlsDataSourceParameters . In this example values of a,b,c arguments were defined in 3 sets of values with different TUID.","title":"Dataproviders"},{"location":"dataproviders/#dataproviders","text":"Modern test automation frameworks should support data-driven testing, when you are capable to verify a variety of edge cases providing test data sets into the tests using external data sources. Carina is not an exclusion, framework supports multiple ways of tests parametrization (see samples ): Java data-providers XML parametrization XLS data-providers CSV data-providers","title":"Dataproviders"},{"location":"dataproviders/#java-data-provider","text":"As far as Carina is based on TestNG framework you are able to use well known Java data-providers that returns matrix of Objects and passed to appropriate test arguments. You have to use dataProvider attribute along with @Test annotation and implement method annotated with @DataProvider that will return Object[][] as test data set: @Test(dataProvider = DP1 ) public void testMuliplyOperation(int a, int b, int c) { int actual = a * b; int expected = c; Assert.assertEquals(actual, expected, Invalid sum result! ); } @DataProvider(parallel = false, name = DP1 ) public static Object[][] dataprovider() { return new Object[][] { { 2, 3, 6 }, { 6, 6, 36 }, { 5, 8, 40 } }; }","title":"Java data-provider"},{"location":"dataproviders/#xml-parametrization","text":"TestNG supports parametrization from XML files, when you organize tests suites using XML files. Parameterized test method should be annotated with @Parameters({ \"a\", \"b\", \"c\" }) and appropriate method arguments should be listed. Also, you have to pass all required parameters from XML suite file: @Test @Parameters({ a , b , c }) public void testSubstractOperation(int a, int b, int c) { int actual = Integer.valueOf(a) - Integer.valueOf(b); int expected = Integer.valueOf(c); Assert.assertEquals(actual, expected, Invalid substract result! ); } ... test name= Substract operation test parameter name= a value= 12 / parameter name= b value= 3 / parameter name= c value= 9 / classes class name= com.qaprosoft.carina.demo.DataprovidersSampleTest methods include name= testSubstractOperation / /methods /class /classes /test ...","title":"XML parametrization"},{"location":"dataproviders/#xlscsv-data-providers","text":"Carina test framework provides the possibility to write all tests with data providers in one place include parametrization using external XLS/CSV spreadsheets. First of all you need to declare test class that extends AbstractTest.java : After that, you can specify data providers tests as follows. public class DataprovidersSampleTest extends AbstractTest { @Test(dataProvider = DataProvider ) @XlsDataSourceParameters(path = xls/demo.xlsx , sheet = Calculator , dsUid = TUID , dsArgs = a,b,c ) public void testSumOperation(String a, String b, String c) { int actual = Integer.valueOf(a) + Integer.valueOf(b); int expected = Integer.valueOf(c); Assert.assertEquals(actual, expected, Invalid sum result! ); } } This test uses XLS/CSV files as the data source. Every row in a spreadsheet is a set of arguments for a test. You should specify the dataProvider parameter for TestNG annotation @Test . Carina test framework initially defines several data providers methods in AbstractTest.java , which you've extended earlier: createData method (data provider name = \"DataProvider\") for common usecases createDataSingeThread method (data provider name = \"SingleDataProvider\") for single-thread execution. To specify XLS/CSV spreadsheets for test you should declare @XlsDataSourceParameters annotation and define its parameters: path - file path located in src/test/resources sheet - sheet name dsUid - data-source unique identifier dsArgs - column names from sheet Here you can look at the spreadsheet as a data provider example for your further tests: In TUID column you should specify some unique test identifier that will be set at the beginning of test name in test results report. In next columns you can specify arguments for a test and their values in lower rows. They will be used as parameters in @XlsDataSourceParameters . In this example values of a,b,c arguments were defined in 3 sets of values with different TUID.","title":"XLS/CSV data-providers"},{"location":"execution/","text":"Selenium server Before running any web test you have to start Selenium server locally or use remote Selenium server. You may download latest version of Selenium standalone server on official website along with browser binary for Chrome, Firefox, IE etc. For running test with Chrome browser you will need to download chromedriver and place along with selenium-standalone-server-X.jar and execute (make sure that you replace 'X' by current Selenium version): java -jar -Dwebdriver.chrome.driver=./chromedriver selenium-server-standalone-X.jar You have another option for running Selenium in Docker , the easiest way to create docker-compose.yml: # To execute this docker-compose yml file use docker-compose -f file_name up # Add the -d flag at the end for deattached execution version: '2' services: firefox: image: selenium/node-firefox:3.11.0-californium volumes: - /dev/shm:/dev/shm depends_on: - hub environment: HUB_HOST: hub chrome: image: selenium/node-chrome:3.11.0-californium volumes: - /dev/shm:/dev/shm depends_on: - hub environment: HUB_HOST: hub hub: image: selenium/hub:3.11.0-californium ports: - 4444:4444 Now you may start Selenium running the following command in terminal: docker-compose up Running tests There are a several options to execute the test: you may run test suite from Eclipse IDE or initiate test execution from the console using Maven Surefire plugin built into Carina framework. To run the test suite from Eclipse IDE, just select the required TestNG xml file: Right click Run As TestNG suite To run the same test suite from the console, navigate to the test project root (where pom.xml is located) and execute the following command: mvn clean -Dsuite=api test","title":"Execution"},{"location":"execution/#selenium-server","text":"Before running any web test you have to start Selenium server locally or use remote Selenium server. You may download latest version of Selenium standalone server on official website along with browser binary for Chrome, Firefox, IE etc. For running test with Chrome browser you will need to download chromedriver and place along with selenium-standalone-server-X.jar and execute (make sure that you replace 'X' by current Selenium version): java -jar -Dwebdriver.chrome.driver=./chromedriver selenium-server-standalone-X.jar You have another option for running Selenium in Docker , the easiest way to create docker-compose.yml: # To execute this docker-compose yml file use docker-compose -f file_name up # Add the -d flag at the end for deattached execution version: '2' services: firefox: image: selenium/node-firefox:3.11.0-californium volumes: - /dev/shm:/dev/shm depends_on: - hub environment: HUB_HOST: hub chrome: image: selenium/node-chrome:3.11.0-californium volumes: - /dev/shm:/dev/shm depends_on: - hub environment: HUB_HOST: hub hub: image: selenium/hub:3.11.0-californium ports: - 4444:4444 Now you may start Selenium running the following command in terminal: docker-compose up","title":"Selenium server"},{"location":"execution/#running-tests","text":"There are a several options to execute the test: you may run test suite from Eclipse IDE or initiate test execution from the console using Maven Surefire plugin built into Carina framework. To run the test suite from Eclipse IDE, just select the required TestNG xml file: Right click Run As TestNG suite To run the same test suite from the console, navigate to the test project root (where pom.xml is located) and execute the following command: mvn clean -Dsuite=api test","title":"Running tests"},{"location":"getting_started/","text":"Install and configure JDK 1.8+ Install and configure Apache Maven 3.5.2+ Download and start the latest Selenium standalone server Download the latest version of Eclipse and install TestNG plugin Generating project The easiest way to initialize new project is to use Carina archetype, you will get correct project structure along with test samples: mvn archetype:generate -DarchetypeGroupId=com.qaprosoft \\ -DarchetypeArtifactId=carina-archetype \\ -DarchetypeVersion=6.1.21 \\ -DgroupId= your_groupId \\ -DartifactId= your_artifactId \\ -Dname= you_proj_name \\ -Durl= your_proj_url \\ -Dversion= your_proj_version If any attribute contains spaces, it should be set in quotes (e.g.: -Dname=\"Hello World\"). In above Maven command you have to specify 5 attributes while the first 3 should be left unchanged. Let's go through these attributes: Attribute Meaning Example -DgroupId Company domain in reverce order com.qaprosoft -DartifactId Java project name carina-qa -Dname Name with more details \"Carina Test Automation\" -Durl Company URL http://qaprosoft.com -Dversion Project version 1.0 Import to Eclipse If generation is successfully complete, you would see a new project folder with a name equal to the artifactId attribute specified during generation, so navigate to that folder (where pom.xml is located) and execute the following Maven task: mvn clean eclipse:eclipse By executing this command, Maven should resolve all dependencies, downloading required libraries to your local repository and generating Eclipse classpath. Before importing new project to Eclipse, you should link your IDE to your Maven repository by executing the following task: mvn -Dworkspace= path_to_workspace eclipse:configure-workspace Here you have to specify the absolute path to the Eclipse workspace. After that, restart Eclipse IDE. Now you can import generated projects such as \"Existing Java Project\" into Eclipse IDE.","title":"Getting started"},{"location":"getting_started/#generating-project","text":"The easiest way to initialize new project is to use Carina archetype, you will get correct project structure along with test samples: mvn archetype:generate -DarchetypeGroupId=com.qaprosoft \\ -DarchetypeArtifactId=carina-archetype \\ -DarchetypeVersion=6.1.21 \\ -DgroupId= your_groupId \\ -DartifactId= your_artifactId \\ -Dname= you_proj_name \\ -Durl= your_proj_url \\ -Dversion= your_proj_version If any attribute contains spaces, it should be set in quotes (e.g.: -Dname=\"Hello World\"). In above Maven command you have to specify 5 attributes while the first 3 should be left unchanged. Let's go through these attributes: Attribute Meaning Example -DgroupId Company domain in reverce order com.qaprosoft -DartifactId Java project name carina-qa -Dname Name with more details \"Carina Test Automation\" -Durl Company URL http://qaprosoft.com -Dversion Project version 1.0","title":"Generating project"},{"location":"getting_started/#import-to-eclipse","text":"If generation is successfully complete, you would see a new project folder with a name equal to the artifactId attribute specified during generation, so navigate to that folder (where pom.xml is located) and execute the following Maven task: mvn clean eclipse:eclipse By executing this command, Maven should resolve all dependencies, downloading required libraries to your local repository and generating Eclipse classpath. Before importing new project to Eclipse, you should link your IDE to your Maven repository by executing the following task: mvn -Dworkspace= path_to_workspace eclipse:configure-workspace Here you have to specify the absolute path to the Eclipse workspace. After that, restart Eclipse IDE. Now you can import generated projects such as \"Existing Java Project\" into Eclipse IDE.","title":"Import to Eclipse"},{"location":"migration/","text":"Migration steps from 5.3.3.xx to 6.0.x carina Due to the architectual changes, code cleanup etc 6.0 carina-core generation is not compatible with 5.3 anymore. Visit Release Notes for details. 1) Listeners Updates AnnotationTransformer is part of CarinaListener so it should be removed from all TestNG suites and pom.xml files: // remove below lines from each TestNG suites and pom.xml files listeners listener class-name= com.qaprosoft.carina.core.foundation.retry.AnnotationTransformer / /listeners HealthCheckListener is part of carinaListener so it should be removed from TestNG suites and pom.xml files: // remove below lines from each TestNG suites and pom.xml files listeners listener class-name= com.qaprosoft.carina.core.foundation.listeners.HealthCheckListener / /listeners 2) Apache Maven plugins upgrade all plugins where upgraded on core level and we recommend to bump up below plugins to the newest versions on project leveles as well: maven-compiler-plugin 3.2 - 3.8.0 maven-surefire-plugin 2.18.1 - 2.22.1 3) DriverPool was refactored and is delivered as IDriverPool intefrace with default functionality No changes on test classes level if they extends AbstractTest For each services layer which used static DriverPool functionality we should: // add implements IDriverPool for each service class public class TestService implements IDriverPool { ... //WebDriver drv = DriverPool.getDriver(); // change to WebDriver drv = getDriver(); 4) Cucumber functionality was completely removed in 6.0 so just remove all dependent classes if any. Inform carina-support if you want to restore cucumber module in Carina. 5) All TestRail updaters, interfaces etc were removed. Carina can't push at runtime data to 3rd party Reporting Tools. Carina can register only TestRail related tags in Zafira. Integration was moved to the qps-pipeline level with much more easier to develop, maintain and support 6) DriverHelper (AbstractPage) - deprecated methods removal click, type, hoved, select etc ExtendedWebElement element; String value = value ; type(element, value); - element.type(value); click(element); - element.click(); hover(element); - element.hover(); isElementPresent(element); - element.isPresent(); or element.isElementPresent(); format(element, dynamic attr ); - element.format( dynamic attr ); Note: replaced all methods using new OOP format pressEnter() was removed pressEnter(fileNameLabel); // change to fileNameLabel.sendKeys(Keys.RETURN); waitForElementToBeClickable(...) was removed waitForElementToBeClickable(element, LONG_TIMEOUT); // change to element.isClickable(LONG_TIMEOUT); 7) CustomTypePageFactory- initPage method has obligatory driver as 1st argument. transferring driver as argument should resolve invalid calls on services layer when we got too often \"driver already quit...\" return CustomTypePageFactory.initPage(PlayerPageBase.class); // change to return CustomTypePageFactory.initPage(getDriver(), PlayerPageBase.class); 8) Communicate via carina-support to get migration support for free...","title":"Migration Steps"},{"location":"migration/#migration-steps-from-533xx-to-60x-carina","text":"Due to the architectual changes, code cleanup etc 6.0 carina-core generation is not compatible with 5.3 anymore. Visit Release Notes for details. 1) Listeners Updates AnnotationTransformer is part of CarinaListener so it should be removed from all TestNG suites and pom.xml files: // remove below lines from each TestNG suites and pom.xml files listeners listener class-name= com.qaprosoft.carina.core.foundation.retry.AnnotationTransformer / /listeners HealthCheckListener is part of carinaListener so it should be removed from TestNG suites and pom.xml files: // remove below lines from each TestNG suites and pom.xml files listeners listener class-name= com.qaprosoft.carina.core.foundation.listeners.HealthCheckListener / /listeners 2) Apache Maven plugins upgrade all plugins where upgraded on core level and we recommend to bump up below plugins to the newest versions on project leveles as well: maven-compiler-plugin 3.2 - 3.8.0 maven-surefire-plugin 2.18.1 - 2.22.1 3) DriverPool was refactored and is delivered as IDriverPool intefrace with default functionality No changes on test classes level if they extends AbstractTest For each services layer which used static DriverPool functionality we should: // add implements IDriverPool for each service class public class TestService implements IDriverPool { ... //WebDriver drv = DriverPool.getDriver(); // change to WebDriver drv = getDriver(); 4) Cucumber functionality was completely removed in 6.0 so just remove all dependent classes if any. Inform carina-support if you want to restore cucumber module in Carina. 5) All TestRail updaters, interfaces etc were removed. Carina can't push at runtime data to 3rd party Reporting Tools. Carina can register only TestRail related tags in Zafira. Integration was moved to the qps-pipeline level with much more easier to develop, maintain and support 6) DriverHelper (AbstractPage) - deprecated methods removal click, type, hoved, select etc ExtendedWebElement element; String value = value ; type(element, value); - element.type(value); click(element); - element.click(); hover(element); - element.hover(); isElementPresent(element); - element.isPresent(); or element.isElementPresent(); format(element, dynamic attr ); - element.format( dynamic attr ); Note: replaced all methods using new OOP format pressEnter() was removed pressEnter(fileNameLabel); // change to fileNameLabel.sendKeys(Keys.RETURN); waitForElementToBeClickable(...) was removed waitForElementToBeClickable(element, LONG_TIMEOUT); // change to element.isClickable(LONG_TIMEOUT); 7) CustomTypePageFactory- initPage method has obligatory driver as 1st argument. transferring driver as argument should resolve invalid calls on services layer when we got too often \"driver already quit...\" return CustomTypePageFactory.initPage(PlayerPageBase.class); // change to return CustomTypePageFactory.initPage(getDriver(), PlayerPageBase.class); 8) Communicate via carina-support to get migration support for free...","title":"Migration steps from 5.3.3.xx to 6.0.x carina"},{"location":"project_structure/","text":"Carina test project is structured as a standard Maven project: carina-demo |-- pom.xml |-- src/test/java |-- src/test/resources |-- api |-- testng_suites |-- xls |-- src/main/java |-- src/main/resources |-- l18n src/test/java - contains test classes organized using TestNG annotations src/test/resources - contains TestNG xml files, API templates and XLS data providers src/main/java - contains page object classes, API domains and additional utilities src/main/resources - contains l18n bundles, configuration properties files and MyBatis profiles if needed","title":"Project structure"},{"location":"proxy/","text":"Operating with Proxies There is possibility to send all test traffic via the proxy included embelled light-weight BrowserMob proxy server. Ther are several properties available to manage all kind of proxies usage: proxy_host=NULL proxy_port=NULL proxy_protocols=http,https,ftp proxy_set_to_system=true browsermob_proxy=false browsermob_host=NULL browsermob_disabled_mitm=false browsermob_port=0 Declare proxy_host, proxy_port and proxy_protocols to send all Web and API test traffic via your static network proxy. Also to enable proxy for TestNG Java process proxy_set_to_system must be specifed to true otherwise only WebDrivers and API clients will be proxied Note: Above settings mostly required to get public internet access through corporate proxies. Raising inbuilt proxy-server (BrowserMob) Also Carina can start embedded proxy to proxy/view/filter requests/responses. There is inbuilt library BrowserMobProxy in carina-proxy module. Below you can find BrowserMob proxy related parameters in your config.properties file: browsermob_proxy=true browsermob_host=NULL browsermob_disabled_mitm=false browsermob_port=0 With enabled browsermob_proxy Carina will start dedicated proxy instance on every test method. browsermob_host=NULL means that Carina automatically detect IP address and put it into the capabilities etc. browsermob_host=myhostname that's useful in case of running maven process inside docker container. Override hostname to be available from Selenium instance. browsermob_port=0 means that Carina dynamically identify free port for proxy session. browsermob_disabled_mitm is disabled by default. Important! If you have troubles with SSL traffic sniffering first thing you should do - change browsermob_disabled_mitm property value! Using proxy-server in java code: Make sure driver instance is already started: getDriver(); Note: During driver startup Carina automatically start proxy and adjust browser capabilities to track desired protocols. To get proxy instance for the current test/thread you can call: BrowserMobProxy proxy = ProxyPool.getProxy(); Enable required Har capture type using:: proxy.enableHarCaptureTypes(CaptureType.REQUEST_CONTENT, CaptureType.RESPONSE_CONTENT); There are a lot of possible content types: CaptureType.RESPONSE_COOKIES CaptureType.RESPONSE_HEADERS CaptureType.REQUEST_HEADERS CaptureType.RESPONSE_CONTENT CaptureType.REQUEST_CONTENT ... They all can be set as comma separated parameters. You may want to save captured content into a .har file: proxy.newHar(HAR_NAME); //Some testing activity... //Saving har to a file... File file = new File(HAR_NAME + .har ); Assert.assertNotNull(proxy.getHar(), Har is NULL! ); try { proxy.getHar().writeTo(file); } catch (IOException e) { e.printStackTrace(); } Your .har file will be created in project root folder There are four methods to support request and response interception: addRequestFilter addResponseFilter addFirstHttpFilterFactory addLastHttpFilterFactory To add and configure content filters look here . Dealing with MITM and installing SSL sertificate into your system: For Mac users: Go here and save it as ca-certificate-rsa.cer . Double click created file. Next window should be shown: After authorization the certificate will be added into your system certificates, but it's still untrusted: To make it trusted double click on it. Following window should be shown: Click first drop-down menu and select Always Trust option. Then close the window (second authorization will be required): Make sure red cross on your certificate turned into a blue one: Adding ssl sertificate into Java keystore: If you are still getting following exception: javax.net.ssl.SSLHandshakeException: sun.security.validator.ValidatorException: PKIX path building failed: sun.security.provider.certpath.SunCertPathBuilderException: unable to find valid certification path to requested target you may need to set up ca-certificate-rsa.cer into your Java keystore. For Mac and Linux users: sudo keytool -importcert -alias browsermob -file pathToYourCertificateLocation/BrowserMobCertificate.crt -keystore /Library/Java/JavaVirtualMachines/jdk1.8.0_181.jdk/Contents/Home/jre/lib/security/cacerts You will be asked to enter your Mac profile password and a Java keystore password (by default: changeit).","title":"Proxy"},{"location":"proxy/#operating-with-proxies","text":"There is possibility to send all test traffic via the proxy included embelled light-weight BrowserMob proxy server. Ther are several properties available to manage all kind of proxies usage: proxy_host=NULL proxy_port=NULL proxy_protocols=http,https,ftp proxy_set_to_system=true browsermob_proxy=false browsermob_host=NULL browsermob_disabled_mitm=false browsermob_port=0 Declare proxy_host, proxy_port and proxy_protocols to send all Web and API test traffic via your static network proxy. Also to enable proxy for TestNG Java process proxy_set_to_system must be specifed to true otherwise only WebDrivers and API clients will be proxied Note: Above settings mostly required to get public internet access through corporate proxies.","title":"Operating with Proxies"},{"location":"proxy/#raising-inbuilt-proxy-server-browsermob","text":"Also Carina can start embedded proxy to proxy/view/filter requests/responses. There is inbuilt library BrowserMobProxy in carina-proxy module. Below you can find BrowserMob proxy related parameters in your config.properties file: browsermob_proxy=true browsermob_host=NULL browsermob_disabled_mitm=false browsermob_port=0 With enabled browsermob_proxy Carina will start dedicated proxy instance on every test method. browsermob_host=NULL means that Carina automatically detect IP address and put it into the capabilities etc. browsermob_host=myhostname that's useful in case of running maven process inside docker container. Override hostname to be available from Selenium instance. browsermob_port=0 means that Carina dynamically identify free port for proxy session. browsermob_disabled_mitm is disabled by default. Important! If you have troubles with SSL traffic sniffering first thing you should do - change browsermob_disabled_mitm property value!","title":"Raising inbuilt proxy-server (BrowserMob)"},{"location":"proxy/#using-proxy-server-in-java-code","text":"Make sure driver instance is already started: getDriver(); Note: During driver startup Carina automatically start proxy and adjust browser capabilities to track desired protocols. To get proxy instance for the current test/thread you can call: BrowserMobProxy proxy = ProxyPool.getProxy(); Enable required Har capture type using:: proxy.enableHarCaptureTypes(CaptureType.REQUEST_CONTENT, CaptureType.RESPONSE_CONTENT); There are a lot of possible content types: CaptureType.RESPONSE_COOKIES CaptureType.RESPONSE_HEADERS CaptureType.REQUEST_HEADERS CaptureType.RESPONSE_CONTENT CaptureType.REQUEST_CONTENT ... They all can be set as comma separated parameters. You may want to save captured content into a .har file: proxy.newHar(HAR_NAME); //Some testing activity... //Saving har to a file... File file = new File(HAR_NAME + .har ); Assert.assertNotNull(proxy.getHar(), Har is NULL! ); try { proxy.getHar().writeTo(file); } catch (IOException e) { e.printStackTrace(); } Your .har file will be created in project root folder There are four methods to support request and response interception: addRequestFilter addResponseFilter addFirstHttpFilterFactory addLastHttpFilterFactory To add and configure content filters look here .","title":"Using proxy-server in java code:"},{"location":"proxy/#dealing-with-mitm-and-installing-ssl-sertificate-into-your-system","text":"","title":"Dealing with MITM and installing SSL sertificate into your system:"},{"location":"proxy/#for-mac-users","text":"Go here and save it as ca-certificate-rsa.cer . Double click created file. Next window should be shown: After authorization the certificate will be added into your system certificates, but it's still untrusted: To make it trusted double click on it. Following window should be shown: Click first drop-down menu and select Always Trust option. Then close the window (second authorization will be required): Make sure red cross on your certificate turned into a blue one:","title":"For Mac users:"},{"location":"proxy/#adding-ssl-sertificate-into-java-keystore","text":"If you are still getting following exception: javax.net.ssl.SSLHandshakeException: sun.security.validator.ValidatorException: PKIX path building failed: sun.security.provider.certpath.SunCertPathBuilderException: unable to find valid certification path to requested target you may need to set up ca-certificate-rsa.cer into your Java keystore.","title":"Adding ssl sertificate into Java keystore:"},{"location":"proxy/#for-mac-and-linux-users","text":"sudo keytool -importcert -alias browsermob -file pathToYourCertificateLocation/BrowserMobCertificate.crt -keystore /Library/Java/JavaVirtualMachines/jdk1.8.0_181.jdk/Contents/Home/jre/lib/security/cacerts You will be asked to enter your Mac profile password and a Java keystore password (by default: changeit).","title":"For Mac and Linux users:"},{"location":"releases/","text":"Release notes 6.1.22 (2019-06-29) Enhancements #736 Updated @MethodOwner annotation. secondaryOwner parameter no longer exists, instead of this parameter added platform filter where neccessary: Note: previous single @MethodOwner annotation without platform works as well @MethodOwner(owner = user1 , platform = android ) @MethodOwner(owner = user2 , platform = ios ) #749 Added ability to set custom test data directory name. This functionality is available via ReportContext.setCustomTestDirName(\"customName\") method. #751 provided anonymous access to carina CI jobs: https://ci.qaprosoft.com/jenkins/job/carina #752 Added generation of JavaDoc and provided read access to carina CI jobs for anonymous users, for example: https://ci.qaprosoft.com/jenkins/job/carina/job/carina-CENTRAL-RELEASE/javadoc/ #754 Renamed browser_locale property to browser_language Note: make sure to update your project _config.properties accordingly to be able to override browser language! Added release and snapshot build job statuses to https://github.com/qaprosoft/carina Fixes Browser resize moved to DesktopFactory only to minimize erros in mobile web tests. Browser window resolution sets according to capabilites.resolution values otherwise maximizes window using old functionality. Known Issues N/A [DEPENDENCIES UPDATES] zafira-client 4.0.56 - 4.0.57 Migration Steps Remove all occurrences of secondaryOwner parameter for @MethodOwner annotation. Use platform filter based on information above instead To complete migration replace in your _config.properties all occurrences of browser_locale to browser_lang 6.1.21 (2019-06-09) Enhancements Added full integration with ZebRunner (Super Fast Test Automation Cloud Solution) Cleaned up Carina archetype in accordance with the latest changes (dependencies, removal of obsolete files, etc.) Released 6.1.21 archetype and updated \"Getting started\" document accordingly Redesigned integration with S3 in scope of #703 reusing valid functionality from ZafiraClient and removing obsolete Amazon properties from config.properties #720 Migrate AndroidUtils and IOSUtils to functional interfaces enhancement: 1) platform independent IMobileUtils- isAppRunning() implemented 2) AndroidService- checkCurrentDeviceFocus() deprecated 3) removed already deprecated executeKeyEvent, pressKeyCode, pressBack, swipeInContainer, waitUntilElementNotPresent from IAndroidUtils Fixes #745 Bump up com.fasterxml.jackson.core:jackson-databind to 2.9.9 bug #744 Upgrade jacoc-maven-plugin to 0.8.4 in carina and carina-archetype #740 Unable to take a screenshot on a test failure bug #731 Rerun failures and logic onTestFailure doesn't work for the tests with dependsOnMethods #727 Unable to deploy fresh documentation using upgraded pipeline to v 4.0 #703 UI dump report for mobile runs should be published to S3 as an artifact bug fixed NPE in type method when null was provided as an argument Known Issues N/A [DEPENDENCIES UPDATES] maven-surefire-plugin 3.0.0-M3 jacoco-maven-plugin 0.8.2 - 0.8.4 jackson-databind 2.8.8 - 2.8.9 6.1.20 (2019-05-17) Enhancements integrated with 4.0.53 Zafira Server and 4.0.56 Zafira Client! Important: Please, don't migrate to this core version without upgrading Zafira Reporting Tool. #715 Bump up to 4.0.56 zafira-client with fixes for dynamic tags registration (#701) #461 Added support for web mobile execution on real devices using embedded QPS-HUB: Chrome, Firefox Also coming soon: Samsung Native browser, Edge, Opera, Opera Mini and Yandex mobile browsers Added localized date time settings support for Android 9 #722 Deprecated com.qaprosoft.carina.core.foundation.utils.android.Androidutils and com.qaprosoft.carina.core.foundation.utils.ios.IosUtils. Functional IAndroidUtils and IIosUtils added instead #621 Removed CustomTypePageFactory Note: Reuse ICustomTypePageFactory functional interface updating imports and removing static calls Fixes #711 Fixed Maven compiler source and target argument using 1.8 Java for both Hid \"Timer not stopped for operation: ..\" to debug level as it is not so important Known Issues N/A [DEPENDENCIES UPDATES] zafira-client 3.4.55 - 4.0.56 6.0.19 (2019-05-01) Enhancements integrated with 4.0.52 Zafira Server! Please, don't migrate to this core version without upgrading Zafira Reporting Tool. Bump up to 3.4.55 zafira-client which support ZAFIRA_ARTIFACTS_USE_PROXY feature for permanent artifacts storing in AS S3 Fixes N/A Known Issues N/A [DEPENDENCIES UPDATES] zafira-client 3.4.54 - 3.4.55 6.0.18 (2019-04-15) Enhancements integrated with 3.4.51 Zafira Server! Please, don't migrate to this core version without upgrading Zafira Reporting Tool. Finished with artifacts uploading improvements to S3 including asynchronous uploading Add Google spreadsheet data provider @Test(dataProvider = SingleDataProvider ) @XlsDataSourceParameters( spreadsheetId = 1G.... , sheet = urls , executeValue = TRUE , dsUid = TUID , dsArgs = TUID, ARG1, ARG2 ) public void test(String TUID, String ARG1, String ARG2) added support for mobile web tests execution against QPS-HUB in qps-infra Published howto article about @ExtendedFindBy() usage for mobile elements Fixes N/A Known Issues N/A [DEPENDENCIES UPDATES] maven-surefire-plugin 2.22.1 - 3.0.0-M3 zafira-client 3.3.51 - 3.4.54 6.0.16 (2019-03-15) Enhancements integrated with 3.3.48 Zafira Server! Please, don't migrate to it's core version without upgrading Zafira Reporting Tool. Improved artifacts uploading to amazon S3. Updated existing screenshots capturing with ability to register important screenshots as test artifacts introduced new \"ignore_ssl=false\" property for carina-api module. If enabled api tests ignore handshake exception during tests run Fixes Hopefully permanent fix delivered for a mess with capturing screenshots over the died driver Note: in case of any exception in child thread TestNG crash execution of it's logic and do not execute after methods/classes etc. Our DriverListener is a child thread. #673 Fixed extra places with potential NPE Known Issues N/A [DEPENDENCIES UPDATES] zafira-client 3.3.49 - 3.3.51 6.0.12 (2019-02-25) Enhancements #648 Implement findByImage strategy Added instructions \"How to use Find by image strategy\": http://qaprosoft.github.io/carina/automation/mobile/ Avoid input field clearing for empty control Fixes closing BEFORE_CLASS drivers during \"onFinish(ITestContext context)\" Added extra debug logging messages for FtpUtils to simplify failures debugging declared ARTIFACTS_EXPIRATION_SECONDS as configuration parameter to see it's value in log Known Issues N/A [DEPENDENCIES UPDATES] jackson-databind 2.8.11.3 - 2.9.8 jackson-annotations 2.9.8 6.0.11 (2019-02-05) Enhancements N/A Fixes #652 web video quality property is missed Known Issues N/A [DEPENDENCIES UPDATES] N/A 6.0.10 (2019-01-29) Enhancements #566 Add new parameters for video recording to match appium 1.10 implementation Prepared MobileSampleTest for iOS/Android and internal application in carina-demo Fixes ExtendedWebElement.scrollTo() refactored using up to date Locatable class Known Issues #637 Abnormal behavior when swiping left or right More information requested #652 web video quality property is missed [DEPENDENCIES UPDATES] N/A 6.0.9 (2019-01-22) Enhancements #618 Update appium java client to the latest version (7.0.0) #622 Create Zoom in/out in MobileUtils/IMobileUtils #534 , #563 Improved BrowserMob proxy coverage by unit tests including example for secure traffic sniffer. Take a look for example. Also disabled proxy_set_to_system=false property by default. It should be enabled only if you have to use your internal corporate proxy to have access to internet. #436 , #326 Registering device information for unsuccessful driver start. Available only in scope of https://www.qps-infra.io and https://mobiletesting.farm Note: Appium should be patched to incorporate custom details into the exception (system-calls.js) Fixes #625 AbstractTest doesn't implement ICustomTypePageFactory #629 Annoying INFO message: Value not resolved by key: PRODUCTION.url #636 operations with relative elements in AbstractUiObject are broken #634 do not restart proxy during driver restart on the same device Known Issues #637 Abnormal behavior when swiping left or right [DEPENDENCIES UPDATES] io.appium.java-client 6.1.0 - 7.0.0 6.0.8 (2019-01-15) Enhancements #614 refactor CustomTypePageFactory to interface Note: CustomTypePageFactory.initPage(...) should be replaced by initPage(...) also we again return initPage(...) method without driver as argument CustomTypePageFactory.initPage(...); // it should be replaced in most cases by initPage(...); #608 update copyright info using 2019 #612 Test execution by filter rules. Annotations for future filtering can be set in tests in following way: @TestPriority(Priority.P1) @MethodOwner(owner = owner ) @TestTag(name = feature , value = reg ) And setup in config.properties test_run_rules=PRIORITY= P1 amp; amp;P2;;OWNER= owner;;TAGS= tag1=temp amp; amp;feature=reg rules logic: test_run_rules={RULE_NAME_ENUM}= {RULE_VALUE1} {RULE_VALUE2};;... Listener should be added in pom.xml or in required suite listener class-name= com.qaprosoft.carina.core.foundation.listeners.FilterTestsListener / Fixes #533 Default url parameter is not detected by envLoader #613 openURL functionality refactoring Improved hasDependencies logic using short and full qualified class/method names Improved negative use-case handlers avoiding loop in making screenshots and generating UiDump Added deprecation javadoc for DriverHelper.tapWithCoordinates(double x, double y) #623 LOGGER is not being recognized correctly in 6.0.7 Known Issues N/A [DEPENDENCIES UPDATES] N/A 6.0.6 (2019-01-07) Enhancements #607 refactor DevicePool logic integrating it completely into DriverPool Note: Due to the removed DevicePool class some code refactoring on project level needed. Mostly for devicePool.getDevice() which is not available anymore: DevicePool.getDevice(); // it should be replaced in most cases by getDevice(); // for the use-case when you need it in static way use IDriverPool.getDefaultDevice(); // Also we have new methods to get device by driver name! getDevice( default ); // return device assigned to default driver getDevice( custom ); //return device addigned to custom driver. // if no driver discovered in the pool with provided name then nullDevice will be returned #610 Declared easy way to control drivers quit on project layer. You can disable core logic with no way to enable it back for current test run. Anyway, Carina will close drivers on suite finish. // Execute as only you would like to disable automatic drivers quit CarinaListener.disableDriversCleanup(); #581 Agreed to avoid drivers keep for depenent groups. In case you need it please disable automatic drivers quit according to the step above and organize quit using your own logic. #599 Upgrade com.fasterxml.jackson.core:jackson-databind to version 2.8.11.3 or later Fixes Fixed potential recursive loops in DriverListener during failures detection #605 review and complete IDriverPool TODO's #609 hide \"Can't save file to Amazon S3!\" error message stack-trace #604 device name for the test is not registered in Zafira #584 DevicePool.getDevice() returns different objects of the same device Known Issues N/A [DEPENDENCIES UPDATES] com.fasterxml.jackson.core: jackson-databind 2.8.11.1- 2.8.11.3 6.0.5 (2019-01-04) Enhancements #565 carina-api: api.validateResponseAgainstJSONSchema should support schema draft 7 Set of improvements into the IDriverPool to make its modification threads safety Start global migration of MobileUtils to IMobileUtils interface Register device information in global driversPool for each driver session Moved drivers quit and devices disconnect onto the java shutdown hook to kill sessions even for aborted tests/jobs Saved information about integrated with STF device in Device object with automatic disconnect on finish Do not show encrypted text in logs (aka user credentials etc) Fixes #590 org.openqa.selenium.remote.RemoteWebDriver cannot be cast to io.appium.java_client.MobileDriver #590 Device type is defined incorrectly in several cases for iOS/Android tests #588 we still can generate ConcurrentModificationException during driver quit operation #574 annoying INFO message in log for specific use-cases #459 Enormous amount of logs appears in console on attempt to use element.clickIfPresent(3) Disabled screenshots capturing for three more driver failures: was terminated due to CLIENT_STOPPED_SESSION Session ID is null. Using WebDriver after calling quit() was terminated due to BROWSER_TIMEOUT Known Issues N/A [DEPENDENCIES UPDATES] N/A 6.0.4 (2018-12-27) Enhancements N/A Fixes #553 6.0: Rebuild failures doesn't work #582 Hardcoded parameters in carina archetype (-Dname and -Durl) Known Issues N/A [DEPENDENCIES UPDATES] zafira-client 3.3.47- 3.3.49 6.0.3 (2018-12-21) Enhancements #570 Updated iDriverPool returning back automatic driver quit onto AfterMethod phase as it was in 5.3.x core. New approach was rejected due to the discovered regressions #567 Added new browsermob_host parameter to override automatically detected IP address for embedded proxy. Updated manual accordingly http://qaprosoft.github.io/carina/proxy #568 Returned Chrome browser maximize to the default method removing old workaround with hardcoded dimension 576 Removed sensitive information from logs during onType and onAttachFile operations #574 Removed invalid log4j appender and hide noisy log messages on startup Adjust custom_capabilities usage allowing not only define it globally but generate for each driver session // start new driver with generated capabilities based on capabilities inside // Samsung_Galaxy_S8.properties property file WebDriver drv = getDriver( name , new CapabilitiesLoader().getCapabilities( browserstack/android/Samsung_Galaxy_S8.properties )) Removed obsolete extra_capabilities configuration parameter Declared Spring Plugins repository in pom.xml to download from scratch monte-repack (javax.media.jai) dependency Known Issues #553 In the integration with Zafira environment rerun failures is still broke [DEPENDENCIES UPDATES] N/A 6.0.2 (2018-12-04) Enhancements Starting from 6.0.x carina-core became a listener with unified CarinaListener class: most of the AbstractTest core methods moved to CarinaListener incorporated HealthCheckListener as part of CarinaListener splited initialization logic into static block and ISuiteListener- onStart(suite) method incorporated DriverPool cleanup on shutdown hook Note: some changes are incompatible in comparison with 5.x.x versions and need manual updates according to the Migration Steps Migrated to the latest 6.14.3 TestNG version with fully supported retry execution feature Updated build numbering structure according all qaprosoft projects: 6 .0.0 - core generation 6. 0 .0 - service pack release 6.0. 0 - cross release build number which starts from 0 in 6th generation (in 5.x.x.x release latest build number is 5.3.3. 129 ) Finalized integration rules for Zafira integration: Add ZafiraListener in global pom.xml to inject it for all CI runs Add ZafiraListener into each TestNG suite to be able to run locally with Zafira integration Note: carina archetype updated accordingly Refactored DriverPool class and deliver it as functional IDriverPool interface It allowed to remove driver_mode property and calculate driver lifecycle automatically based on rules below: All drivers started during @BeforeSuite phase are saved across all suite run All drivers started during @BeforeClass phase are saved across current test class run All drivers started during @BeforeMethod phase or inside method are saved only for current method and closed automatically To be able to keep \"method mode\" drivers just use dependsOnMethods property in @Test annotation. Example: @Test() public void test1() { getDriver(); //start new driver ... } @Test(dependsOnMethods= test1 ) public void test2() { getDriver(); //get existing driver started in test1 as test2 depends on test1 ... } @Test() public void test3() { getDriver(); //start new driver as no dependencies detected ... } Moved unit tests into the valid modules to be able to track coverage results in Sonar: https://ci.qaprosoft.com/sonarqube/dashboard/index?did=2 Move some noisy log messages onto the DEBUG level added possibility to redefine log level for explicit sub-modules/classes core_log_level=DEBUG core_log_packages=IDriverPool,ZafiraConfigurator added support for Opera browser. For now both variants are ok: browser=opera browser=operablink Removed all TestRail updaters from Carina and all required dto classes. Integration with 3rd party testcase management tools will be allowed through the https://github.com/qaprosoft/zafira only! Removed SMTP integration settings from Carina. All notification methods will be concentrated in Zafira Reporting Tool. Carina could only run and generate local report in ./reports/qa folder. Removed completely JUnit libraries from classpath to avoid invalid asserts import inside the test classes on projects level Removed cucumber integration as not used feature Removed all deprecated methods in DriverHelper Removed deprecated constructors in ExtendedWebElement class Fixes Improved driver restart logic fixing #364 and #552 . removed soapui.log4j.config property reused new getConstructorOrMethod() function for getting methods instances #558 , #546 , #542 , #532 , #519 , #512 , #505 , #484 , #483 , #480 , #479 , #375 , #343 [DEPENDENCIES UPDATES] TestNG 6.8.8- 6.14.3 zafira-client 3.3.37- 3.3.68-SNAPSHOT (due to the changed TestNG) selenium-server 3.14.0- 3.141.59 selenium-java 3.14.0- 3.141.59 jackson-databind.version 2.8.9- 2.8.11.1 org.apache.pdfbox 1.8.7- 1.8.16 org.testng 6.8.8- 6.14.3 Migration Steps Visit Migration Steps for details. 5.3.3.129 (2018-11-21) Enhancements Workaround Appium issue and enabled iOS Apps video recording Introduced new TestRail and QTest cases annotations Enabled secure (https) traffic sniffering via embedded proxy by default Removed dependencies conflicts to make browsermobproxy workable for secure content Published documentation about proxy usage Fixes Removed workaround for https://github.com/SeleniumHQ/selenium/issues/5299 as not required anymore. Note: tested on Chrome 69 and selenium-standalone 3.11.0-3.141.5 #525 Incorrect video count in test info [DEPENDENCIES UPDATES] exclude out-of-date 1.38 org.bouncycastle dependency 5.3.2.127 (2018-11-07) Enhancements Added possibility to start localized Chrome and Firefox browsers using \"browser_locale\" property Updated carina archetype content Updated snapshots qaprosoft repositories to use https protocol. Switched to latest ZafiraClient (3.3.47) with improvements to the AWS S3 screenshots uploading. We can provide expiresIn in seconds for each uploaded image Fixes Only \"priority\" tag name keep in reserved system names pool [DEPENDENCIES UPDATES] com.qaprosoft.zafira-client updated to 3.3.47 5.3.1.125 (2018-10-16) Enhancements Incorporated Carina pipeline build process into the common qps-pipeline library with such possibilities opened for everyone: Automatic snapshot build deployment based on PullRequest sources when \"build-snapshot\" label is assigned to the PR or \"build-snapshot\" is present in PR title Configured automatic PR checker static code analysis using Sonar PR checker Configured full static code analysis and snapshot build generation after merge to master @TestTag and @TestPriority annotations developed to be able to assign P0-P6 priorities to any test method and any custom tag like \"feature\" etc Switched to latest ZafiraClient (3.3.46) with custom tags registration funcitonality Fixes N/A [DEPENDENCIES UPDATES] maven-surefire-plugin 2.12.4- 2.22.1 maven-compiler-plugin 3.1- 3.8.0 maven-javadoc-plugin 2.3 - 3.0.1 maven-assembly-plugin 2.4.1 - 3.1.0 maven-source-plugin 2.4 - 3.0.1 com.qaprosoft.zafira-client updated to 3.3.46 5.3.0.124 (2018-10-08) Enhancements Refactored List and AbstractUI objects to speedup objects manipulations Switched to latest ZafiraClient (3.3.44) with screenshots publishing into AWS S3 Implemented async screenshot images publishing to AWS S3 Added optimize_video_recording parameter. If true video will be captured only for the final retry and as result failed only. Handled application crash on iOS with proper exception as only it happens Improved logging messages and format to sync with new gallery and log viewer Removed obsolete Parameter(s) ci_url ci_build keep_all_screenshots Removed obsolete com.qaprosoft.carina.core.foundation.webdriver.appium package Removed obsolete start/stop recording methods for Device Pushed to log WebDriver url when any exception is captured Be able to crypto aws access keys: http://qaprosoft.github.io/carina/security/ Fixes Found a root cause of the TestNG main thread crashes and delivered fixes (children DriverListener threads can't raise unchecked RuntimeException) Fixed huge regression defect with STF integration (added explicit adb disconnect to correctly stop device usage) Added explcit io.netty for carina-proxy module Fixed most of the serious Sonar complains Handled StaleElementReferenceException which appeared in 1.9.0 Appium Fix @CaseInsensitiveXPath annotation usage for more complicated xpath values [DEPENDENCIES UPDATES] com.qaprosoft.zafira-client updated to 3.3.44 5.2.5.119 (2018-08-23) Enhancements Disabled live screenshots appender into the Zafira Reporting Tool due to the performance degradation of elasticsearch Improved custom capabilities transfer between carina and custom mobile selenium-hub Added documentationabout CustomTypePageFactory usage to generate unified Desktop/Android/iOS test classes: http://qaprosoft.github.io/carina/automation/mobile/ Added live VNC streaming support for drivers started in before suite/class/method actions Added new public static method DevicePool.isRegistered() Updated carina default archetype Fixes Updated copyright info Workaround applied for appium issue: https://github.com/appium/appium/issues/10159 Hide some stacktrace messages during browser maximize as warning (mostly for the executing web tests on mobile devices/browsers) Cleanup in DesktopFactory removing obsolete functionality [DEPENDENCIES UPDATES] com.qaprosoft.zafira-client updated to 3.0.43 5.2.4.111 (2018-07-24) Enhancements Published new article for API and Mobile automation approaches: http://qaprosoft.github.io/carina/automation/api/ http://qaprosoft.github.io/carina/automation/mobile/ Improved actual browser_version identification and it's registration in Zafira Reporting Tool Introduced new DisableCacheLookup annotation to ExtendedWebElement to disable automatic caching and use object as locator proxy only Introduced @CaseInsensitiveXPath annotation (mostly for Android where different frameworks can recognize locator in different way) Split click operation for separated Web and Mobile actions to minimize negative side-effects MobileUtils - migrated tap etc operations onto the TouchOptions etc Note: if in your code thera direct references onto the TouchActions- tap operations you should update them as well because in 6.0.0 java appium client deprecated methods were removed. Example: https://github.com/qaprosoft/carina/commit/859d1f0d284462733e2c2ddf005bad3f48b41711 Introduced AndroidUtils.pressKeyboardKey(...) method Enabled logcat extractor for Android devices. Copying system device logs for each tests to capture crashes much easier Finalized with UI Dump generation utility (generating screenshot and metadata information on Android devices to be able to analyze xpath values in offline mode using uiautomator viewer) Improved integration with qps-pipeline to support demo screenshots publishing to CI for aborted testruns as well Fixes minor adjustments in UI operations for invisible elements on browsers fixed integration with ZafiraClient to specify default expiration for test artifacts (30 days) Resolve issues with default Timer operations (error messages instead of RuntimeException) Handled annoying cast exception \"java.lang.ClassCastException: com.google.common.collect.Maps$TransformedEntriesMap cannot be cast to java.lang.String\" which is produced mistakenly by Appium instead of StaleElementException Fixed potential recursive callss in DriverListener- onException method Fixed vnc pattern usage for live video streaming (Web and Android mobile) Fixed UIX schema files generation for Android mobile pages Fixed IE/Edge capabilities generation for use-case with BrowserStack Added thread name and id into the thread log appender messaging [DEPENDENCIES UPDATES] io.appium:java-client was updated to official 6.1.0 release org.seleniumhq.selenium:selenium-java updated to 3.12.0 com.qaprosoft.zafira-client updated to 3.0.40 5.2.4.97 (2018-06-02) Enhancements Published new article for API automation approach: http://qaprosoft.github.io/carina/automation/api/ MobileUtils - migrated tap etc operations onto the TouchOptions etc Note: if in your code thera direct references onto the TouchActions- tap operations you should update them as well because in 6.0.0 java appium client deprecated methods were removed. Example: 859d1f0 Split click operation for separated Web and Mobile actions to minimize negative side-effects Fixes minor adjustments in UI operations for invisible elements on browsers [DEPENDENCIES UPDATES] io.appium:java-client was updated to official 6.0.0 release org.seleniumhq.selenium:selenium-java updated to 3.12.0","title":"Release Notes"},{"location":"releases/#release-notes","text":"","title":"Release notes"},{"location":"releases/#6122-2019-06-29","text":"Enhancements #736 Updated @MethodOwner annotation. secondaryOwner parameter no longer exists, instead of this parameter added platform filter where neccessary: Note: previous single @MethodOwner annotation without platform works as well @MethodOwner(owner = user1 , platform = android ) @MethodOwner(owner = user2 , platform = ios ) #749 Added ability to set custom test data directory name. This functionality is available via ReportContext.setCustomTestDirName(\"customName\") method. #751 provided anonymous access to carina CI jobs: https://ci.qaprosoft.com/jenkins/job/carina #752 Added generation of JavaDoc and provided read access to carina CI jobs for anonymous users, for example: https://ci.qaprosoft.com/jenkins/job/carina/job/carina-CENTRAL-RELEASE/javadoc/ #754 Renamed browser_locale property to browser_language Note: make sure to update your project _config.properties accordingly to be able to override browser language! Added release and snapshot build job statuses to https://github.com/qaprosoft/carina Fixes Browser resize moved to DesktopFactory only to minimize erros in mobile web tests. Browser window resolution sets according to capabilites.resolution values otherwise maximizes window using old functionality. Known Issues N/A [DEPENDENCIES UPDATES] zafira-client 4.0.56 - 4.0.57 Migration Steps Remove all occurrences of secondaryOwner parameter for @MethodOwner annotation. Use platform filter based on information above instead To complete migration replace in your _config.properties all occurrences of browser_locale to browser_lang","title":"6.1.22 (2019-06-29)"},{"location":"releases/#6121-2019-06-09","text":"Enhancements Added full integration with ZebRunner (Super Fast Test Automation Cloud Solution) Cleaned up Carina archetype in accordance with the latest changes (dependencies, removal of obsolete files, etc.) Released 6.1.21 archetype and updated \"Getting started\" document accordingly Redesigned integration with S3 in scope of #703 reusing valid functionality from ZafiraClient and removing obsolete Amazon properties from config.properties #720 Migrate AndroidUtils and IOSUtils to functional interfaces enhancement: 1) platform independent IMobileUtils- isAppRunning() implemented 2) AndroidService- checkCurrentDeviceFocus() deprecated 3) removed already deprecated executeKeyEvent, pressKeyCode, pressBack, swipeInContainer, waitUntilElementNotPresent from IAndroidUtils Fixes #745 Bump up com.fasterxml.jackson.core:jackson-databind to 2.9.9 bug #744 Upgrade jacoc-maven-plugin to 0.8.4 in carina and carina-archetype #740 Unable to take a screenshot on a test failure bug #731 Rerun failures and logic onTestFailure doesn't work for the tests with dependsOnMethods #727 Unable to deploy fresh documentation using upgraded pipeline to v 4.0 #703 UI dump report for mobile runs should be published to S3 as an artifact bug fixed NPE in type method when null was provided as an argument Known Issues N/A [DEPENDENCIES UPDATES] maven-surefire-plugin 3.0.0-M3 jacoco-maven-plugin 0.8.2 - 0.8.4 jackson-databind 2.8.8 - 2.8.9","title":"6.1.21 (2019-06-09)"},{"location":"releases/#6120-2019-05-17","text":"Enhancements integrated with 4.0.53 Zafira Server and 4.0.56 Zafira Client! Important: Please, don't migrate to this core version without upgrading Zafira Reporting Tool. #715 Bump up to 4.0.56 zafira-client with fixes for dynamic tags registration (#701) #461 Added support for web mobile execution on real devices using embedded QPS-HUB: Chrome, Firefox Also coming soon: Samsung Native browser, Edge, Opera, Opera Mini and Yandex mobile browsers Added localized date time settings support for Android 9 #722 Deprecated com.qaprosoft.carina.core.foundation.utils.android.Androidutils and com.qaprosoft.carina.core.foundation.utils.ios.IosUtils. Functional IAndroidUtils and IIosUtils added instead #621 Removed CustomTypePageFactory Note: Reuse ICustomTypePageFactory functional interface updating imports and removing static calls Fixes #711 Fixed Maven compiler source and target argument using 1.8 Java for both Hid \"Timer not stopped for operation: ..\" to debug level as it is not so important Known Issues N/A [DEPENDENCIES UPDATES] zafira-client 3.4.55 - 4.0.56","title":"6.1.20 (2019-05-17)"},{"location":"releases/#6019-2019-05-01","text":"Enhancements integrated with 4.0.52 Zafira Server! Please, don't migrate to this core version without upgrading Zafira Reporting Tool. Bump up to 3.4.55 zafira-client which support ZAFIRA_ARTIFACTS_USE_PROXY feature for permanent artifacts storing in AS S3 Fixes N/A Known Issues N/A [DEPENDENCIES UPDATES] zafira-client 3.4.54 - 3.4.55","title":"6.0.19 (2019-05-01)"},{"location":"releases/#6018-2019-04-15","text":"Enhancements integrated with 3.4.51 Zafira Server! Please, don't migrate to this core version without upgrading Zafira Reporting Tool. Finished with artifacts uploading improvements to S3 including asynchronous uploading Add Google spreadsheet data provider @Test(dataProvider = SingleDataProvider ) @XlsDataSourceParameters( spreadsheetId = 1G.... , sheet = urls , executeValue = TRUE , dsUid = TUID , dsArgs = TUID, ARG1, ARG2 ) public void test(String TUID, String ARG1, String ARG2) added support for mobile web tests execution against QPS-HUB in qps-infra Published howto article about @ExtendedFindBy() usage for mobile elements Fixes N/A Known Issues N/A [DEPENDENCIES UPDATES] maven-surefire-plugin 2.22.1 - 3.0.0-M3 zafira-client 3.3.51 - 3.4.54","title":"6.0.18 (2019-04-15)"},{"location":"releases/#6016-2019-03-15","text":"Enhancements integrated with 3.3.48 Zafira Server! Please, don't migrate to it's core version without upgrading Zafira Reporting Tool. Improved artifacts uploading to amazon S3. Updated existing screenshots capturing with ability to register important screenshots as test artifacts introduced new \"ignore_ssl=false\" property for carina-api module. If enabled api tests ignore handshake exception during tests run Fixes Hopefully permanent fix delivered for a mess with capturing screenshots over the died driver Note: in case of any exception in child thread TestNG crash execution of it's logic and do not execute after methods/classes etc. Our DriverListener is a child thread. #673 Fixed extra places with potential NPE Known Issues N/A [DEPENDENCIES UPDATES] zafira-client 3.3.49 - 3.3.51","title":"6.0.16 (2019-03-15)"},{"location":"releases/#6012-2019-02-25","text":"Enhancements #648 Implement findByImage strategy Added instructions \"How to use Find by image strategy\": http://qaprosoft.github.io/carina/automation/mobile/ Avoid input field clearing for empty control Fixes closing BEFORE_CLASS drivers during \"onFinish(ITestContext context)\" Added extra debug logging messages for FtpUtils to simplify failures debugging declared ARTIFACTS_EXPIRATION_SECONDS as configuration parameter to see it's value in log Known Issues N/A [DEPENDENCIES UPDATES] jackson-databind 2.8.11.3 - 2.9.8 jackson-annotations 2.9.8","title":"6.0.12 (2019-02-25)"},{"location":"releases/#6011-2019-02-05","text":"Enhancements N/A Fixes #652 web video quality property is missed Known Issues N/A [DEPENDENCIES UPDATES] N/A","title":"6.0.11 (2019-02-05)"},{"location":"releases/#6010-2019-01-29","text":"Enhancements #566 Add new parameters for video recording to match appium 1.10 implementation Prepared MobileSampleTest for iOS/Android and internal application in carina-demo Fixes ExtendedWebElement.scrollTo() refactored using up to date Locatable class Known Issues #637 Abnormal behavior when swiping left or right More information requested #652 web video quality property is missed [DEPENDENCIES UPDATES] N/A","title":"6.0.10 (2019-01-29)"},{"location":"releases/#609-2019-01-22","text":"Enhancements #618 Update appium java client to the latest version (7.0.0) #622 Create Zoom in/out in MobileUtils/IMobileUtils #534 , #563 Improved BrowserMob proxy coverage by unit tests including example for secure traffic sniffer. Take a look for example. Also disabled proxy_set_to_system=false property by default. It should be enabled only if you have to use your internal corporate proxy to have access to internet. #436 , #326 Registering device information for unsuccessful driver start. Available only in scope of https://www.qps-infra.io and https://mobiletesting.farm Note: Appium should be patched to incorporate custom details into the exception (system-calls.js) Fixes #625 AbstractTest doesn't implement ICustomTypePageFactory #629 Annoying INFO message: Value not resolved by key: PRODUCTION.url #636 operations with relative elements in AbstractUiObject are broken #634 do not restart proxy during driver restart on the same device Known Issues #637 Abnormal behavior when swiping left or right [DEPENDENCIES UPDATES] io.appium.java-client 6.1.0 - 7.0.0","title":"6.0.9 (2019-01-22)"},{"location":"releases/#608-2019-01-15","text":"Enhancements #614 refactor CustomTypePageFactory to interface Note: CustomTypePageFactory.initPage(...) should be replaced by initPage(...) also we again return initPage(...) method without driver as argument CustomTypePageFactory.initPage(...); // it should be replaced in most cases by initPage(...); #608 update copyright info using 2019 #612 Test execution by filter rules. Annotations for future filtering can be set in tests in following way: @TestPriority(Priority.P1) @MethodOwner(owner = owner ) @TestTag(name = feature , value = reg ) And setup in config.properties test_run_rules=PRIORITY= P1 amp; amp;P2;;OWNER= owner;;TAGS= tag1=temp amp; amp;feature=reg rules logic: test_run_rules={RULE_NAME_ENUM}= {RULE_VALUE1} {RULE_VALUE2};;... Listener should be added in pom.xml or in required suite listener class-name= com.qaprosoft.carina.core.foundation.listeners.FilterTestsListener / Fixes #533 Default url parameter is not detected by envLoader #613 openURL functionality refactoring Improved hasDependencies logic using short and full qualified class/method names Improved negative use-case handlers avoiding loop in making screenshots and generating UiDump Added deprecation javadoc for DriverHelper.tapWithCoordinates(double x, double y) #623 LOGGER is not being recognized correctly in 6.0.7 Known Issues N/A [DEPENDENCIES UPDATES] N/A","title":"6.0.8 (2019-01-15)"},{"location":"releases/#606-2019-01-07","text":"Enhancements #607 refactor DevicePool logic integrating it completely into DriverPool Note: Due to the removed DevicePool class some code refactoring on project level needed. Mostly for devicePool.getDevice() which is not available anymore: DevicePool.getDevice(); // it should be replaced in most cases by getDevice(); // for the use-case when you need it in static way use IDriverPool.getDefaultDevice(); // Also we have new methods to get device by driver name! getDevice( default ); // return device assigned to default driver getDevice( custom ); //return device addigned to custom driver. // if no driver discovered in the pool with provided name then nullDevice will be returned #610 Declared easy way to control drivers quit on project layer. You can disable core logic with no way to enable it back for current test run. Anyway, Carina will close drivers on suite finish. // Execute as only you would like to disable automatic drivers quit CarinaListener.disableDriversCleanup(); #581 Agreed to avoid drivers keep for depenent groups. In case you need it please disable automatic drivers quit according to the step above and organize quit using your own logic. #599 Upgrade com.fasterxml.jackson.core:jackson-databind to version 2.8.11.3 or later Fixes Fixed potential recursive loops in DriverListener during failures detection #605 review and complete IDriverPool TODO's #609 hide \"Can't save file to Amazon S3!\" error message stack-trace #604 device name for the test is not registered in Zafira #584 DevicePool.getDevice() returns different objects of the same device Known Issues N/A [DEPENDENCIES UPDATES] com.fasterxml.jackson.core: jackson-databind 2.8.11.1- 2.8.11.3","title":"6.0.6 (2019-01-07)"},{"location":"releases/#605-2019-01-04","text":"Enhancements #565 carina-api: api.validateResponseAgainstJSONSchema should support schema draft 7 Set of improvements into the IDriverPool to make its modification threads safety Start global migration of MobileUtils to IMobileUtils interface Register device information in global driversPool for each driver session Moved drivers quit and devices disconnect onto the java shutdown hook to kill sessions even for aborted tests/jobs Saved information about integrated with STF device in Device object with automatic disconnect on finish Do not show encrypted text in logs (aka user credentials etc) Fixes #590 org.openqa.selenium.remote.RemoteWebDriver cannot be cast to io.appium.java_client.MobileDriver #590 Device type is defined incorrectly in several cases for iOS/Android tests #588 we still can generate ConcurrentModificationException during driver quit operation #574 annoying INFO message in log for specific use-cases #459 Enormous amount of logs appears in console on attempt to use element.clickIfPresent(3) Disabled screenshots capturing for three more driver failures: was terminated due to CLIENT_STOPPED_SESSION Session ID is null. Using WebDriver after calling quit() was terminated due to BROWSER_TIMEOUT Known Issues N/A [DEPENDENCIES UPDATES] N/A","title":"6.0.5 (2019-01-04)"},{"location":"releases/#604-2018-12-27","text":"Enhancements N/A Fixes #553 6.0: Rebuild failures doesn't work #582 Hardcoded parameters in carina archetype (-Dname and -Durl) Known Issues N/A [DEPENDENCIES UPDATES] zafira-client 3.3.47- 3.3.49","title":"6.0.4 (2018-12-27)"},{"location":"releases/#603-2018-12-21","text":"Enhancements #570 Updated iDriverPool returning back automatic driver quit onto AfterMethod phase as it was in 5.3.x core. New approach was rejected due to the discovered regressions #567 Added new browsermob_host parameter to override automatically detected IP address for embedded proxy. Updated manual accordingly http://qaprosoft.github.io/carina/proxy #568 Returned Chrome browser maximize to the default method removing old workaround with hardcoded dimension 576 Removed sensitive information from logs during onType and onAttachFile operations #574 Removed invalid log4j appender and hide noisy log messages on startup Adjust custom_capabilities usage allowing not only define it globally but generate for each driver session // start new driver with generated capabilities based on capabilities inside // Samsung_Galaxy_S8.properties property file WebDriver drv = getDriver( name , new CapabilitiesLoader().getCapabilities( browserstack/android/Samsung_Galaxy_S8.properties )) Removed obsolete extra_capabilities configuration parameter Declared Spring Plugins repository in pom.xml to download from scratch monte-repack (javax.media.jai) dependency Known Issues #553 In the integration with Zafira environment rerun failures is still broke [DEPENDENCIES UPDATES] N/A","title":"6.0.3 (2018-12-21)"},{"location":"releases/#602-2018-12-04","text":"Enhancements Starting from 6.0.x carina-core became a listener with unified CarinaListener class: most of the AbstractTest core methods moved to CarinaListener incorporated HealthCheckListener as part of CarinaListener splited initialization logic into static block and ISuiteListener- onStart(suite) method incorporated DriverPool cleanup on shutdown hook Note: some changes are incompatible in comparison with 5.x.x versions and need manual updates according to the Migration Steps Migrated to the latest 6.14.3 TestNG version with fully supported retry execution feature Updated build numbering structure according all qaprosoft projects: 6 .0.0 - core generation 6. 0 .0 - service pack release 6.0. 0 - cross release build number which starts from 0 in 6th generation (in 5.x.x.x release latest build number is 5.3.3. 129 ) Finalized integration rules for Zafira integration: Add ZafiraListener in global pom.xml to inject it for all CI runs Add ZafiraListener into each TestNG suite to be able to run locally with Zafira integration Note: carina archetype updated accordingly Refactored DriverPool class and deliver it as functional IDriverPool interface It allowed to remove driver_mode property and calculate driver lifecycle automatically based on rules below: All drivers started during @BeforeSuite phase are saved across all suite run All drivers started during @BeforeClass phase are saved across current test class run All drivers started during @BeforeMethod phase or inside method are saved only for current method and closed automatically To be able to keep \"method mode\" drivers just use dependsOnMethods property in @Test annotation. Example: @Test() public void test1() { getDriver(); //start new driver ... } @Test(dependsOnMethods= test1 ) public void test2() { getDriver(); //get existing driver started in test1 as test2 depends on test1 ... } @Test() public void test3() { getDriver(); //start new driver as no dependencies detected ... } Moved unit tests into the valid modules to be able to track coverage results in Sonar: https://ci.qaprosoft.com/sonarqube/dashboard/index?did=2 Move some noisy log messages onto the DEBUG level added possibility to redefine log level for explicit sub-modules/classes core_log_level=DEBUG core_log_packages=IDriverPool,ZafiraConfigurator added support for Opera browser. For now both variants are ok: browser=opera browser=operablink Removed all TestRail updaters from Carina and all required dto classes. Integration with 3rd party testcase management tools will be allowed through the https://github.com/qaprosoft/zafira only! Removed SMTP integration settings from Carina. All notification methods will be concentrated in Zafira Reporting Tool. Carina could only run and generate local report in ./reports/qa folder. Removed completely JUnit libraries from classpath to avoid invalid asserts import inside the test classes on projects level Removed cucumber integration as not used feature Removed all deprecated methods in DriverHelper Removed deprecated constructors in ExtendedWebElement class Fixes Improved driver restart logic fixing #364 and #552 . removed soapui.log4j.config property reused new getConstructorOrMethod() function for getting methods instances #558 , #546 , #542 , #532 , #519 , #512 , #505 , #484 , #483 , #480 , #479 , #375 , #343 [DEPENDENCIES UPDATES] TestNG 6.8.8- 6.14.3 zafira-client 3.3.37- 3.3.68-SNAPSHOT (due to the changed TestNG) selenium-server 3.14.0- 3.141.59 selenium-java 3.14.0- 3.141.59 jackson-databind.version 2.8.9- 2.8.11.1 org.apache.pdfbox 1.8.7- 1.8.16 org.testng 6.8.8- 6.14.3 Migration Steps Visit Migration Steps for details.","title":"6.0.2 (2018-12-04)"},{"location":"releases/#533129-2018-11-21","text":"Enhancements Workaround Appium issue and enabled iOS Apps video recording Introduced new TestRail and QTest cases annotations Enabled secure (https) traffic sniffering via embedded proxy by default Removed dependencies conflicts to make browsermobproxy workable for secure content Published documentation about proxy usage Fixes Removed workaround for https://github.com/SeleniumHQ/selenium/issues/5299 as not required anymore. Note: tested on Chrome 69 and selenium-standalone 3.11.0-3.141.5 #525 Incorrect video count in test info [DEPENDENCIES UPDATES] exclude out-of-date 1.38 org.bouncycastle dependency","title":"5.3.3.129 (2018-11-21)"},{"location":"releases/#532127-2018-11-07","text":"Enhancements Added possibility to start localized Chrome and Firefox browsers using \"browser_locale\" property Updated carina archetype content Updated snapshots qaprosoft repositories to use https protocol. Switched to latest ZafiraClient (3.3.47) with improvements to the AWS S3 screenshots uploading. We can provide expiresIn in seconds for each uploaded image Fixes Only \"priority\" tag name keep in reserved system names pool [DEPENDENCIES UPDATES] com.qaprosoft.zafira-client updated to 3.3.47","title":"5.3.2.127 (2018-11-07)"},{"location":"releases/#531125-2018-10-16","text":"Enhancements Incorporated Carina pipeline build process into the common qps-pipeline library with such possibilities opened for everyone: Automatic snapshot build deployment based on PullRequest sources when \"build-snapshot\" label is assigned to the PR or \"build-snapshot\" is present in PR title Configured automatic PR checker static code analysis using Sonar PR checker Configured full static code analysis and snapshot build generation after merge to master @TestTag and @TestPriority annotations developed to be able to assign P0-P6 priorities to any test method and any custom tag like \"feature\" etc Switched to latest ZafiraClient (3.3.46) with custom tags registration funcitonality Fixes N/A [DEPENDENCIES UPDATES] maven-surefire-plugin 2.12.4- 2.22.1 maven-compiler-plugin 3.1- 3.8.0 maven-javadoc-plugin 2.3 - 3.0.1 maven-assembly-plugin 2.4.1 - 3.1.0 maven-source-plugin 2.4 - 3.0.1 com.qaprosoft.zafira-client updated to 3.3.46","title":"5.3.1.125 (2018-10-16)"},{"location":"releases/#530124-2018-10-08","text":"Enhancements Refactored List and AbstractUI objects to speedup objects manipulations Switched to latest ZafiraClient (3.3.44) with screenshots publishing into AWS S3 Implemented async screenshot images publishing to AWS S3 Added optimize_video_recording parameter. If true video will be captured only for the final retry and as result failed only. Handled application crash on iOS with proper exception as only it happens Improved logging messages and format to sync with new gallery and log viewer Removed obsolete Parameter(s) ci_url ci_build keep_all_screenshots Removed obsolete com.qaprosoft.carina.core.foundation.webdriver.appium package Removed obsolete start/stop recording methods for Device Pushed to log WebDriver url when any exception is captured Be able to crypto aws access keys: http://qaprosoft.github.io/carina/security/ Fixes Found a root cause of the TestNG main thread crashes and delivered fixes (children DriverListener threads can't raise unchecked RuntimeException) Fixed huge regression defect with STF integration (added explicit adb disconnect to correctly stop device usage) Added explcit io.netty for carina-proxy module Fixed most of the serious Sonar complains Handled StaleElementReferenceException which appeared in 1.9.0 Appium Fix @CaseInsensitiveXPath annotation usage for more complicated xpath values [DEPENDENCIES UPDATES] com.qaprosoft.zafira-client updated to 3.3.44","title":"5.3.0.124 (2018-10-08)"},{"location":"releases/#525119-2018-08-23","text":"Enhancements Disabled live screenshots appender into the Zafira Reporting Tool due to the performance degradation of elasticsearch Improved custom capabilities transfer between carina and custom mobile selenium-hub Added documentationabout CustomTypePageFactory usage to generate unified Desktop/Android/iOS test classes: http://qaprosoft.github.io/carina/automation/mobile/ Added live VNC streaming support for drivers started in before suite/class/method actions Added new public static method DevicePool.isRegistered() Updated carina default archetype Fixes Updated copyright info Workaround applied for appium issue: https://github.com/appium/appium/issues/10159 Hide some stacktrace messages during browser maximize as warning (mostly for the executing web tests on mobile devices/browsers) Cleanup in DesktopFactory removing obsolete functionality [DEPENDENCIES UPDATES] com.qaprosoft.zafira-client updated to 3.0.43","title":"5.2.5.119 (2018-08-23)"},{"location":"releases/#524111-2018-07-24","text":"Enhancements Published new article for API and Mobile automation approaches: http://qaprosoft.github.io/carina/automation/api/ http://qaprosoft.github.io/carina/automation/mobile/ Improved actual browser_version identification and it's registration in Zafira Reporting Tool Introduced new DisableCacheLookup annotation to ExtendedWebElement to disable automatic caching and use object as locator proxy only Introduced @CaseInsensitiveXPath annotation (mostly for Android where different frameworks can recognize locator in different way) Split click operation for separated Web and Mobile actions to minimize negative side-effects MobileUtils - migrated tap etc operations onto the TouchOptions etc Note: if in your code thera direct references onto the TouchActions- tap operations you should update them as well because in 6.0.0 java appium client deprecated methods were removed. Example: https://github.com/qaprosoft/carina/commit/859d1f0d284462733e2c2ddf005bad3f48b41711 Introduced AndroidUtils.pressKeyboardKey(...) method Enabled logcat extractor for Android devices. Copying system device logs for each tests to capture crashes much easier Finalized with UI Dump generation utility (generating screenshot and metadata information on Android devices to be able to analyze xpath values in offline mode using uiautomator viewer) Improved integration with qps-pipeline to support demo screenshots publishing to CI for aborted testruns as well Fixes minor adjustments in UI operations for invisible elements on browsers fixed integration with ZafiraClient to specify default expiration for test artifacts (30 days) Resolve issues with default Timer operations (error messages instead of RuntimeException) Handled annoying cast exception \"java.lang.ClassCastException: com.google.common.collect.Maps$TransformedEntriesMap cannot be cast to java.lang.String\" which is produced mistakenly by Appium instead of StaleElementException Fixed potential recursive callss in DriverListener- onException method Fixed vnc pattern usage for live video streaming (Web and Android mobile) Fixed UIX schema files generation for Android mobile pages Fixed IE/Edge capabilities generation for use-case with BrowserStack Added thread name and id into the thread log appender messaging [DEPENDENCIES UPDATES] io.appium:java-client was updated to official 6.1.0 release org.seleniumhq.selenium:selenium-java updated to 3.12.0 com.qaprosoft.zafira-client updated to 3.0.40","title":"5.2.4.111 (2018-07-24)"},{"location":"releases/#52497-2018-06-02","text":"Enhancements Published new article for API automation approach: http://qaprosoft.github.io/carina/automation/api/ MobileUtils - migrated tap etc operations onto the TouchOptions etc Note: if in your code thera direct references onto the TouchActions- tap operations you should update them as well because in 6.0.0 java appium client deprecated methods were removed. Example: 859d1f0 Split click operation for separated Web and Mobile actions to minimize negative side-effects Fixes minor adjustments in UI operations for invisible elements on browsers [DEPENDENCIES UPDATES] io.appium:java-client was updated to official 6.0.0 release org.seleniumhq.selenium:selenium-java updated to 3.12.0","title":"5.2.4.97 (2018-06-02)"},{"location":"security/","text":"Security functionality in the Carina framework is required for sensitive data that should be hidden in test configurations and logging. It uses a symmetric key encryption algorithm for security implementation, which means that anyone may encrypt/decrypt the data in the same way, using the same key. In the Carina framework, AES encryption is used by default with a 128-bit security key. Anyone may generate their own security key and encrypt the data using that key, so that decrypted valid data may be used in the test only if the valid key is specified in test configuration. Also, one may use the default common key located in the test resources, giving access to all other users for secured data decryption. Secured data preparation For secured data preparation, we implemented a special tool that helps to generate crypto keys and encrypt/decrypt test data files. Here is a usage tip: com.qaprosoft.carina.core.foundation.crypto.CryptoConsole -generate -key_file file_path_to_save_key com.qaprosoft.carina.core.foundation.crypto.CryptoConsole -encrypt -string string_to_encrypt -key_file key_file_path com.qaprosoft.carina.core.foundation.crypto.CryptoConsole -decrypt -string string_to_decrypt -key_file key_file_path com.qaprosoft.carina.core.foundation.crypto.CryptoConsole -encrypt -file csv_file_to_encrypt -key_file key_file_path com.qaprosoft.carina.core.foundation.crypto.CryptoConsole -decrypt -file csv_file_to_decrypt -key_file key_file_path To generate an individual crypto key: Go to \"Run configuration\" in Eclipse Create new Java application configuration selecting project and main class com.qaprosoft.cariana.core.foundation.crypto.CryptoConsole : Set arguments Press Apply and then Run Crypto key will be generated: To prepare test data file with secured data: Prepare input file using pattern {crypt:str_to_encrypt} for secured values Prepare input file using pattern {crypt:str_to_encrypt} for secured values Go to \u201cRun configuration\u201d, navigate to arguments tab and execute encryption command specifying key path and input file: File with encrypted data will be generated: To encrypt single string use the following config: Encrypted string will be shown in console: To decrypt encrypted file execute: Decrypted file will be generated: Secured data usage You may use encrypted values, both in test configuration and test data files; pay attention to the fact that there is no explicit before test listener for data decryption, so there is no way to find out later in the test if the data is sensitive or not. All the decryption logic is located in WebDriverHelper that wraps Selenium WebDriver methods for interaction with UI and encapsulates action logging logic. Every method that receives text tests if text contains {crypt:...} pattern and if it does, decrypts it and passes it to UI- logging and screenshots are populated with hidden characters:","title":"Security"},{"location":"security/#secured-data-preparation","text":"For secured data preparation, we implemented a special tool that helps to generate crypto keys and encrypt/decrypt test data files. Here is a usage tip: com.qaprosoft.carina.core.foundation.crypto.CryptoConsole -generate -key_file file_path_to_save_key com.qaprosoft.carina.core.foundation.crypto.CryptoConsole -encrypt -string string_to_encrypt -key_file key_file_path com.qaprosoft.carina.core.foundation.crypto.CryptoConsole -decrypt -string string_to_decrypt -key_file key_file_path com.qaprosoft.carina.core.foundation.crypto.CryptoConsole -encrypt -file csv_file_to_encrypt -key_file key_file_path com.qaprosoft.carina.core.foundation.crypto.CryptoConsole -decrypt -file csv_file_to_decrypt -key_file key_file_path To generate an individual crypto key: Go to \"Run configuration\" in Eclipse Create new Java application configuration selecting project and main class com.qaprosoft.cariana.core.foundation.crypto.CryptoConsole : Set arguments Press Apply and then Run Crypto key will be generated: To prepare test data file with secured data: Prepare input file using pattern {crypt:str_to_encrypt} for secured values Prepare input file using pattern {crypt:str_to_encrypt} for secured values Go to \u201cRun configuration\u201d, navigate to arguments tab and execute encryption command specifying key path and input file: File with encrypted data will be generated: To encrypt single string use the following config: Encrypted string will be shown in console: To decrypt encrypted file execute: Decrypted file will be generated:","title":"Secured data preparation"},{"location":"security/#secured-data-usage","text":"You may use encrypted values, both in test configuration and test data files; pay attention to the fact that there is no explicit before test listener for data decryption, so there is no way to find out later in the test if the data is sensitive or not. All the decryption logic is located in WebDriverHelper that wraps Selenium WebDriver methods for interaction with UI and encapsulates action logging logic. Every method that receives text tests if text contains {crypt:...} pattern and if it does, decrypts it and passes it to UI- logging and screenshots are populated with hidden characters:","title":"Secured data usage"},{"location":"automation/api/","text":"Introduction Rest API testing is a vital part of integration testing process, it may be used separately or in complex with web, mobile or DB testing. General process may be described by the following steps: Compile HTTP request with required meta data Send prepared data to the required server endpoint Validate HTTP status and response data Extract some response data for the next requests Build call to next (or same) endpoint using (or not using) data from the previous response Schema below demonstrates the sequence: From that perspective we decided to use the following instruments: Rest-assured - \"Testing and validation of REST services in Java is harder than in dynamic languages such as Ruby and Groovy. REST Assured brings the simplicity of using these languages into the Java domain.\" Freemarker - \"Apache FreeMarker is a template engine: a Java library to generate text output (HTML web pages, e-mails, configuration files, source code, etc.) based on templates and changing data.\" JsonPath - library for extracting data from JSON body JsonAssert - library for comparing of actual JSON body with expected one Json-schema-validator - library for validating of JSON body for matching to json schema Example of test implementation Let's create an automated test for next call: POST https://jsonplaceholder.typicode.com/users request with a request body [ { id : 1, name : SOME_NAME , username : SOME_USERNAME , email : Sincere@april.biz , address : { street : Kulas Light , suite : Apt. 556 , city : Gwenborough , zipcode : 92998-3874 , geo : { lat : -37.3159 , lng : 81.1496 } }, phone : 1-770-736-8031 x56442 , website : hildegard.org , company : { name : SOME_COMPANY_NAME , catchPhrase : Multi-layered client-server neural-net , bs : harness real-time e-markets } } ] and response body same as the request body Definition of request and response templates If we are going to send POST request we have to create request template with some placeholders that may be replaced by different arguments for different test flows. The best place to store these resources is src/test/resources/api package, try to keep REST hierarchy in package structure for better maintenance and visibility: Request (rq.json) and response (rs.json) templates have some placeholders that will be populated from the tests later on: While user.properties contains some default value which may be replaced later: REST service call domain object Now we are ready to create REST service domain object which will be used to interact with web service and perform additional response validations. Our domain object is located in /carina-demo/src/main/java/com/qaprosoft/carina/demo/api, make sure that it extends AbstractApiMethodV2 and triggers base class constructor for initialization. In general case you will specify path to request and response templates along with default properties files (all of them were created in previous step). Also we replace URL placeholder to set appropriate environment. package com.qaprosoft.carina.demo.api; import com.qaprosoft.carina.core.foundation.api.AbstractApiMethodV2; import com.qaprosoft.carina.core.foundation.utils.Configuration; public class PostUserMethod extends AbstractApiMethodV2 { public PostUserMethod() { super( api/users/_post/rq.json , api/users/_post/rs.json , api/users/user.properties ); replaceUrlPlaceholder( base_url , Configuration.getEnvArg( api_url )); } } HTTP method and path The last step before test implementation itself is the association of domain object class and required HTTP method and path. It should be defined in /carina-demo/src/main/resources/_api.properties file, key should be equal to domain class name, value has the following pattern {http_method}:{http_path}. HTTP path may contain placeholders, HTTP method should be one of the following variants: GET, POST, PUT, UPDATE, DELETE. #=====================================================# #=================== API methods ====================# #=====================================================# GetUserMethods=GET:${base_url}/users PostUserMethod=POST:${base_url}/users DeleteUserMethod=DELETE:${base_url}/users/1 PutPostsMethod=PUT:${base_url}/posts/1 PatchPostsMethod=PATCH:${base_url}/posts/1 API test API test is the general TestNG test, a class should extend APITest, in our case test extend it over AbstractTest that encapsulates some test data and login method. Test is located in /carina-demo/src/test/java/com/qaprosoft/carina/demo. package com.qaprosoft.carina.demo; import org.skyscreamer.jsonassert.JSONCompareMode; import org.testng.annotations.Test; import com.qaprosoft.apitools.validation.JsonCompareKeywords; import com.qaprosoft.carina.core.foundation.AbstractTest; import com.qaprosoft.carina.core.foundation.api.http.HttpResponseStatusType; import com.qaprosoft.carina.core.foundation.utils.ownership.MethodOwner; import com.qaprosoft.carina.demo.api.DeleteUserMethod; import com.qaprosoft.carina.demo.api.GetUserMethods; import com.qaprosoft.carina.demo.api.PostUserMethod; public class APISampleTest extends AbstractTest { @Test(description = JIRA#DEMO-0001 ) @MethodOwner(owner = qpsdemo ) public void testCreateUser() throws Exception { PostUserMethod api = new PostUserMethod(); api.expectResponseStatus(HttpResponseStatusType.CREATED_201); api.callAPI(); api.validateResponse(); } @Test(description = JIRA#DEMO-0002 ) @MethodOwner(owner = qpsdemo ) public void testCreateUserMissingSomeFields() throws Exception { PostUserMethod api = new PostUserMethod(); api.getProperties().remove( name ); api.getProperties().remove( username ); api.expectResponseStatus(HttpResponseStatusType.CREATED_201); api.callAPI(); api.validateResponse(); } @Test(description = JIRA#DEMO-0003 ) @MethodOwner(owner = qpsdemo ) public void testGetUsers() { GetUserMethods getUsersMethods = new GetUserMethods(); getUsersMethods.expectResponseStatus(HttpResponseStatusType.OK_200); getUsersMethods.callAPI(); getUsersMethods.validateResponse(JSONCompareMode.STRICT, JsonCompareKeywords.ARRAY_CONTAINS.getKey()); getUsersMethods.validateResponseAgainstJSONSchema( api/users/_get/rs.schema ); } } Test steps once again Create REST call object Specify properties for request/response placeholder Add headers if required Specify expected HTTP status Call API Validate response by template or parse some data by JSON path Make further calls using data from the previous call if needed Useful features Framework contains a list of useful feature for requests building and for responses validation. That makes easier support of such tests and at the same time minimizes the amount of test data. Wildcards In some cases you may need to generate data in the request to make request data unique. The best way of doing this is to use wildcards for data generation: { username : generate_word(10) , // Will generate random alphanumeric string with 10 characters zip : generate_number(6) , // Will generate random number with 6 digits birthday : generate_date(yyyy-MM-dd;0) // Will generate current date (first arg is date format, second is delta in days from now) } Other option is to specify placeholder in request template and then pass some generated value directly from the test method. Another useful way of wildcards usage is response validation. In some cases you may need to skip some values or validate by regex: { id : skip , // Will skip actual value validation and just verify id key presence signup_date : regex:\\\\d{4}-\\\\d{2}-\\\\d{2} , // Will validate date value by specified regex } Validation against JSON schema When you need to validate response structure regardless of the actual values you may use validation by JSON schema. In this case you need an actual response from service, let's say we have the following: { email : test@domain.com , firstName : SOME FIRST NAME , id : 11111 } Now we need to generate a schema (you may use any generator you like for example https://jsonschema.net/). IMPORTANT: For now schemas of version draft03 and draft04 are supported only. Please use the appropriate generator (e.g. https://www.liquid-technologies.com/online-json-to-schema-converter) In the tool like this you need to provide original JSON from response then choose some schema options (allow additional properties in objects, mark current object properties as required, hard-code some expected values, ect) and then generate the schema. Copy-paste generated schema into test resources and you're ready to use it in the test. Make sure that you change all flags required to true, after that create a new file in resources and place into appropriate endpoint package: { type : object , $schema : http://json-schema.org/draft-03/schema , id : http://jsonschema.net , required :true, properties :{ email : { type : string , id : http://jsonschema.net/email , required :true }, firstName : { type : string , id : http://jsonschema.net/firstName , required :true }, id : { type : number , id : http://jsonschema.net/id , required :true } } } And finally we call JSON validation from Java test as following: @Test public void testCheckJSONSchema() { PostUserLoginMethod api = new PostUserLoginMethod(); api.expectResponseStatus(HttpResponseStatusType.OK_200); api.callAPI(); api.validateResponseAgainstJSONSchema( api/testdata/users/login/_post/rs.schema ); } Building of requests with an array There are couple options for building request with an array of items provided by the framework: 1. First one use hardcoded placeholders for changeable variables. { name : ${name} , description : ${description} , label : ${label} , taskTypes : [ { name : ${task_name_1} , description : ${task_description_1} } #if task_name_2?exists || task_description_2?exists , { name : ${task_name_2} , description : ${task_description_2} } /#if #if task_name_3?exists || task_description_3?exists , { name : ${task_name_3} , description : ${task_description_3} } /#if ] } As you see this structure is pretty flexible. If you need 2 taskTypes items then you need to declare at least task_name_2 or task_description_2 property. If you need 3 items in addition to that you need to declare task_name_3 or task_description_3 property. Otherwise array will contain only 1 item. For instance you need to build json which contains taskTypes array. Then template with placeholders will be following: It's easy to extend such structure. You just need to add items with similar placeholders increasing their index. Another approach is based on using Freemarker loop. Here is the template example for the same JSON: #if task_name_1?exists #assign task_names = [task_name_1] #assign task_descriptions = [task_description_1] /#if #if task_name_2?exists #assign task_names = [task_name_1, task_name_2] #assign task_descriptions = [task_description_1, task_description_2] /#if #if task_name_3?exists #assign task_names = [task_name_1, task_name_2, task_name_3] #assign task_descriptions = [task_description_1, task_description_2, task_description_3] /#if { name : ${name} , description : ${description} , label : ${label} , taskTypes : [ #list 0..task_names?size-1 as i { name : ${task_names[i]} , description : ${task_descriptions[i]} } #if (i + 1) task_names?size , /#if /#list ] } This approach is useful when a structure of array item is pretty complex. So it makes sense to specify item attributes only once doing it inside #list operation. This approach also allows to choose amount of array items dynamically. But note that you should specify all properties for each item so this view can be not used for negative tests when you need to miss some properties. Validation of responses with an array Sometimes you could face a situation when you need to validate presence of only one (or couple) item in JSON array ignoring rest items. In such case you can use validation option ARRAY_CONTAINS. Here is code sample: JSONAssert.assertEquals(expectedRs, actualRs, new JsonKeywordsComparator(JSONCompareMode.STRICT, JsonCompareKeywords.ARRAY_CONTAINS.getKey() + content )); Expected array: { totalElements : skip , pageNumber : skip , pageSize : skip , content : [ { id : skip, brand : skip , clientName : CLIENT 1 }, { id : skip , brand : skip , clientName : CLIENT 2 } ] } And the actual response: { totalElements : 1017, pageNumber : 0, pageSize : 100, content : [ { id : 11111, brand : test , clientName : CLIENT 1 }, { id : 22222, brand : test , clientName : CLIENT 2 }, { id : 3333, brand : test , clientName : CLIENT 3 }, { id : 4444, brand : test , clientName : CLIENT 4 } ] } Deserialization of JSON Sometimes you may need to transform your json response to POJO. It may be useful if you need to validate your response using data from the database as expected data. For that purposes it's better to use Jackson libraries that are already included in carina framework. For that you have to prepare domain class based on your json structure. Some online resources provide such opportunities. For instance https://timboudreau.com/blog/json/read For example we need to deserialize array of Clients from json. Example of required domain object will be: import org.codehaus.jackson.annotate.JsonCreator; import org.codehaus.jackson.annotate.JsonProperty; public final class Clients { public final Client clients[]; @JsonCreator public Clients(@JsonProperty( clients ) Client[] clients) { this.clients = clients; } public static final class Client { public final long id; public final String brand; public final String clientName; ...... @JsonCreator public Client(@JsonProperty( id ) long id, @JsonProperty( brand ) String brand, @JsonProperty( clientName ) String clientName,.....) { this.id = id; this.brand = brand; this.clientName = clientName; ......... } } public Client[] getClients() { return clients; } } Pay attention that POJO fields names could differ from json properties. In this case @JsonProperty annotation can be used for mapping. Example of deserialization code: GetClientsMethod getClientsMethod = new GetClientsMethod( 11111 ); getClientsMethod.expectResponseStatus(HttpResponseStatusType.OK_200); String rs = getClientsMethod.callAPI().asString(); ObjectMapper mapper = new ObjectMapper(); Clients clients = mapper.readValue(rs, Clients.class); Then you can use POJO object for any kind of validation or for easy retrieving of required properties.","title":"API automation"},{"location":"automation/api/#introduction","text":"Rest API testing is a vital part of integration testing process, it may be used separately or in complex with web, mobile or DB testing. General process may be described by the following steps: Compile HTTP request with required meta data Send prepared data to the required server endpoint Validate HTTP status and response data Extract some response data for the next requests Build call to next (or same) endpoint using (or not using) data from the previous response Schema below demonstrates the sequence: From that perspective we decided to use the following instruments: Rest-assured - \"Testing and validation of REST services in Java is harder than in dynamic languages such as Ruby and Groovy. REST Assured brings the simplicity of using these languages into the Java domain.\" Freemarker - \"Apache FreeMarker is a template engine: a Java library to generate text output (HTML web pages, e-mails, configuration files, source code, etc.) based on templates and changing data.\" JsonPath - library for extracting data from JSON body JsonAssert - library for comparing of actual JSON body with expected one Json-schema-validator - library for validating of JSON body for matching to json schema","title":"Introduction"},{"location":"automation/api/#example-of-test-implementation","text":"Let's create an automated test for next call: POST https://jsonplaceholder.typicode.com/users request with a request body [ { id : 1, name : SOME_NAME , username : SOME_USERNAME , email : Sincere@april.biz , address : { street : Kulas Light , suite : Apt. 556 , city : Gwenborough , zipcode : 92998-3874 , geo : { lat : -37.3159 , lng : 81.1496 } }, phone : 1-770-736-8031 x56442 , website : hildegard.org , company : { name : SOME_COMPANY_NAME , catchPhrase : Multi-layered client-server neural-net , bs : harness real-time e-markets } } ] and response body same as the request body","title":"Example of test implementation"},{"location":"automation/api/#definition-of-request-and-response-templates","text":"If we are going to send POST request we have to create request template with some placeholders that may be replaced by different arguments for different test flows. The best place to store these resources is src/test/resources/api package, try to keep REST hierarchy in package structure for better maintenance and visibility: Request (rq.json) and response (rs.json) templates have some placeholders that will be populated from the tests later on: While user.properties contains some default value which may be replaced later:","title":"Definition of request and response templates"},{"location":"automation/api/#rest-service-call-domain-object","text":"Now we are ready to create REST service domain object which will be used to interact with web service and perform additional response validations. Our domain object is located in /carina-demo/src/main/java/com/qaprosoft/carina/demo/api, make sure that it extends AbstractApiMethodV2 and triggers base class constructor for initialization. In general case you will specify path to request and response templates along with default properties files (all of them were created in previous step). Also we replace URL placeholder to set appropriate environment. package com.qaprosoft.carina.demo.api; import com.qaprosoft.carina.core.foundation.api.AbstractApiMethodV2; import com.qaprosoft.carina.core.foundation.utils.Configuration; public class PostUserMethod extends AbstractApiMethodV2 { public PostUserMethod() { super( api/users/_post/rq.json , api/users/_post/rs.json , api/users/user.properties ); replaceUrlPlaceholder( base_url , Configuration.getEnvArg( api_url )); } }","title":"REST service call domain object"},{"location":"automation/api/#http-method-and-path","text":"The last step before test implementation itself is the association of domain object class and required HTTP method and path. It should be defined in /carina-demo/src/main/resources/_api.properties file, key should be equal to domain class name, value has the following pattern {http_method}:{http_path}. HTTP path may contain placeholders, HTTP method should be one of the following variants: GET, POST, PUT, UPDATE, DELETE. #=====================================================# #=================== API methods ====================# #=====================================================# GetUserMethods=GET:${base_url}/users PostUserMethod=POST:${base_url}/users DeleteUserMethod=DELETE:${base_url}/users/1 PutPostsMethod=PUT:${base_url}/posts/1 PatchPostsMethod=PATCH:${base_url}/posts/1","title":"HTTP method and path"},{"location":"automation/api/#api-test","text":"API test is the general TestNG test, a class should extend APITest, in our case test extend it over AbstractTest that encapsulates some test data and login method. Test is located in /carina-demo/src/test/java/com/qaprosoft/carina/demo. package com.qaprosoft.carina.demo; import org.skyscreamer.jsonassert.JSONCompareMode; import org.testng.annotations.Test; import com.qaprosoft.apitools.validation.JsonCompareKeywords; import com.qaprosoft.carina.core.foundation.AbstractTest; import com.qaprosoft.carina.core.foundation.api.http.HttpResponseStatusType; import com.qaprosoft.carina.core.foundation.utils.ownership.MethodOwner; import com.qaprosoft.carina.demo.api.DeleteUserMethod; import com.qaprosoft.carina.demo.api.GetUserMethods; import com.qaprosoft.carina.demo.api.PostUserMethod; public class APISampleTest extends AbstractTest { @Test(description = JIRA#DEMO-0001 ) @MethodOwner(owner = qpsdemo ) public void testCreateUser() throws Exception { PostUserMethod api = new PostUserMethod(); api.expectResponseStatus(HttpResponseStatusType.CREATED_201); api.callAPI(); api.validateResponse(); } @Test(description = JIRA#DEMO-0002 ) @MethodOwner(owner = qpsdemo ) public void testCreateUserMissingSomeFields() throws Exception { PostUserMethod api = new PostUserMethod(); api.getProperties().remove( name ); api.getProperties().remove( username ); api.expectResponseStatus(HttpResponseStatusType.CREATED_201); api.callAPI(); api.validateResponse(); } @Test(description = JIRA#DEMO-0003 ) @MethodOwner(owner = qpsdemo ) public void testGetUsers() { GetUserMethods getUsersMethods = new GetUserMethods(); getUsersMethods.expectResponseStatus(HttpResponseStatusType.OK_200); getUsersMethods.callAPI(); getUsersMethods.validateResponse(JSONCompareMode.STRICT, JsonCompareKeywords.ARRAY_CONTAINS.getKey()); getUsersMethods.validateResponseAgainstJSONSchema( api/users/_get/rs.schema ); } }","title":"API test"},{"location":"automation/api/#test-steps-once-again","text":"Create REST call object Specify properties for request/response placeholder Add headers if required Specify expected HTTP status Call API Validate response by template or parse some data by JSON path Make further calls using data from the previous call if needed","title":"Test steps once again"},{"location":"automation/api/#useful-features","text":"Framework contains a list of useful feature for requests building and for responses validation. That makes easier support of such tests and at the same time minimizes the amount of test data.","title":"Useful features"},{"location":"automation/api/#wildcards","text":"In some cases you may need to generate data in the request to make request data unique. The best way of doing this is to use wildcards for data generation: { username : generate_word(10) , // Will generate random alphanumeric string with 10 characters zip : generate_number(6) , // Will generate random number with 6 digits birthday : generate_date(yyyy-MM-dd;0) // Will generate current date (first arg is date format, second is delta in days from now) } Other option is to specify placeholder in request template and then pass some generated value directly from the test method. Another useful way of wildcards usage is response validation. In some cases you may need to skip some values or validate by regex: { id : skip , // Will skip actual value validation and just verify id key presence signup_date : regex:\\\\d{4}-\\\\d{2}-\\\\d{2} , // Will validate date value by specified regex }","title":"Wildcards"},{"location":"automation/api/#validation-against-json-schema","text":"When you need to validate response structure regardless of the actual values you may use validation by JSON schema. In this case you need an actual response from service, let's say we have the following: { email : test@domain.com , firstName : SOME FIRST NAME , id : 11111 } Now we need to generate a schema (you may use any generator you like for example https://jsonschema.net/). IMPORTANT: For now schemas of version draft03 and draft04 are supported only. Please use the appropriate generator (e.g. https://www.liquid-technologies.com/online-json-to-schema-converter) In the tool like this you need to provide original JSON from response then choose some schema options (allow additional properties in objects, mark current object properties as required, hard-code some expected values, ect) and then generate the schema. Copy-paste generated schema into test resources and you're ready to use it in the test. Make sure that you change all flags required to true, after that create a new file in resources and place into appropriate endpoint package: { type : object , $schema : http://json-schema.org/draft-03/schema , id : http://jsonschema.net , required :true, properties :{ email : { type : string , id : http://jsonschema.net/email , required :true }, firstName : { type : string , id : http://jsonschema.net/firstName , required :true }, id : { type : number , id : http://jsonschema.net/id , required :true } } } And finally we call JSON validation from Java test as following: @Test public void testCheckJSONSchema() { PostUserLoginMethod api = new PostUserLoginMethod(); api.expectResponseStatus(HttpResponseStatusType.OK_200); api.callAPI(); api.validateResponseAgainstJSONSchema( api/testdata/users/login/_post/rs.schema ); }","title":"Validation against JSON schema"},{"location":"automation/api/#building-of-requests-with-an-array","text":"There are couple options for building request with an array of items provided by the framework: 1. First one use hardcoded placeholders for changeable variables. { name : ${name} , description : ${description} , label : ${label} , taskTypes : [ { name : ${task_name_1} , description : ${task_description_1} } #if task_name_2?exists || task_description_2?exists , { name : ${task_name_2} , description : ${task_description_2} } /#if #if task_name_3?exists || task_description_3?exists , { name : ${task_name_3} , description : ${task_description_3} } /#if ] } As you see this structure is pretty flexible. If you need 2 taskTypes items then you need to declare at least task_name_2 or task_description_2 property. If you need 3 items in addition to that you need to declare task_name_3 or task_description_3 property. Otherwise array will contain only 1 item. For instance you need to build json which contains taskTypes array. Then template with placeholders will be following: It's easy to extend such structure. You just need to add items with similar placeholders increasing their index. Another approach is based on using Freemarker loop. Here is the template example for the same JSON: #if task_name_1?exists #assign task_names = [task_name_1] #assign task_descriptions = [task_description_1] /#if #if task_name_2?exists #assign task_names = [task_name_1, task_name_2] #assign task_descriptions = [task_description_1, task_description_2] /#if #if task_name_3?exists #assign task_names = [task_name_1, task_name_2, task_name_3] #assign task_descriptions = [task_description_1, task_description_2, task_description_3] /#if { name : ${name} , description : ${description} , label : ${label} , taskTypes : [ #list 0..task_names?size-1 as i { name : ${task_names[i]} , description : ${task_descriptions[i]} } #if (i + 1) task_names?size , /#if /#list ] } This approach is useful when a structure of array item is pretty complex. So it makes sense to specify item attributes only once doing it inside #list operation. This approach also allows to choose amount of array items dynamically. But note that you should specify all properties for each item so this view can be not used for negative tests when you need to miss some properties.","title":"Building of requests with an array"},{"location":"automation/api/#validation-of-responses-with-an-array","text":"Sometimes you could face a situation when you need to validate presence of only one (or couple) item in JSON array ignoring rest items. In such case you can use validation option ARRAY_CONTAINS. Here is code sample: JSONAssert.assertEquals(expectedRs, actualRs, new JsonKeywordsComparator(JSONCompareMode.STRICT, JsonCompareKeywords.ARRAY_CONTAINS.getKey() + content )); Expected array: { totalElements : skip , pageNumber : skip , pageSize : skip , content : [ { id : skip, brand : skip , clientName : CLIENT 1 }, { id : skip , brand : skip , clientName : CLIENT 2 } ] } And the actual response: { totalElements : 1017, pageNumber : 0, pageSize : 100, content : [ { id : 11111, brand : test , clientName : CLIENT 1 }, { id : 22222, brand : test , clientName : CLIENT 2 }, { id : 3333, brand : test , clientName : CLIENT 3 }, { id : 4444, brand : test , clientName : CLIENT 4 } ] }","title":"Validation of responses with an array"},{"location":"automation/api/#deserialization-of-json","text":"Sometimes you may need to transform your json response to POJO. It may be useful if you need to validate your response using data from the database as expected data. For that purposes it's better to use Jackson libraries that are already included in carina framework. For that you have to prepare domain class based on your json structure. Some online resources provide such opportunities. For instance https://timboudreau.com/blog/json/read For example we need to deserialize array of Clients from json. Example of required domain object will be: import org.codehaus.jackson.annotate.JsonCreator; import org.codehaus.jackson.annotate.JsonProperty; public final class Clients { public final Client clients[]; @JsonCreator public Clients(@JsonProperty( clients ) Client[] clients) { this.clients = clients; } public static final class Client { public final long id; public final String brand; public final String clientName; ...... @JsonCreator public Client(@JsonProperty( id ) long id, @JsonProperty( brand ) String brand, @JsonProperty( clientName ) String clientName,.....) { this.id = id; this.brand = brand; this.clientName = clientName; ......... } } public Client[] getClients() { return clients; } } Pay attention that POJO fields names could differ from json properties. In this case @JsonProperty annotation can be used for mapping. Example of deserialization code: GetClientsMethod getClientsMethod = new GetClientsMethod( 11111 ); getClientsMethod.expectResponseStatus(HttpResponseStatusType.OK_200); String rs = getClientsMethod.callAPI().asString(); ObjectMapper mapper = new ObjectMapper(); Clients clients = mapper.readValue(rs, Clients.class); Then you can use POJO object for any kind of validation or for easy retrieving of required properties.","title":"Deserialization of JSON"},{"location":"automation/mobile/","text":"Carina framework provides the useful and elegant way of Mobile (Android and iOS) Test Automation. The best practices have a lot in common with web automation, so it\u2019s highly recommended to look through Web automation article . Mobile special requirements: To run mobile tests Appium is used instead of Selenium. There are 2 versions of Appium: desktop and console and both are good for Carina. Appium has to be running every time before the test run. Android special requirements: Android SDK(part of Android Studio ) is an important component for work. Pay attention that after installing Android Studio sometimes (depends on version) you need to additionally install ADB and aapt (for mac only). Edit your PATH variable and add ANDROID_HOME (path to \u201csdk\u201d folder) to PATH. Hint: sometimes (especially on Mac) you need to add paths to important folders inside sdk, such as \u201cplatform-tools\u201d (here is ADB located), \u201ctools\u201d and \u201cbuild-tools\u201d(here is aapt located). .apk file - installation file of a program that\u2019s being tested is required, the same for both - real device and emulator. iOS special requirements: Xcode is vital component for work, but unfortunately, it\u2019s Mac-used only. It\u2019s impossible to do iOS automation on Windows. Installation file of a program that\u2019s being tested is required. For real device it\u2019s .ipa file and for simulator it\u2019s .app file. .app file should be provided by developers and has special signatures to work correctly, but automation on simulator is free. On the other hand, the license is needed to work with the real device. Mobile config properties We could provide any Appium capabilty in config.properties file using capabilities.name=value format. In the table below we are providing description for the most popular mobile capabilities: Attribute Meaning Default value Example capabilities.deviceName Device name for report n/a Sumsung_Galaxy_J5 capabilities.deviceType The only custom carina capability to detmine type of device n/a phone/tablet/tv... capabilities.platformName Name of mobile platform n/a Android/iOS/AndroidTV/tvOS capabilities.platformVersion Version of mobile platform n/a 6.0.1 capabilities.automationName Name of programm using for automation (for Android 7+ use uiautomator2 instead of Appium) n/a Appium/uiautomator2/XCUITest capabilities.app Path to application (apk/app/ipa) which is tested, Can be provided as a pattern from AWS S3 storage with automatic downloading n/a D:/application.apk, s3://qaprosoft.com/android/myapk.*-release.apk capabilities.newCommandTimeout New implicit timeout in seconds to wait for element for mobile automation n/a 180 capabilities.udid Unique Device ID n/a 759b543c capabilities.device Specifies a particular mobile device for the test environment on Browserstack n/a Galaxy Note 8, iPhone X capabilities.os_version Version of OS for Browserstack n/a ios, android capabilities.remoteURL Remote URL for using Selenium Grid n/a 'http://localhost:4444/wd/hub' capabilities.appActivity Activity name for the Android activity you want to launch from your package. n/a com.amazon.mShop.HomeActivity capabilities.appPackage Java package of the Android app you want to run n/a in.amazon.mShop.android.shopping capabilities.noSign Skip checking and signing of app with debug keys, will work only with UiAutomator and not with selendroid, default false n/a true, false capabilities.autoGrantPermissions Have Appium automatically determine which permissions your app requires and grant them to the app on install. Defaults to false n/a true, false capabilities.skipUnlock Skip the device unlock process. Defaults to false n/a true, false Important: though it\u2019s not necessary to run Selenium, seleniumum_host must be defined. file _config.properties should be located in src/main/resources Example for Android of _config.properties: #=====================================================# #================= Configuration v2 ==================# #=====================================================# selenium_host=http://localhost:4723/wd/hub extra_selenium_driver_host=http://localhost:4444/wd/hub #============ Android Local Mobile ===================# ##for Android 7+ use uiautomator2 instead of Appium capabilities.automationName=uiautomator2 capabilities.appPackage= capabilities.deviceName=Nexus_6 capabilities.udid=emulator-5554 capabilities.noSign=true capabilities.deviceType=phone capabilities.app=/Users/{user}/qaprosoft/mmf/test-app.apk capabilities.platformName=ANDROID capabilities.autoGrantPermissions=true #=====================================================# Note: To get device\u2019s unique id (UDID) command \u201cadb devices\u201d is used. This command provides a list of devices attached with their UDIDs. For real device it will look like \u201c759b543c\u201d (can be shorter or longer) and for emulator it will be like \u201cemulator-5554\u201d. Example for iOS of _config.properties: #=====================================================# #================= Configuration v2 ==================# #=====================================================# selenium_host=http://localhost:4723/wd/hub extra_selenium_driver_host=http://localhost:4444/wd/hub #======== Local Run for iOS Mobile ===============# capabilities.app=/Users/{user}/qaprosoft/mmf/TestApp-iphonesimulator.app capabilities.platformName=iOS capabilities.deviceName=iPhone X capabilities.platform=iOS capabilities.deviceType=phone capabilities.platformVersion=11.4 capabilities.automationName=XCUITest capabilities.udid=D85FF1CD-D95F-4B78-A007-77A11EBD3ABB capabilities.newCommandTimeout=1800 #=====================================================# Note: To get device\u2019s unique id (UDID) for emulator command \u201cxcrun simctl list\u201d is useful. It will show the list of simulators with their names, iOS versions, udids and statuses (shutdown or booted). To get UDID from the real device you have to plug your phone into a computer and copy it out of iTunes: 1. Launch iTunes and connect your iPhone. 2. In the right panel, locate the information about your iPhone, including its name, capacity, software version, serial number, and phone number. 3. Reveal the Identifier by clicking on Serial Number. Implementation of Page Objects: The main idea is the same as in web-testing except that css isn\u2019t used in Mobile. ExtendedWebElement(Carina\u2019s implementation of WebElement) is used instead of WebElement and it has methods similar to those that WebElement has but more reliable and convenient. Important : * Page should extends com.qaprosoft.carina.core.gui.AbstractPage * Use com.qaprosoft.carina.core.foundation.webdriver.decorator.ExtendedWebElement instead of Selenium WebElement * Locate Page Object classes in src/main/java package How to find locators for Android application To obtain locators of web elements from Android app different programs are used, such as latest Appium itself and convenient Android SDK tool: uiautomatorviewer. It\u2019s located in $ANDROID_HOME/tools/bin and could be launched using command line (./uiautomatorviewer). Example: @FindBy(xpath = //*[@resource-id='name_input'] ) private ExtendedWebElement input; How to find locators for iOS application To obtain locators of web elements from iOS app different programs are used, such as GUI Appium itself and convenient Macaca App Inspector . To faster work @Predicate is used. With predicates complicate \u201cxpaths\u201d can\u2019t be used, but \u201cid\u201d, \u201cname\u201d, \u201cclassName\u201d and etc. search are sufficient. Example: @FindBy(xpath = name = 'DONE' ) @Predicate protected ExtendedWebElement doneButton; Another possibility to find the element is to use @ClassChain annotation. Example: @FindBy(xpath = **/XCUIElementTypeStaticText[`name=='Developer'`] ) @ClassChain protected ExtendedWebElement developerText; Starting from Carina version 6.0.12 it's recommended to use @ExtendedFindBy() annotation Example: @ExtendedFindBy(iosClassChain = **/XCUIElementTypeStaticText[`name=='Developer'`] ) protected ExtendedWebElement developerText; or @ExtendedFindBy(iosPredicate = name = 'DONE' ) protected ExtendedWebElement developerText; Implementation of tests Carina framework uses TestNG for test organization. In general, test represents manipulation with Page Objects and additional validations of UI events. Here is sample test implementation: public class SampleTest extends AbstractTest { String name = My name ; String carName = Mercedes ; @Test() public void sendName() { FirstPage firstPage = new FirstPage(getDriver()); GoogleTestPage googleTestPage = new GoogleTestPage(getDriver()); MyWayOfHelloPage myWayOfHelloPage = new MyWayOfHelloPage(getDriver()); firstPage.clickOnGooleButton(); googleTestPage.setName(name); googleTestPage.clickOnSpinner(); googleTestPage.selectCar(carName); googleTestPage.clickOnSendYourNameButton(); Assert.assertTrue(myWayOfHelloPage.isTextElementPresent(name), \u201cAssert message\u201d ); Assert.assertTrue(myWayOfHelloPage.isTextElementPresent(carName.toLowerCase()), \u201cAssert message\u201d ); } } Important: Test class should extend com.qaprosoft.carina.core.foundation.AbstractTest Test method should start with org.testng.annotations.Test annotation Use getDriver() method to get driver instance in test Locate tests in src/test/java source folder How to use CustomTypePageFactory Carina provides technique to combine Desktop/iOS/Android tests into the single test class/method. For all platforms you should use Page Object Design Pattern but in a bit improved way. Each page has abstract declaration and different implementations if needed (by default 3 ones should be enough: Desktop, iOS/Android): Common abstract page in common package with common methods and elements; Desktop page in desktop package with desktop methods and elements; iOS page in ios package with iOS methods and elements; Android page in android package with Android methods and elements. Child pages should extends BasePage implementing all abstract methods. Annotation @DeviceType would provide information about device type and parent (common) page. Examples: Common (Base) Page public abstract class HomePageBase extends AbstractPage { public HomePageBase(WebDriver driver) { super(driver); } public abstract PhoneFinderPageBase openPhoneFinder(); public abstract ComparePageBase openComparePage(); } Android Page @DeviceType(pageType = DeviceType.Type.ANDROID_PHONE, parentClass = HomePageBase.class) public class HomePage extends HomePageBase { @FindBy(xpath = //android.widget.TextView[@resource-id='itemTitle' and @text='Phone Finder'] ) protected ExtendedWebElement phoneFinderTextView; @FindBy(xpath = //android.widget.TextView[@resource-id='itemTitle' and @text='compare'] ) protected ExtendedWebElement compareTextView; public HomePage(WebDriver driver) { super(driver); } @Override public PhoneFinderPageBase openPhoneFinder() { phoneFinderTextView.click(); return CustomTypePageFactory.initPage(getDriver(), PhoneFinderPageBase.class); } @Override public ComparePageBase openComparePage() { compareTextView.click(); return CustomTypePageFactory.initPage(getDriver(), ComparePageBase.class); } iOS Page @DeviceType(pageType = Type.IOS_PHONE, parentClass = HomePageBase.class) public class HomePage extends HomePageBase { @FindBy(xpath = name = 'Phone Finder' ) @Predicate private ExtendedWebElement phoneFinderTextView; @FindBy(xpath = name = 'Compare' ) @Predicate private ExtendedWebElement compareTextView; public HomePage(WebDriver driver) { super(driver); } @Override public PhoneFinderPageBase openPhoneFinder() { phoneFinderTextView.click(); return CustomTypePageFactory.initPage(getDriver(), PhoneFinderPageBase.class); } @Override public ComparePageBase openComparePage() { compareTextView.click(); return CustomTypePageFactory.initPage(getDriver(), ComparePageBase.class); } Inside each tests Carina operates with abstract base page using CustomTypePageFactory and substitute it by real implementation based on desired capabilities in _config.properties etc. Example: @Test public void comparePhonesTest() { HomePageBase homePage = CustomTypePageFactory.initPage(getDriver(), HomePageBase.class); ComparePageBase phoneFinderPage = homePage.openCompare(); ... } If there are differences in application according to OS version just implement pages for different versions and include version parameter in @DeviceTypeae for each page Example: For Android 8 (either 8.0 or 8.1) @DeviceType(pageType = DeviceType.Type.ANDROID_PHONE, version = \u201c8\u201d, parentClass = HomePageBase.class) public class HomePage extends HomePageBase { Or for specific version @DeviceType(pageType = DeviceType.Type.ANDROID_PHONE, version = \u201c8.1\u201d, parentClass = HomePageBase.class) public class HomePage extends HomePageBase { How to use Find by image strategy Find by image strategy is based on appium implementation . Be sure you have openCV libraries installed to your system . Find by image logic is covered by @ExtendedFindBy annotation. Example: @ExtendedFindBy(image = images/singUp6.png ) private ExtendedWebElement signUpBtn; Available list of actions with image elements and related driver settings are listed here . Basically all you need is to create image template of the element in .png format and place it to your project. We suggest to use src/main/resources/ folder to store images. Be sure your image size less then real screen size. Real iOS screen sizes are listed here in 'UIKit Size (Points)' column.","title":"Mobile automation"},{"location":"automation/mobile/#mobile-special-requirements","text":"To run mobile tests Appium is used instead of Selenium. There are 2 versions of Appium: desktop and console and both are good for Carina. Appium has to be running every time before the test run.","title":"Mobile special requirements:"},{"location":"automation/mobile/#android-special-requirements","text":"Android SDK(part of Android Studio ) is an important component for work. Pay attention that after installing Android Studio sometimes (depends on version) you need to additionally install ADB and aapt (for mac only). Edit your PATH variable and add ANDROID_HOME (path to \u201csdk\u201d folder) to PATH. Hint: sometimes (especially on Mac) you need to add paths to important folders inside sdk, such as \u201cplatform-tools\u201d (here is ADB located), \u201ctools\u201d and \u201cbuild-tools\u201d(here is aapt located). .apk file - installation file of a program that\u2019s being tested is required, the same for both - real device and emulator.","title":"Android special requirements:"},{"location":"automation/mobile/#ios-special-requirements","text":"Xcode is vital component for work, but unfortunately, it\u2019s Mac-used only. It\u2019s impossible to do iOS automation on Windows. Installation file of a program that\u2019s being tested is required. For real device it\u2019s .ipa file and for simulator it\u2019s .app file. .app file should be provided by developers and has special signatures to work correctly, but automation on simulator is free. On the other hand, the license is needed to work with the real device.","title":"iOS special requirements:"},{"location":"automation/mobile/#mobile-config-properties","text":"We could provide any Appium capabilty in config.properties file using capabilities.name=value format. In the table below we are providing description for the most popular mobile capabilities: Attribute Meaning Default value Example capabilities.deviceName Device name for report n/a Sumsung_Galaxy_J5 capabilities.deviceType The only custom carina capability to detmine type of device n/a phone/tablet/tv... capabilities.platformName Name of mobile platform n/a Android/iOS/AndroidTV/tvOS capabilities.platformVersion Version of mobile platform n/a 6.0.1 capabilities.automationName Name of programm using for automation (for Android 7+ use uiautomator2 instead of Appium) n/a Appium/uiautomator2/XCUITest capabilities.app Path to application (apk/app/ipa) which is tested, Can be provided as a pattern from AWS S3 storage with automatic downloading n/a D:/application.apk, s3://qaprosoft.com/android/myapk.*-release.apk capabilities.newCommandTimeout New implicit timeout in seconds to wait for element for mobile automation n/a 180 capabilities.udid Unique Device ID n/a 759b543c capabilities.device Specifies a particular mobile device for the test environment on Browserstack n/a Galaxy Note 8, iPhone X capabilities.os_version Version of OS for Browserstack n/a ios, android capabilities.remoteURL Remote URL for using Selenium Grid n/a 'http://localhost:4444/wd/hub' capabilities.appActivity Activity name for the Android activity you want to launch from your package. n/a com.amazon.mShop.HomeActivity capabilities.appPackage Java package of the Android app you want to run n/a in.amazon.mShop.android.shopping capabilities.noSign Skip checking and signing of app with debug keys, will work only with UiAutomator and not with selendroid, default false n/a true, false capabilities.autoGrantPermissions Have Appium automatically determine which permissions your app requires and grant them to the app on install. Defaults to false n/a true, false capabilities.skipUnlock Skip the device unlock process. Defaults to false n/a true, false Important: though it\u2019s not necessary to run Selenium, seleniumum_host must be defined. file _config.properties should be located in src/main/resources","title":"Mobile config properties"},{"location":"automation/mobile/#example-for-android-of-_configproperties","text":"#=====================================================# #================= Configuration v2 ==================# #=====================================================# selenium_host=http://localhost:4723/wd/hub extra_selenium_driver_host=http://localhost:4444/wd/hub #============ Android Local Mobile ===================# ##for Android 7+ use uiautomator2 instead of Appium capabilities.automationName=uiautomator2 capabilities.appPackage= capabilities.deviceName=Nexus_6 capabilities.udid=emulator-5554 capabilities.noSign=true capabilities.deviceType=phone capabilities.app=/Users/{user}/qaprosoft/mmf/test-app.apk capabilities.platformName=ANDROID capabilities.autoGrantPermissions=true #=====================================================# Note: To get device\u2019s unique id (UDID) command \u201cadb devices\u201d is used. This command provides a list of devices attached with their UDIDs. For real device it will look like \u201c759b543c\u201d (can be shorter or longer) and for emulator it will be like \u201cemulator-5554\u201d.","title":"Example for Android of _config.properties:"},{"location":"automation/mobile/#example-for-ios-of-_configproperties","text":"#=====================================================# #================= Configuration v2 ==================# #=====================================================# selenium_host=http://localhost:4723/wd/hub extra_selenium_driver_host=http://localhost:4444/wd/hub #======== Local Run for iOS Mobile ===============# capabilities.app=/Users/{user}/qaprosoft/mmf/TestApp-iphonesimulator.app capabilities.platformName=iOS capabilities.deviceName=iPhone X capabilities.platform=iOS capabilities.deviceType=phone capabilities.platformVersion=11.4 capabilities.automationName=XCUITest capabilities.udid=D85FF1CD-D95F-4B78-A007-77A11EBD3ABB capabilities.newCommandTimeout=1800 #=====================================================# Note: To get device\u2019s unique id (UDID) for emulator command \u201cxcrun simctl list\u201d is useful. It will show the list of simulators with their names, iOS versions, udids and statuses (shutdown or booted). To get UDID from the real device you have to plug your phone into a computer and copy it out of iTunes: 1. Launch iTunes and connect your iPhone. 2. In the right panel, locate the information about your iPhone, including its name, capacity, software version, serial number, and phone number. 3. Reveal the Identifier by clicking on Serial Number.","title":"Example for iOS of _config.properties:"},{"location":"automation/mobile/#implementation-of-page-objects","text":"The main idea is the same as in web-testing except that css isn\u2019t used in Mobile. ExtendedWebElement(Carina\u2019s implementation of WebElement) is used instead of WebElement and it has methods similar to those that WebElement has but more reliable and convenient. Important : * Page should extends com.qaprosoft.carina.core.gui.AbstractPage * Use com.qaprosoft.carina.core.foundation.webdriver.decorator.ExtendedWebElement instead of Selenium WebElement * Locate Page Object classes in src/main/java package","title":"Implementation of Page Objects:"},{"location":"automation/mobile/#how-to-find-locators-for-android-application","text":"To obtain locators of web elements from Android app different programs are used, such as latest Appium itself and convenient Android SDK tool: uiautomatorviewer. It\u2019s located in $ANDROID_HOME/tools/bin and could be launched using command line (./uiautomatorviewer). Example: @FindBy(xpath = //*[@resource-id='name_input'] ) private ExtendedWebElement input;","title":"How to find locators for Android application"},{"location":"automation/mobile/#how-to-find-locators-for-ios-application","text":"To obtain locators of web elements from iOS app different programs are used, such as GUI Appium itself and convenient Macaca App Inspector . To faster work @Predicate is used. With predicates complicate \u201cxpaths\u201d can\u2019t be used, but \u201cid\u201d, \u201cname\u201d, \u201cclassName\u201d and etc. search are sufficient. Example: @FindBy(xpath = name = 'DONE' ) @Predicate protected ExtendedWebElement doneButton; Another possibility to find the element is to use @ClassChain annotation. Example: @FindBy(xpath = **/XCUIElementTypeStaticText[`name=='Developer'`] ) @ClassChain protected ExtendedWebElement developerText; Starting from Carina version 6.0.12 it's recommended to use @ExtendedFindBy() annotation Example: @ExtendedFindBy(iosClassChain = **/XCUIElementTypeStaticText[`name=='Developer'`] ) protected ExtendedWebElement developerText; or @ExtendedFindBy(iosPredicate = name = 'DONE' ) protected ExtendedWebElement developerText;","title":"How to find locators for iOS application"},{"location":"automation/mobile/#implementation-of-tests","text":"Carina framework uses TestNG for test organization. In general, test represents manipulation with Page Objects and additional validations of UI events. Here is sample test implementation: public class SampleTest extends AbstractTest { String name = My name ; String carName = Mercedes ; @Test() public void sendName() { FirstPage firstPage = new FirstPage(getDriver()); GoogleTestPage googleTestPage = new GoogleTestPage(getDriver()); MyWayOfHelloPage myWayOfHelloPage = new MyWayOfHelloPage(getDriver()); firstPage.clickOnGooleButton(); googleTestPage.setName(name); googleTestPage.clickOnSpinner(); googleTestPage.selectCar(carName); googleTestPage.clickOnSendYourNameButton(); Assert.assertTrue(myWayOfHelloPage.isTextElementPresent(name), \u201cAssert message\u201d ); Assert.assertTrue(myWayOfHelloPage.isTextElementPresent(carName.toLowerCase()), \u201cAssert message\u201d ); } } Important: Test class should extend com.qaprosoft.carina.core.foundation.AbstractTest Test method should start with org.testng.annotations.Test annotation Use getDriver() method to get driver instance in test Locate tests in src/test/java source folder","title":"Implementation of tests"},{"location":"automation/mobile/#how-to-use-customtypepagefactory","text":"Carina provides technique to combine Desktop/iOS/Android tests into the single test class/method. For all platforms you should use Page Object Design Pattern but in a bit improved way. Each page has abstract declaration and different implementations if needed (by default 3 ones should be enough: Desktop, iOS/Android): Common abstract page in common package with common methods and elements; Desktop page in desktop package with desktop methods and elements; iOS page in ios package with iOS methods and elements; Android page in android package with Android methods and elements. Child pages should extends BasePage implementing all abstract methods. Annotation @DeviceType would provide information about device type and parent (common) page. Examples: Common (Base) Page public abstract class HomePageBase extends AbstractPage { public HomePageBase(WebDriver driver) { super(driver); } public abstract PhoneFinderPageBase openPhoneFinder(); public abstract ComparePageBase openComparePage(); } Android Page @DeviceType(pageType = DeviceType.Type.ANDROID_PHONE, parentClass = HomePageBase.class) public class HomePage extends HomePageBase { @FindBy(xpath = //android.widget.TextView[@resource-id='itemTitle' and @text='Phone Finder'] ) protected ExtendedWebElement phoneFinderTextView; @FindBy(xpath = //android.widget.TextView[@resource-id='itemTitle' and @text='compare'] ) protected ExtendedWebElement compareTextView; public HomePage(WebDriver driver) { super(driver); } @Override public PhoneFinderPageBase openPhoneFinder() { phoneFinderTextView.click(); return CustomTypePageFactory.initPage(getDriver(), PhoneFinderPageBase.class); } @Override public ComparePageBase openComparePage() { compareTextView.click(); return CustomTypePageFactory.initPage(getDriver(), ComparePageBase.class); } iOS Page @DeviceType(pageType = Type.IOS_PHONE, parentClass = HomePageBase.class) public class HomePage extends HomePageBase { @FindBy(xpath = name = 'Phone Finder' ) @Predicate private ExtendedWebElement phoneFinderTextView; @FindBy(xpath = name = 'Compare' ) @Predicate private ExtendedWebElement compareTextView; public HomePage(WebDriver driver) { super(driver); } @Override public PhoneFinderPageBase openPhoneFinder() { phoneFinderTextView.click(); return CustomTypePageFactory.initPage(getDriver(), PhoneFinderPageBase.class); } @Override public ComparePageBase openComparePage() { compareTextView.click(); return CustomTypePageFactory.initPage(getDriver(), ComparePageBase.class); } Inside each tests Carina operates with abstract base page using CustomTypePageFactory and substitute it by real implementation based on desired capabilities in _config.properties etc. Example: @Test public void comparePhonesTest() { HomePageBase homePage = CustomTypePageFactory.initPage(getDriver(), HomePageBase.class); ComparePageBase phoneFinderPage = homePage.openCompare(); ... } If there are differences in application according to OS version just implement pages for different versions and include version parameter in @DeviceTypeae for each page Example: For Android 8 (either 8.0 or 8.1) @DeviceType(pageType = DeviceType.Type.ANDROID_PHONE, version = \u201c8\u201d, parentClass = HomePageBase.class) public class HomePage extends HomePageBase { Or for specific version @DeviceType(pageType = DeviceType.Type.ANDROID_PHONE, version = \u201c8.1\u201d, parentClass = HomePageBase.class) public class HomePage extends HomePageBase {","title":"How to use CustomTypePageFactory"},{"location":"automation/mobile/#how-to-use-find-by-image-strategy","text":"Find by image strategy is based on appium implementation . Be sure you have openCV libraries installed to your system . Find by image logic is covered by @ExtendedFindBy annotation. Example: @ExtendedFindBy(image = images/singUp6.png ) private ExtendedWebElement signUpBtn; Available list of actions with image elements and related driver settings are listed here . Basically all you need is to create image template of the element in .png format and place it to your project. We suggest to use src/main/resources/ folder to store images. Be sure your image size less then real screen size. Real iOS screen sizes are listed here in 'UIKit Size (Points)' column.","title":"How to use Find by image strategy"},{"location":"automation/web/","text":"Carina framework follows Selenium best practices for web tests automation. If you are familiar with Selenium WebDriver and have already implemented few tests with Page Object pattern the following guide will be pretty much easy for understanding. We have chosen GSM Arena public web site for demonstration purposes, all the test source code is located in carina-demo Github repo. Implementation of Page Objects When you are writing functional tests using Selenium a major part of your code will consist of interactions with the web interface you are testing through the WebDriver API. After fetching elements you will verify some state of the element through various assertions and move on to fetching the next element. You may find WebElements directly in your tests: List WebElement zipCodes = driver.findElements(By.id( zipCodes )); for (WebElement zipCode : zipCodes) { if (zipCode.getText().equals( 12345 )){ zipCode.click(); break; } } WebElement city = driver.findElement(By.id( city )); assertEquals( MyCityName , city.getText()); So some of the typical problems for this type of Selenium test are: Test cases are difficult to read Changes in the UI breaks multiple tests often in several places Duplication of selectors both inside and across tests - no reuse So instead of having each test fetch elements directly and being fragile towards UI changes, the Page Object Pattern introduces what is basically a decoupling layer. You create an object that represents the UI you want to test, which could be a whole page or a significant part of it. The responsibility of this object is to wrap HTML elements and encapsulate interactions with the UI, meaning that this is where all calls to WebDriver will go. This is where most WebElements are. And this is the only place you need to modify when the UI changes. In general Page Object contains locators of the elements located on the page and some business logic that may be reused by different tests: public class ModelInfoPage extends AbstractPage { @FindBy(css = .help-display strong ) private ExtendedWebElement displayInfoLabel; @FindBy(css = .help-camera strong ) private ExtendedWebElement cameraInfoLabel; @FindBy(css = .help-expansion strong ) private ExtendedWebElement displayRamLabel; @FindBy(css = .help-battery strong ) private ExtendedWebElement batteryInfoLabel; public ModelInfoPage(WebDriver driver) { super(driver); } public String readDisplay() { assertElementPresent(displayInfoLabel); return displayInfoLabel.getText(); } public String readCamera() { assertElementPresent(cameraInfoLabel); return cameraInfoLabel.getText(); } public String readRam() { assertElementPresent(displayRamLabel); return displayRamLabel.getText(); } public String readBattery() { assertElementPresent(displayInfoLabel); return batteryInfoLabel.getText(); } } Important: Page should extend com.qaprosoft.carina.core.gui.AbstractPage Use com.qaprosoft.carina.core.foundation.webdriver.decorator.ExtendedWebElement instead of Selenium WebElement Locate Page Object classes in src/main/java Implementation of UI Components In some cases it is useful to implement UI Objects that may be reused between multiple Page Objects, for top menu or footer instance may be shared between multiple pages: public class FooterMenu extends AbstractUIObject { @FindBy(linkText = Home ) private ExtendedWebElement homeLink; @FindBy(linkText = Compare ) private ExtendedWebElement compareLink; public FooterMenu(WebDriver driver, SearchContext searchContext) { super(driver, searchContext); } public HomePage openHomePage() { homeLink.click(); return new HomePage(driver); } public CompareModelsPage openComparePage() { compareLink.click(); return new CompareModelsPage(driver); } } And then you can use that in Page Object: public class HomePage extends AbstractPage { @FindBy(id = footmenu ) private FooterMenu footerMenu; @FindBy(xpath = //div[contains(@class, 'brandmenu-v2')]//a ) private List ExtendedWebElement brandLinks; public HomePage(WebDriver driver) { super(driver); } public FooterMenu getFooterMenu() { return footerMenu; } public BrandModelsPage selectBrand(String brand) { LOGGER.info( selecting ' + brand + ' brand... ); for (ExtendedWebElement brandLink : brandLinks) { String currentBrand = brandLink.getText(); LOGGER.info( currentBrand: + currentBrand); if (brand.equalsIgnoreCase(currentBrand)) { brandLink.click(); return new BrandModelsPage(driver); } } throw new RuntimeException( Unable to open brand: + brand); } } Important: UI Object should extend com.qaprosoft.carina.core.gui.AbstractUIObject You should call super constructor super(driver, searchContext) where searchContext is an instance of org.openqa.selenium.SearchContext Locate UI Object classes in src/main/java source folder Implementation of tests Carina framework uses TestNG for test organization. In general, test represents manipulation with Page Objects and additional validations of UI events. Here is sample test implementation: public class WebSampleTest extends AbstractTest { @Test(description = JIRA#AUTO-0009 ) @MethodOwner(owner = qpsdemo ) public void testCompareModels() { // Open GSM Arena home page and verify page is opened HomePage homePage = new HomePage(getDriver()); homePage.open(); Assert.assertTrue(homePage.isPageOpened(), Home page is not opened ); // Open model compare page FooterMenu footerMenu = homePage.getFooterMenu(); Assert.assertTrue(footerMenu.isUIObjectPresent(2), Footer menu wasn't found! ); CompareModelsPage comparePage = footerMenu.openComparePage(); // Compare 3 models List ModelSpecs specs = comparePage.compareModels( Samsung Galaxy J3 , Samsung Galaxy J5 , Samsung Galaxy J7 Pro ); // Verify model announced dates Assert.assertEquals(specs.get(0).readSpec(SpecType.ANNOUNCED), 2015, November ); Assert.assertEquals(specs.get(1).readSpec(SpecType.ANNOUNCED), 2016, September ); Assert.assertEquals(specs.get(2).readSpec(SpecType.ANNOUNCED), 2017, June ); } } It is good practice to implement all elements search logic of Page Object/UI Object side and perform assertions and validations in the test, do not mix that logic. Important: Test class should extend com.qaprosoft.carina.core.foundation.AbstractTest Test method should start with org.testng.annotations.Test annotation Use getDriver() method to get driver instance in test Locate tests in src/test/java source folder Test configuration There are few critical properties in config.properties file which are required for web tests execution: url=http://www.gsmarena.com platform=* browser=chrome browser_version=* Implemented tests cases should be placed in TestNG xml file according to test group the test belongs to. More details about TestNG configuration you may find in the official documentation . !DOCTYPE suite SYSTEM http://testng.org/testng-1.0.dtd suite verbose= 1 name= Carina Demo Tests - Web tests skipfailedinvocationcounts= false junit= false parallel= tests data-provider-thread-count= 50 annotations= JDK test name= GSM arena web tests classes class name= com.qaprosoft.carina.demo.WebSampleTest / /classes /test /suite","title":"Web automation"},{"location":"automation/web/#implementation-of-page-objects","text":"When you are writing functional tests using Selenium a major part of your code will consist of interactions with the web interface you are testing through the WebDriver API. After fetching elements you will verify some state of the element through various assertions and move on to fetching the next element. You may find WebElements directly in your tests: List WebElement zipCodes = driver.findElements(By.id( zipCodes )); for (WebElement zipCode : zipCodes) { if (zipCode.getText().equals( 12345 )){ zipCode.click(); break; } } WebElement city = driver.findElement(By.id( city )); assertEquals( MyCityName , city.getText()); So some of the typical problems for this type of Selenium test are: Test cases are difficult to read Changes in the UI breaks multiple tests often in several places Duplication of selectors both inside and across tests - no reuse So instead of having each test fetch elements directly and being fragile towards UI changes, the Page Object Pattern introduces what is basically a decoupling layer. You create an object that represents the UI you want to test, which could be a whole page or a significant part of it. The responsibility of this object is to wrap HTML elements and encapsulate interactions with the UI, meaning that this is where all calls to WebDriver will go. This is where most WebElements are. And this is the only place you need to modify when the UI changes. In general Page Object contains locators of the elements located on the page and some business logic that may be reused by different tests: public class ModelInfoPage extends AbstractPage { @FindBy(css = .help-display strong ) private ExtendedWebElement displayInfoLabel; @FindBy(css = .help-camera strong ) private ExtendedWebElement cameraInfoLabel; @FindBy(css = .help-expansion strong ) private ExtendedWebElement displayRamLabel; @FindBy(css = .help-battery strong ) private ExtendedWebElement batteryInfoLabel; public ModelInfoPage(WebDriver driver) { super(driver); } public String readDisplay() { assertElementPresent(displayInfoLabel); return displayInfoLabel.getText(); } public String readCamera() { assertElementPresent(cameraInfoLabel); return cameraInfoLabel.getText(); } public String readRam() { assertElementPresent(displayRamLabel); return displayRamLabel.getText(); } public String readBattery() { assertElementPresent(displayInfoLabel); return batteryInfoLabel.getText(); } } Important: Page should extend com.qaprosoft.carina.core.gui.AbstractPage Use com.qaprosoft.carina.core.foundation.webdriver.decorator.ExtendedWebElement instead of Selenium WebElement Locate Page Object classes in src/main/java","title":"Implementation of Page Objects"},{"location":"automation/web/#implementation-of-ui-components","text":"In some cases it is useful to implement UI Objects that may be reused between multiple Page Objects, for top menu or footer instance may be shared between multiple pages: public class FooterMenu extends AbstractUIObject { @FindBy(linkText = Home ) private ExtendedWebElement homeLink; @FindBy(linkText = Compare ) private ExtendedWebElement compareLink; public FooterMenu(WebDriver driver, SearchContext searchContext) { super(driver, searchContext); } public HomePage openHomePage() { homeLink.click(); return new HomePage(driver); } public CompareModelsPage openComparePage() { compareLink.click(); return new CompareModelsPage(driver); } } And then you can use that in Page Object: public class HomePage extends AbstractPage { @FindBy(id = footmenu ) private FooterMenu footerMenu; @FindBy(xpath = //div[contains(@class, 'brandmenu-v2')]//a ) private List ExtendedWebElement brandLinks; public HomePage(WebDriver driver) { super(driver); } public FooterMenu getFooterMenu() { return footerMenu; } public BrandModelsPage selectBrand(String brand) { LOGGER.info( selecting ' + brand + ' brand... ); for (ExtendedWebElement brandLink : brandLinks) { String currentBrand = brandLink.getText(); LOGGER.info( currentBrand: + currentBrand); if (brand.equalsIgnoreCase(currentBrand)) { brandLink.click(); return new BrandModelsPage(driver); } } throw new RuntimeException( Unable to open brand: + brand); } } Important: UI Object should extend com.qaprosoft.carina.core.gui.AbstractUIObject You should call super constructor super(driver, searchContext) where searchContext is an instance of org.openqa.selenium.SearchContext Locate UI Object classes in src/main/java source folder","title":"Implementation of UI Components"},{"location":"automation/web/#implementation-of-tests","text":"Carina framework uses TestNG for test organization. In general, test represents manipulation with Page Objects and additional validations of UI events. Here is sample test implementation: public class WebSampleTest extends AbstractTest { @Test(description = JIRA#AUTO-0009 ) @MethodOwner(owner = qpsdemo ) public void testCompareModels() { // Open GSM Arena home page and verify page is opened HomePage homePage = new HomePage(getDriver()); homePage.open(); Assert.assertTrue(homePage.isPageOpened(), Home page is not opened ); // Open model compare page FooterMenu footerMenu = homePage.getFooterMenu(); Assert.assertTrue(footerMenu.isUIObjectPresent(2), Footer menu wasn't found! ); CompareModelsPage comparePage = footerMenu.openComparePage(); // Compare 3 models List ModelSpecs specs = comparePage.compareModels( Samsung Galaxy J3 , Samsung Galaxy J5 , Samsung Galaxy J7 Pro ); // Verify model announced dates Assert.assertEquals(specs.get(0).readSpec(SpecType.ANNOUNCED), 2015, November ); Assert.assertEquals(specs.get(1).readSpec(SpecType.ANNOUNCED), 2016, September ); Assert.assertEquals(specs.get(2).readSpec(SpecType.ANNOUNCED), 2017, June ); } } It is good practice to implement all elements search logic of Page Object/UI Object side and perform assertions and validations in the test, do not mix that logic. Important: Test class should extend com.qaprosoft.carina.core.foundation.AbstractTest Test method should start with org.testng.annotations.Test annotation Use getDriver() method to get driver instance in test Locate tests in src/test/java source folder","title":"Implementation of tests"},{"location":"automation/web/#test-configuration","text":"There are few critical properties in config.properties file which are required for web tests execution: url=http://www.gsmarena.com platform=* browser=chrome browser_version=* Implemented tests cases should be placed in TestNG xml file according to test group the test belongs to. More details about TestNG configuration you may find in the official documentation . !DOCTYPE suite SYSTEM http://testng.org/testng-1.0.dtd suite verbose= 1 name= Carina Demo Tests - Web tests skipfailedinvocationcounts= false junit= false parallel= tests data-provider-thread-count= 50 annotations= JDK test name= GSM arena web tests classes class name= com.qaprosoft.carina.demo.WebSampleTest / /classes /test /suite","title":"Test configuration"}]}